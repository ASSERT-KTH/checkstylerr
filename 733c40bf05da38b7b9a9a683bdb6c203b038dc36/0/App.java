import java.io.IOException;

import io.reactivex.BackpressureStrategy;

import com.arm.mbed.cloud.Sdk;
import com.arm.mbed.cloud.sdk.accounts.model.AccountDao;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.TimePeriod;
import com.arm.mbed.cloud.sdk.connect.model.Resource;
import com.arm.mbed.cloud.sdk.devices.model.Device;
import com.arm.mbed.cloud.sdk.subscribe.model.DeviceState;
import com.arm.mbed.cloud.sdk.subscribe.model.DeviceStateFilterOptions;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        /**
         * This is a small application to switch on the LED on newly registered devices. Devices must have the Mbed
         * client example installed on them: https://github.com/ARMmbed/simple-mbed-cloud-client
         */
        // Loading the API key for Pelion Device Management from an environment variable
        final ConnectionOptions config = ConnectionOptions.newConfiguration(System.getenv("MBED_CLOUD_API_KEY"));
        // Instantiating an SDK.
        try (Sdk sdk = Sdk.createSdk(config); AccountDao accountDao = sdk.foundation().getAccountDao()) {
            // Checking that we can connect to Pelion Device Management by checking my account
            System.out.println("Hello " + accountDao.me().getContact());
            System.out.println("You are about to blink all newly registered devices...");

            final TimePeriod timeout = new TimePeriod(10);
            // According to the Pelion Device Management IoT Connection Tutorial
            // https://os.mbed.com/guides/connect-device-to-pelion/
            // the LED state resource is, as follows:
            final String LedStateResourcePath = "3201/0/5853";

            // Subscribing to any newly registered devices. When a new device gets registered, its ID is printed to the
            // console and a request to switch on the LED is sent.
            sdk.subscribe(DeviceStateFilterOptions.newFilter().equalDeviceState(DeviceState.REGISTRATION),
                          BackpressureStrategy.BUFFER)
               .flow().doOnError(System.err::println).subscribe(message -> {
                   // Printing the ID of the newly registered device
                   System.out.println("Received a notification from device [" + message.getDeviceId()
                                      + "] which just registered to Pelion Device Management");
                   Resource resource = sdk.lowLevelRest().getConnectModule()
                                          .getResource(new Device(message.getDeviceId()), LedStateResourcePath);
                   if (resource == null) {
                       System.out.println("Device [" + message.getDeviceId() + "] does not have the resource ["
                                          + LedStateResourcePath + "] defined to switch on the LED");
                   } else {
                       // Sending a request to switch on the LED to the corresponding device
                       System.out.println("Asking Device [" + message.getDeviceId() + "] to switch on the LED");
                       sdk.lowLevelRest().getConnectModule().setResourceValue(resource, "1", timeout);

                   }
               });
            /*
             * TODO Do some actual work
             */
            Thread.sleep(120000);// waiting for 2 minutes
            /*
             * TODO Do some actual work
             */
        } catch (MbedCloudException | InterruptedException | IOException e) {
            e.printStackTrace();
        }
        // End of the application
    }
}
