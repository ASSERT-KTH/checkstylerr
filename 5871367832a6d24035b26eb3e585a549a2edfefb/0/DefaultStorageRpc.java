/* * Copyright 2015 Google Inc. All Rights Reserved. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *       http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.google.gcloud.spi;import com.google.api.client.http.HttpRequestInitializer;import com.google.api.client.http.HttpTransport;import com.google.api.client.json.jackson.JacksonFactory;import com.google.api.services.storage.Storage;import com.google.api.services.storage.model.Bucket;import com.google.api.services.storage.model.Buckets;import com.google.api.services.storage.model.StorageObject;import com.google.gcloud.storage.StorageServiceOptions;import java.io.IOException;import java.util.List;public class DefaultStorageRpc implements StorageRpc {  private final StorageServiceOptions options;  private final Storage storage;  public DefaultStorageRpc(StorageServiceOptions options) {    HttpTransport transport = options.httpTransport();    HttpRequestInitializer initializer = transport.createRequestFactory()        .getInitializer();    this.options = options;    storage = new Storage.Builder(transport, new JacksonFactory(), initializer).build();    // Todo: set projection to full    // Todo: make sure nulls are being used as Data.asNull()  }  @Override  public List<Bucket> buckets() throws IOException {    Buckets buckets = storage.buckets().list(options.project()).execute();    return buckets.getItems();  }  @Override  public List<StorageObject> objects(String bucket, String prefix, String delimiter)      throws IOException {    return null;  }  @Override  public Bucket get(String bucket) throws IOException {    return storage.buckets().get(bucket).execute();  }  @Override  public StorageObject get(String bucket, String object) throws IOException {    return storage.objects().get(bucket, object).execute();  }  @Override  public Bucket patch(Bucket bucket) throws IOException {    return storage.buckets().patch(bucket.getName(), bucket).execute();  }  @Override  public StorageObject patch(StorageObject storageObject) throws IOException {    return storage.objects()        .patch(storageObject.getBucket(), storageObject.getName(), storageObject).execute();  }  @Override  public void delete(String bucket, String object) throws IOException {    storage.objects().delete(bucket, object).execute();  }}