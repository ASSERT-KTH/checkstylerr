/*
 * This file is generated by jOOQ.
 */
package com.selfxdsd.storage.generated.jooq.tables;


import com.selfxdsd.storage.generated.jooq.Keys;
import com.selfxdsd.storage.generated.jooq.SelfXdsd;
import com.selfxdsd.storage.generated.jooq.tables.records.SldPaymentsXdsdRecord;

import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SldPaymentsXdsd extends TableImpl<SldPaymentsXdsdRecord> {

    private static final long serialVersionUID = -589170999;

    /**
     * The reference instance of <code>self_xdsd.sld_payments_xdsd</code>
     */
    public static final SldPaymentsXdsd SLD_PAYMENTS_XDSD = new SldPaymentsXdsd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SldPaymentsXdsdRecord> getRecordType() {
        return SldPaymentsXdsdRecord.class;
    }

    /**
     * The column <code>self_xdsd.sld_payments_xdsd.invoiceId</code>.
     */
    public final TableField<SldPaymentsXdsdRecord, Integer> INVOICEID = createField(DSL.name("invoiceId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.sld_payments_xdsd.transactionId</code>.
     */
    public final TableField<SldPaymentsXdsdRecord, String> TRANSACTIONID = createField(DSL.name("transactionId"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.sld_payments_xdsd.payment_timestamp</code>.
     */
    public final TableField<SldPaymentsXdsdRecord, LocalDateTime> PAYMENT_TIMESTAMP = createField(DSL.name("payment_timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.sld_payments_xdsd.value</code>.
     */
    public final TableField<SldPaymentsXdsdRecord, BigInteger> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.sld_payments_xdsd.status</code>.
     */
    public final TableField<SldPaymentsXdsdRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.sld_payments_xdsd.failReason</code>.
     */
    public final TableField<SldPaymentsXdsdRecord, String> FAILREASON = createField(DSL.name("failReason"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * Create a <code>self_xdsd.sld_payments_xdsd</code> table reference
     */
    public SldPaymentsXdsd() {
        this(DSL.name("sld_payments_xdsd"), null);
    }

    /**
     * Create an aliased <code>self_xdsd.sld_payments_xdsd</code> table reference
     */
    public SldPaymentsXdsd(String alias) {
        this(DSL.name(alias), SLD_PAYMENTS_XDSD);
    }

    /**
     * Create an aliased <code>self_xdsd.sld_payments_xdsd</code> table reference
     */
    public SldPaymentsXdsd(Name alias) {
        this(alias, SLD_PAYMENTS_XDSD);
    }

    private SldPaymentsXdsd(Name alias, Table<SldPaymentsXdsdRecord> aliased) {
        this(alias, aliased, null);
    }

    private SldPaymentsXdsd(Name alias, Table<SldPaymentsXdsdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SldPaymentsXdsd(Table<O> child, ForeignKey<O, SldPaymentsXdsdRecord> key) {
        super(child, key, SLD_PAYMENTS_XDSD);
    }

    @Override
    public Schema getSchema() {
        return SelfXdsd.SELF_XDSD;
    }

    @Override
    public UniqueKey<SldPaymentsXdsdRecord> getPrimaryKey() {
        return Keys.KEY_SLD_PAYMENTS_XDSD_PRIMARY;
    }

    @Override
    public List<UniqueKey<SldPaymentsXdsdRecord>> getKeys() {
        return Arrays.<UniqueKey<SldPaymentsXdsdRecord>>asList(Keys.KEY_SLD_PAYMENTS_XDSD_PRIMARY);
    }

    @Override
    public List<ForeignKey<SldPaymentsXdsdRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SldPaymentsXdsdRecord, ?>>asList(Keys.PAIDINVOICEFK);
    }

    public SlfInvoicesXdsd slfInvoicesXdsd() {
        return new SlfInvoicesXdsd(this, Keys.PAIDINVOICEFK);
    }

    @Override
    public SldPaymentsXdsd as(String alias) {
        return new SldPaymentsXdsd(DSL.name(alias), this);
    }

    @Override
    public SldPaymentsXdsd as(Name alias) {
        return new SldPaymentsXdsd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SldPaymentsXdsd rename(String name) {
        return new SldPaymentsXdsd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SldPaymentsXdsd rename(Name name) {
        return new SldPaymentsXdsd(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDateTime, BigInteger, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
