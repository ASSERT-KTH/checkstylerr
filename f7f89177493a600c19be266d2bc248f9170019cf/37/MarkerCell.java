/* 
 * Copyright 2015 Torridity.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tor.tribes.ui;

import de.tor.tribes.io.DataHolder;
import de.tor.tribes.types.ext.Ally;
import de.tor.tribes.types.Marker;
import de.tor.tribes.types.ext.Tribe;
import javax.swing.ImageIcon;

/**
 *
 * @author  Charon
 */
public class MarkerCell extends javax.swing.JPanel implements Comparable<MarkerCell> {

    private static ImageIcon PLAYER_ICON = null;
    private static ImageIcon ALLY_ICON = null;
    private int type = Marker.TRIBE_MARKER_TYPE;
    private Tribe mTribe = null;
    private Ally mAlly = null;

    static {
        try {
            PLAYER_ICON = new javax.swing.ImageIcon(MarkerCell.class.getResource("/res/face.png"));
            ALLY_ICON = new javax.swing.ImageIcon(MarkerCell.class.getResource("/res/ally.png"));
        } catch (Exception ignored) {
        }
    }

    public static MarkerCell factoryMarkerCell(Marker pMarker) throws Exception {
        if (pMarker == null) {
            return null;
        } else {
            if (pMarker.getMarkerType() == Marker.TRIBE_MARKER_TYPE) {
                MarkerCell c = new MarkerCell(DataHolder.getSingleton().getTribes().get(pMarker.getMarkerID()));
                return c;
            } else if (pMarker.getMarkerType() == Marker.ALLY_MARKER_TYPE) {
                MarkerCell c = new MarkerCell(DataHolder.getSingleton().getAllies().get(pMarker.getMarkerID()));
                return c;
            }
        }
        return null;
    }

    /** Creates new form MarkerPanel */
    MarkerCell(Tribe pTribe) throws Exception {
        if (pTribe == null) {
            throw new InstantiationException("Tribe argument must not be null");
        }

        initComponents();
        mTribe = pTribe;
        jMarkerLabel.setText(mTribe.getName());
        jMarkerLabel.setIcon(PLAYER_ICON);
        type = Marker.TRIBE_MARKER_TYPE;
        setToolTipText(mTribe.getToolTipText());
    }

    MarkerCell(Ally pAlly) throws Exception {
        if (pAlly == null) {
            throw new InstantiationException("Ally argument must not be null");
        }
        initComponents();
        mAlly = pAlly;
        jMarkerLabel.setText(mAlly.getName());
        jMarkerLabel.setIcon(ALLY_ICON);
        type = Marker.ALLY_MARKER_TYPE;
        setToolTipText(mAlly.getToolTipText());
    }

    public Tribe getTribe() {
        return mTribe;
    }

    public Ally getAlly() {
        return mAlly;
    }

    public int getType() {
        return type;
    }

    public void setType(int pType) {
        type = pType;
    }

    public String getMarkerName() {
        return jMarkerLabel.getText();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jMarkerLabel = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setBackground(new java.awt.Color(255, 255, 255));

        jMarkerLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMarkerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ally.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMarkerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMarkerLabel)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jMarkerLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public int compareTo(MarkerCell o) {
        try {
            MarkerCell c = o;
            String v1 = "";
            if (c.getType() == Marker.ALLY_MARKER_TYPE) {
                v1 = c.getAlly().getName();
            } else {
                v1 = c.getTribe().getName();
            }
            String v2 = "";
            if (type == Marker.ALLY_MARKER_TYPE) {
                v2 = mAlly.getName();
            } else {
                v2 = mTribe.getName();
            }
            return String.CASE_INSENSITIVE_ORDER.compare(v1, v2);
        } catch (Exception e) {
            return 0;
        }
    }
}
