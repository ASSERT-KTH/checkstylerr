/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TColumnData implements org.apache.thrift.TBase<TColumnData, TColumnData._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnData");

  private static final org.apache.thrift.protocol.TField INT_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("int_col", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REAL_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("real_col", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STR_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("str_col", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ARR_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("arr_col", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TColumnDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TColumnDataTupleSchemeFactory();

  public java.util.List<java.lang.Long> int_col; // required
  public java.util.List<java.lang.Double> real_col; // required
  public java.util.List<java.lang.String> str_col; // required
  public java.util.List<TColumn> arr_col; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INT_COL((short)1, "int_col"),
    REAL_COL((short)2, "real_col"),
    STR_COL((short)3, "str_col"),
    ARR_COL((short)4, "arr_col");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_COL
          return INT_COL;
        case 2: // REAL_COL
          return REAL_COL;
        case 3: // STR_COL
          return STR_COL;
        case 4: // ARR_COL
          return ARR_COL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_COL, new org.apache.thrift.meta_data.FieldMetaData("int_col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.REAL_COL, new org.apache.thrift.meta_data.FieldMetaData("real_col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STR_COL, new org.apache.thrift.meta_data.FieldMetaData("str_col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ARR_COL, new org.apache.thrift.meta_data.FieldMetaData("arr_col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TColumn"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnData.class, metaDataMap);
  }

  public TColumnData() {
  }

  public TColumnData(
    java.util.List<java.lang.Long> int_col,
    java.util.List<java.lang.Double> real_col,
    java.util.List<java.lang.String> str_col,
    java.util.List<TColumn> arr_col)
  {
    this();
    this.int_col = int_col;
    this.real_col = real_col;
    this.str_col = str_col;
    this.arr_col = arr_col;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnData(TColumnData other) {
    if (other.isSetInt_col()) {
      java.util.List<java.lang.Long> __this__int_col = new java.util.ArrayList<java.lang.Long>(other.int_col);
      this.int_col = __this__int_col;
    }
    if (other.isSetReal_col()) {
      java.util.List<java.lang.Double> __this__real_col = new java.util.ArrayList<java.lang.Double>(other.real_col);
      this.real_col = __this__real_col;
    }
    if (other.isSetStr_col()) {
      java.util.List<java.lang.String> __this__str_col = new java.util.ArrayList<java.lang.String>(other.str_col);
      this.str_col = __this__str_col;
    }
    if (other.isSetArr_col()) {
      java.util.List<TColumn> __this__arr_col = new java.util.ArrayList<TColumn>(other.arr_col.size());
      for (TColumn other_element : other.arr_col) {
        __this__arr_col.add(new TColumn(other_element));
      }
      this.arr_col = __this__arr_col;
    }
  }

  public TColumnData deepCopy() {
    return new TColumnData(this);
  }

  @Override
  public void clear() {
    this.int_col = null;
    this.real_col = null;
    this.str_col = null;
    this.arr_col = null;
  }

  public int getInt_colSize() {
    return (this.int_col == null) ? 0 : this.int_col.size();
  }

  public java.util.Iterator<java.lang.Long> getInt_colIterator() {
    return (this.int_col == null) ? null : this.int_col.iterator();
  }

  public void addToInt_col(long elem) {
    if (this.int_col == null) {
      this.int_col = new java.util.ArrayList<java.lang.Long>();
    }
    this.int_col.add(elem);
  }

  public java.util.List<java.lang.Long> getInt_col() {
    return this.int_col;
  }

  public TColumnData setInt_col(java.util.List<java.lang.Long> int_col) {
    this.int_col = int_col;
    return this;
  }

  public void unsetInt_col() {
    this.int_col = null;
  }

  /** Returns true if field int_col is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_col() {
    return this.int_col != null;
  }

  public void setInt_colIsSet(boolean value) {
    if (!value) {
      this.int_col = null;
    }
  }

  public int getReal_colSize() {
    return (this.real_col == null) ? 0 : this.real_col.size();
  }

  public java.util.Iterator<java.lang.Double> getReal_colIterator() {
    return (this.real_col == null) ? null : this.real_col.iterator();
  }

  public void addToReal_col(double elem) {
    if (this.real_col == null) {
      this.real_col = new java.util.ArrayList<java.lang.Double>();
    }
    this.real_col.add(elem);
  }

  public java.util.List<java.lang.Double> getReal_col() {
    return this.real_col;
  }

  public TColumnData setReal_col(java.util.List<java.lang.Double> real_col) {
    this.real_col = real_col;
    return this;
  }

  public void unsetReal_col() {
    this.real_col = null;
  }

  /** Returns true if field real_col is set (has been assigned a value) and false otherwise */
  public boolean isSetReal_col() {
    return this.real_col != null;
  }

  public void setReal_colIsSet(boolean value) {
    if (!value) {
      this.real_col = null;
    }
  }

  public int getStr_colSize() {
    return (this.str_col == null) ? 0 : this.str_col.size();
  }

  public java.util.Iterator<java.lang.String> getStr_colIterator() {
    return (this.str_col == null) ? null : this.str_col.iterator();
  }

  public void addToStr_col(java.lang.String elem) {
    if (this.str_col == null) {
      this.str_col = new java.util.ArrayList<java.lang.String>();
    }
    this.str_col.add(elem);
  }

  public java.util.List<java.lang.String> getStr_col() {
    return this.str_col;
  }

  public TColumnData setStr_col(java.util.List<java.lang.String> str_col) {
    this.str_col = str_col;
    return this;
  }

  public void unsetStr_col() {
    this.str_col = null;
  }

  /** Returns true if field str_col is set (has been assigned a value) and false otherwise */
  public boolean isSetStr_col() {
    return this.str_col != null;
  }

  public void setStr_colIsSet(boolean value) {
    if (!value) {
      this.str_col = null;
    }
  }

  public int getArr_colSize() {
    return (this.arr_col == null) ? 0 : this.arr_col.size();
  }

  public java.util.Iterator<TColumn> getArr_colIterator() {
    return (this.arr_col == null) ? null : this.arr_col.iterator();
  }

  public void addToArr_col(TColumn elem) {
    if (this.arr_col == null) {
      this.arr_col = new java.util.ArrayList<TColumn>();
    }
    this.arr_col.add(elem);
  }

  public java.util.List<TColumn> getArr_col() {
    return this.arr_col;
  }

  public TColumnData setArr_col(java.util.List<TColumn> arr_col) {
    this.arr_col = arr_col;
    return this;
  }

  public void unsetArr_col() {
    this.arr_col = null;
  }

  /** Returns true if field arr_col is set (has been assigned a value) and false otherwise */
  public boolean isSetArr_col() {
    return this.arr_col != null;
  }

  public void setArr_colIsSet(boolean value) {
    if (!value) {
      this.arr_col = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case INT_COL:
      if (value == null) {
        unsetInt_col();
      } else {
        setInt_col((java.util.List<java.lang.Long>)value);
      }
      break;

    case REAL_COL:
      if (value == null) {
        unsetReal_col();
      } else {
        setReal_col((java.util.List<java.lang.Double>)value);
      }
      break;

    case STR_COL:
      if (value == null) {
        unsetStr_col();
      } else {
        setStr_col((java.util.List<java.lang.String>)value);
      }
      break;

    case ARR_COL:
      if (value == null) {
        unsetArr_col();
      } else {
        setArr_col((java.util.List<TColumn>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_COL:
      return getInt_col();

    case REAL_COL:
      return getReal_col();

    case STR_COL:
      return getStr_col();

    case ARR_COL:
      return getArr_col();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INT_COL:
      return isSetInt_col();
    case REAL_COL:
      return isSetReal_col();
    case STR_COL:
      return isSetStr_col();
    case ARR_COL:
      return isSetArr_col();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnData)
      return this.equals((TColumnData)that);
    return false;
  }

  public boolean equals(TColumnData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_int_col = true && this.isSetInt_col();
    boolean that_present_int_col = true && that.isSetInt_col();
    if (this_present_int_col || that_present_int_col) {
      if (!(this_present_int_col && that_present_int_col))
        return false;
      if (!this.int_col.equals(that.int_col))
        return false;
    }

    boolean this_present_real_col = true && this.isSetReal_col();
    boolean that_present_real_col = true && that.isSetReal_col();
    if (this_present_real_col || that_present_real_col) {
      if (!(this_present_real_col && that_present_real_col))
        return false;
      if (!this.real_col.equals(that.real_col))
        return false;
    }

    boolean this_present_str_col = true && this.isSetStr_col();
    boolean that_present_str_col = true && that.isSetStr_col();
    if (this_present_str_col || that_present_str_col) {
      if (!(this_present_str_col && that_present_str_col))
        return false;
      if (!this.str_col.equals(that.str_col))
        return false;
    }

    boolean this_present_arr_col = true && this.isSetArr_col();
    boolean that_present_arr_col = true && that.isSetArr_col();
    if (this_present_arr_col || that_present_arr_col) {
      if (!(this_present_arr_col && that_present_arr_col))
        return false;
      if (!this.arr_col.equals(that.arr_col))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInt_col()) ? 131071 : 524287);
    if (isSetInt_col())
      hashCode = hashCode * 8191 + int_col.hashCode();

    hashCode = hashCode * 8191 + ((isSetReal_col()) ? 131071 : 524287);
    if (isSetReal_col())
      hashCode = hashCode * 8191 + real_col.hashCode();

    hashCode = hashCode * 8191 + ((isSetStr_col()) ? 131071 : 524287);
    if (isSetStr_col())
      hashCode = hashCode * 8191 + str_col.hashCode();

    hashCode = hashCode * 8191 + ((isSetArr_col()) ? 131071 : 524287);
    if (isSetArr_col())
      hashCode = hashCode * 8191 + arr_col.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TColumnData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInt_col()).compareTo(other.isSetInt_col());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_col()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_col, other.int_col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReal_col()).compareTo(other.isSetReal_col());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReal_col()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.real_col, other.real_col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStr_col()).compareTo(other.isSetStr_col());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr_col()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str_col, other.str_col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArr_col()).compareTo(other.isSetArr_col());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArr_col()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arr_col, other.arr_col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TColumnData(");
    boolean first = true;

    sb.append("int_col:");
    if (this.int_col == null) {
      sb.append("null");
    } else {
      sb.append(this.int_col);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("real_col:");
    if (this.real_col == null) {
      sb.append("null");
    } else {
      sb.append(this.real_col);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str_col:");
    if (this.str_col == null) {
      sb.append("null");
    } else {
      sb.append(this.str_col);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arr_col:");
    if (this.arr_col == null) {
      sb.append("null");
    } else {
      sb.append(this.arr_col);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TColumnDataStandardScheme getScheme() {
      return new TColumnDataStandardScheme();
    }
  }

  private static class TColumnDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TColumnData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INT_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.int_col = new java.util.ArrayList<java.lang.Long>(_list16.size);
                long _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI64();
                  struct.int_col.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setInt_colIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REAL_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.real_col = new java.util.ArrayList<java.lang.Double>(_list19.size);
                double _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readDouble();
                  struct.real_col.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setReal_colIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STR_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.str_col = new java.util.ArrayList<java.lang.String>(_list22.size);
                java.lang.String _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readString();
                  struct.str_col.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setStr_colIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARR_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.arr_col = new java.util.ArrayList<TColumn>(_list25.size);
                TColumn _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = new TColumn();
                  _elem26.read(iprot);
                  struct.arr_col.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setArr_colIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.int_col != null) {
        oprot.writeFieldBegin(INT_COL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.int_col.size()));
          for (long _iter28 : struct.int_col)
          {
            oprot.writeI64(_iter28);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.real_col != null) {
        oprot.writeFieldBegin(REAL_COL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.real_col.size()));
          for (double _iter29 : struct.real_col)
          {
            oprot.writeDouble(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.str_col != null) {
        oprot.writeFieldBegin(STR_COL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.str_col.size()));
          for (java.lang.String _iter30 : struct.str_col)
          {
            oprot.writeString(_iter30);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.arr_col != null) {
        oprot.writeFieldBegin(ARR_COL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arr_col.size()));
          for (TColumn _iter31 : struct.arr_col)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TColumnDataTupleScheme getScheme() {
      return new TColumnDataTupleScheme();
    }
  }

  private static class TColumnDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TColumnData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInt_col()) {
        optionals.set(0);
      }
      if (struct.isSetReal_col()) {
        optionals.set(1);
      }
      if (struct.isSetStr_col()) {
        optionals.set(2);
      }
      if (struct.isSetArr_col()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInt_col()) {
        {
          oprot.writeI32(struct.int_col.size());
          for (long _iter32 : struct.int_col)
          {
            oprot.writeI64(_iter32);
          }
        }
      }
      if (struct.isSetReal_col()) {
        {
          oprot.writeI32(struct.real_col.size());
          for (double _iter33 : struct.real_col)
          {
            oprot.writeDouble(_iter33);
          }
        }
      }
      if (struct.isSetStr_col()) {
        {
          oprot.writeI32(struct.str_col.size());
          for (java.lang.String _iter34 : struct.str_col)
          {
            oprot.writeString(_iter34);
          }
        }
      }
      if (struct.isSetArr_col()) {
        {
          oprot.writeI32(struct.arr_col.size());
          for (TColumn _iter35 : struct.arr_col)
          {
            _iter35.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.int_col = new java.util.ArrayList<java.lang.Long>(_list36.size);
          long _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readI64();
            struct.int_col.add(_elem37);
          }
        }
        struct.setInt_colIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.real_col = new java.util.ArrayList<java.lang.Double>(_list39.size);
          double _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readDouble();
            struct.real_col.add(_elem40);
          }
        }
        struct.setReal_colIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.str_col = new java.util.ArrayList<java.lang.String>(_list42.size);
          java.lang.String _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readString();
            struct.str_col.add(_elem43);
          }
        }
        struct.setStr_colIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.arr_col = new java.util.ArrayList<TColumn>(_list45.size);
          TColumn _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TColumn();
            _elem46.read(iprot);
            struct.arr_col.add(_elem46);
          }
        }
        struct.setArr_colIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

