/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TTableGeneration implements org.apache.thrift.TBase<TTableGeneration, TTableGeneration._Fields>, java.io.Serializable, Cloneable, Comparable<TTableGeneration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableGeneration");

  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TUPLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_count", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_ROWID_FIELD_DESC = new org.apache.thrift.protocol.TField("start_rowid", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableGenerationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableGenerationTupleSchemeFactory();

  public int table_id; // required
  public long tuple_count; // required
  public long start_rowid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_ID((short)1, "table_id"),
    TUPLE_COUNT((short)2, "tuple_count"),
    START_ROWID((short)3, "start_rowid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_ID
          return TABLE_ID;
        case 2: // TUPLE_COUNT
          return TUPLE_COUNT;
        case 3: // START_ROWID
          return START_ROWID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLE_ID_ISSET_ID = 0;
  private static final int __TUPLE_COUNT_ISSET_ID = 1;
  private static final int __START_ROWID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TUPLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("tuple_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_ROWID, new org.apache.thrift.meta_data.FieldMetaData("start_rowid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableGeneration.class, metaDataMap);
  }

  public TTableGeneration() {
  }

  public TTableGeneration(
    int table_id,
    long tuple_count,
    long start_rowid)
  {
    this();
    this.table_id = table_id;
    setTable_idIsSet(true);
    this.tuple_count = tuple_count;
    setTuple_countIsSet(true);
    this.start_rowid = start_rowid;
    setStart_rowidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableGeneration(TTableGeneration other) {
    __isset_bitfield = other.__isset_bitfield;
    this.table_id = other.table_id;
    this.tuple_count = other.tuple_count;
    this.start_rowid = other.start_rowid;
  }

  public TTableGeneration deepCopy() {
    return new TTableGeneration(this);
  }

  @Override
  public void clear() {
    setTable_idIsSet(false);
    this.table_id = 0;
    setTuple_countIsSet(false);
    this.tuple_count = 0;
    setStart_rowidIsSet(false);
    this.start_rowid = 0;
  }

  public int getTable_id() {
    return this.table_id;
  }

  public TTableGeneration setTable_id(int table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getTuple_count() {
    return this.tuple_count;
  }

  public TTableGeneration setTuple_count(long tuple_count) {
    this.tuple_count = tuple_count;
    setTuple_countIsSet(true);
    return this;
  }

  public void unsetTuple_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_COUNT_ISSET_ID);
  }

  /** Returns true if field tuple_count is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_COUNT_ISSET_ID);
  }

  public void setTuple_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_COUNT_ISSET_ID, value);
  }

  public long getStart_rowid() {
    return this.start_rowid;
  }

  public TTableGeneration setStart_rowid(long start_rowid) {
    this.start_rowid = start_rowid;
    setStart_rowidIsSet(true);
    return this;
  }

  public void unsetStart_rowid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ROWID_ISSET_ID);
  }

  /** Returns true if field start_rowid is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_rowid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ROWID_ISSET_ID);
  }

  public void setStart_rowidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ROWID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Integer)value);
      }
      break;

    case TUPLE_COUNT:
      if (value == null) {
        unsetTuple_count();
      } else {
        setTuple_count((java.lang.Long)value);
      }
      break;

    case START_ROWID:
      if (value == null) {
        unsetStart_rowid();
      } else {
        setStart_rowid((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_ID:
      return getTable_id();

    case TUPLE_COUNT:
      return getTuple_count();

    case START_ROWID:
      return getStart_rowid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_ID:
      return isSetTable_id();
    case TUPLE_COUNT:
      return isSetTuple_count();
    case START_ROWID:
      return isSetStart_rowid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableGeneration)
      return this.equals((TTableGeneration)that);
    return false;
  }

  public boolean equals(TTableGeneration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_id = true;
    boolean that_present_table_id = true;
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_tuple_count = true;
    boolean that_present_tuple_count = true;
    if (this_present_tuple_count || that_present_tuple_count) {
      if (!(this_present_tuple_count && that_present_tuple_count))
        return false;
      if (this.tuple_count != that.tuple_count)
        return false;
    }

    boolean this_present_start_rowid = true;
    boolean that_present_start_rowid = true;
    if (this_present_start_rowid || that_present_start_rowid) {
      if (!(this_present_start_rowid && that_present_start_rowid))
        return false;
      if (this.start_rowid != that.start_rowid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + table_id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tuple_count);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_rowid);

    return hashCode;
  }

  @Override
  public int compareTo(TTableGeneration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTable_id()).compareTo(other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTuple_count()).compareTo(other.isSetTuple_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_count, other.tuple_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_rowid()).compareTo(other.isSetStart_rowid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_rowid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_rowid, other.start_rowid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableGeneration(");
    boolean first = true;

    sb.append("table_id:");
    sb.append(this.table_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuple_count:");
    sb.append(this.tuple_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_rowid:");
    sb.append(this.start_rowid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableGenerationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableGenerationStandardScheme getScheme() {
      return new TTableGenerationStandardScheme();
    }
  }

  private static class TTableGenerationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableGeneration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableGeneration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.table_id = iprot.readI32();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TUPLE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tuple_count = iprot.readI64();
              struct.setTuple_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_ROWID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_rowid = iprot.readI64();
              struct.setStart_rowidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableGeneration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI32(struct.table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TUPLE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.tuple_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_ROWID_FIELD_DESC);
      oprot.writeI64(struct.start_rowid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableGenerationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableGenerationTupleScheme getScheme() {
      return new TTableGenerationTupleScheme();
    }
  }

  private static class TTableGenerationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableGeneration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableGeneration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_id()) {
        optionals.set(0);
      }
      if (struct.isSetTuple_count()) {
        optionals.set(1);
      }
      if (struct.isSetStart_rowid()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTable_id()) {
        oprot.writeI32(struct.table_id);
      }
      if (struct.isSetTuple_count()) {
        oprot.writeI64(struct.tuple_count);
      }
      if (struct.isSetStart_rowid()) {
        oprot.writeI64(struct.start_rowid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableGeneration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.table_id = iprot.readI32();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tuple_count = iprot.readI64();
        struct.setTuple_countIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_rowid = iprot.readI64();
        struct.setStart_rowidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

