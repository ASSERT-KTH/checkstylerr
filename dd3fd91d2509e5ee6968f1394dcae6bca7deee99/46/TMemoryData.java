/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TMemoryData implements org.apache.thrift.TBase<TMemoryData, TMemoryData._Fields>, java.io.Serializable, Cloneable, Comparable<TMemoryData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMemoryData");

  private static final org.apache.thrift.protocol.TField SLAB_FIELD_DESC = new org.apache.thrift.protocol.TField("slab", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField START_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_page", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_pages", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("touch", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CHUNK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk_key", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BUFFER_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer_epoch", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_free", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMemoryDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMemoryDataTupleSchemeFactory();

  public long slab; // required
  public int start_page; // required
  public long num_pages; // required
  public int touch; // required
  public java.util.List<java.lang.Long> chunk_key; // required
  public int buffer_epoch; // required
  public boolean is_free; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLAB((short)1, "slab"),
    START_PAGE((short)2, "start_page"),
    NUM_PAGES((short)3, "num_pages"),
    TOUCH((short)4, "touch"),
    CHUNK_KEY((short)5, "chunk_key"),
    BUFFER_EPOCH((short)6, "buffer_epoch"),
    IS_FREE((short)7, "is_free");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLAB
          return SLAB;
        case 2: // START_PAGE
          return START_PAGE;
        case 3: // NUM_PAGES
          return NUM_PAGES;
        case 4: // TOUCH
          return TOUCH;
        case 5: // CHUNK_KEY
          return CHUNK_KEY;
        case 6: // BUFFER_EPOCH
          return BUFFER_EPOCH;
        case 7: // IS_FREE
          return IS_FREE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLAB_ISSET_ID = 0;
  private static final int __START_PAGE_ISSET_ID = 1;
  private static final int __NUM_PAGES_ISSET_ID = 2;
  private static final int __TOUCH_ISSET_ID = 3;
  private static final int __BUFFER_EPOCH_ISSET_ID = 4;
  private static final int __IS_FREE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLAB, new org.apache.thrift.meta_data.FieldMetaData("slab", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_PAGE, new org.apache.thrift.meta_data.FieldMetaData("start_page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_PAGES, new org.apache.thrift.meta_data.FieldMetaData("num_pages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOUCH, new org.apache.thrift.meta_data.FieldMetaData("touch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHUNK_KEY, new org.apache.thrift.meta_data.FieldMetaData("chunk_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BUFFER_EPOCH, new org.apache.thrift.meta_data.FieldMetaData("buffer_epoch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FREE, new org.apache.thrift.meta_data.FieldMetaData("is_free", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMemoryData.class, metaDataMap);
  }

  public TMemoryData() {
  }

  public TMemoryData(
    long slab,
    int start_page,
    long num_pages,
    int touch,
    java.util.List<java.lang.Long> chunk_key,
    int buffer_epoch,
    boolean is_free)
  {
    this();
    this.slab = slab;
    setSlabIsSet(true);
    this.start_page = start_page;
    setStart_pageIsSet(true);
    this.num_pages = num_pages;
    setNum_pagesIsSet(true);
    this.touch = touch;
    setTouchIsSet(true);
    this.chunk_key = chunk_key;
    this.buffer_epoch = buffer_epoch;
    setBuffer_epochIsSet(true);
    this.is_free = is_free;
    setIs_freeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMemoryData(TMemoryData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.slab = other.slab;
    this.start_page = other.start_page;
    this.num_pages = other.num_pages;
    this.touch = other.touch;
    if (other.isSetChunk_key()) {
      java.util.List<java.lang.Long> __this__chunk_key = new java.util.ArrayList<java.lang.Long>(other.chunk_key);
      this.chunk_key = __this__chunk_key;
    }
    this.buffer_epoch = other.buffer_epoch;
    this.is_free = other.is_free;
  }

  public TMemoryData deepCopy() {
    return new TMemoryData(this);
  }

  @Override
  public void clear() {
    setSlabIsSet(false);
    this.slab = 0;
    setStart_pageIsSet(false);
    this.start_page = 0;
    setNum_pagesIsSet(false);
    this.num_pages = 0;
    setTouchIsSet(false);
    this.touch = 0;
    this.chunk_key = null;
    setBuffer_epochIsSet(false);
    this.buffer_epoch = 0;
    setIs_freeIsSet(false);
    this.is_free = false;
  }

  public long getSlab() {
    return this.slab;
  }

  public TMemoryData setSlab(long slab) {
    this.slab = slab;
    setSlabIsSet(true);
    return this;
  }

  public void unsetSlab() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLAB_ISSET_ID);
  }

  /** Returns true if field slab is set (has been assigned a value) and false otherwise */
  public boolean isSetSlab() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLAB_ISSET_ID);
  }

  public void setSlabIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLAB_ISSET_ID, value);
  }

  public int getStart_page() {
    return this.start_page;
  }

  public TMemoryData setStart_page(int start_page) {
    this.start_page = start_page;
    setStart_pageIsSet(true);
    return this;
  }

  public void unsetStart_page() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_PAGE_ISSET_ID);
  }

  /** Returns true if field start_page is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_page() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_PAGE_ISSET_ID);
  }

  public void setStart_pageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_PAGE_ISSET_ID, value);
  }

  public long getNum_pages() {
    return this.num_pages;
  }

  public TMemoryData setNum_pages(long num_pages) {
    this.num_pages = num_pages;
    setNum_pagesIsSet(true);
    return this;
  }

  public void unsetNum_pages() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_PAGES_ISSET_ID);
  }

  /** Returns true if field num_pages is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_pages() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_PAGES_ISSET_ID);
  }

  public void setNum_pagesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_PAGES_ISSET_ID, value);
  }

  public int getTouch() {
    return this.touch;
  }

  public TMemoryData setTouch(int touch) {
    this.touch = touch;
    setTouchIsSet(true);
    return this;
  }

  public void unsetTouch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOUCH_ISSET_ID);
  }

  /** Returns true if field touch is set (has been assigned a value) and false otherwise */
  public boolean isSetTouch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOUCH_ISSET_ID);
  }

  public void setTouchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOUCH_ISSET_ID, value);
  }

  public int getChunk_keySize() {
    return (this.chunk_key == null) ? 0 : this.chunk_key.size();
  }

  public java.util.Iterator<java.lang.Long> getChunk_keyIterator() {
    return (this.chunk_key == null) ? null : this.chunk_key.iterator();
  }

  public void addToChunk_key(long elem) {
    if (this.chunk_key == null) {
      this.chunk_key = new java.util.ArrayList<java.lang.Long>();
    }
    this.chunk_key.add(elem);
  }

  public java.util.List<java.lang.Long> getChunk_key() {
    return this.chunk_key;
  }

  public TMemoryData setChunk_key(java.util.List<java.lang.Long> chunk_key) {
    this.chunk_key = chunk_key;
    return this;
  }

  public void unsetChunk_key() {
    this.chunk_key = null;
  }

  /** Returns true if field chunk_key is set (has been assigned a value) and false otherwise */
  public boolean isSetChunk_key() {
    return this.chunk_key != null;
  }

  public void setChunk_keyIsSet(boolean value) {
    if (!value) {
      this.chunk_key = null;
    }
  }

  public int getBuffer_epoch() {
    return this.buffer_epoch;
  }

  public TMemoryData setBuffer_epoch(int buffer_epoch) {
    this.buffer_epoch = buffer_epoch;
    setBuffer_epochIsSet(true);
    return this;
  }

  public void unsetBuffer_epoch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFER_EPOCH_ISSET_ID);
  }

  /** Returns true if field buffer_epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffer_epoch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFER_EPOCH_ISSET_ID);
  }

  public void setBuffer_epochIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFER_EPOCH_ISSET_ID, value);
  }

  public boolean isIs_free() {
    return this.is_free;
  }

  public TMemoryData setIs_free(boolean is_free) {
    this.is_free = is_free;
    setIs_freeIsSet(true);
    return this;
  }

  public void unsetIs_free() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_FREE_ISSET_ID);
  }

  /** Returns true if field is_free is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_free() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_FREE_ISSET_ID);
  }

  public void setIs_freeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_FREE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SLAB:
      if (value == null) {
        unsetSlab();
      } else {
        setSlab((java.lang.Long)value);
      }
      break;

    case START_PAGE:
      if (value == null) {
        unsetStart_page();
      } else {
        setStart_page((java.lang.Integer)value);
      }
      break;

    case NUM_PAGES:
      if (value == null) {
        unsetNum_pages();
      } else {
        setNum_pages((java.lang.Long)value);
      }
      break;

    case TOUCH:
      if (value == null) {
        unsetTouch();
      } else {
        setTouch((java.lang.Integer)value);
      }
      break;

    case CHUNK_KEY:
      if (value == null) {
        unsetChunk_key();
      } else {
        setChunk_key((java.util.List<java.lang.Long>)value);
      }
      break;

    case BUFFER_EPOCH:
      if (value == null) {
        unsetBuffer_epoch();
      } else {
        setBuffer_epoch((java.lang.Integer)value);
      }
      break;

    case IS_FREE:
      if (value == null) {
        unsetIs_free();
      } else {
        setIs_free((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SLAB:
      return getSlab();

    case START_PAGE:
      return getStart_page();

    case NUM_PAGES:
      return getNum_pages();

    case TOUCH:
      return getTouch();

    case CHUNK_KEY:
      return getChunk_key();

    case BUFFER_EPOCH:
      return getBuffer_epoch();

    case IS_FREE:
      return isIs_free();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SLAB:
      return isSetSlab();
    case START_PAGE:
      return isSetStart_page();
    case NUM_PAGES:
      return isSetNum_pages();
    case TOUCH:
      return isSetTouch();
    case CHUNK_KEY:
      return isSetChunk_key();
    case BUFFER_EPOCH:
      return isSetBuffer_epoch();
    case IS_FREE:
      return isSetIs_free();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TMemoryData)
      return this.equals((TMemoryData)that);
    return false;
  }

  public boolean equals(TMemoryData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_slab = true;
    boolean that_present_slab = true;
    if (this_present_slab || that_present_slab) {
      if (!(this_present_slab && that_present_slab))
        return false;
      if (this.slab != that.slab)
        return false;
    }

    boolean this_present_start_page = true;
    boolean that_present_start_page = true;
    if (this_present_start_page || that_present_start_page) {
      if (!(this_present_start_page && that_present_start_page))
        return false;
      if (this.start_page != that.start_page)
        return false;
    }

    boolean this_present_num_pages = true;
    boolean that_present_num_pages = true;
    if (this_present_num_pages || that_present_num_pages) {
      if (!(this_present_num_pages && that_present_num_pages))
        return false;
      if (this.num_pages != that.num_pages)
        return false;
    }

    boolean this_present_touch = true;
    boolean that_present_touch = true;
    if (this_present_touch || that_present_touch) {
      if (!(this_present_touch && that_present_touch))
        return false;
      if (this.touch != that.touch)
        return false;
    }

    boolean this_present_chunk_key = true && this.isSetChunk_key();
    boolean that_present_chunk_key = true && that.isSetChunk_key();
    if (this_present_chunk_key || that_present_chunk_key) {
      if (!(this_present_chunk_key && that_present_chunk_key))
        return false;
      if (!this.chunk_key.equals(that.chunk_key))
        return false;
    }

    boolean this_present_buffer_epoch = true;
    boolean that_present_buffer_epoch = true;
    if (this_present_buffer_epoch || that_present_buffer_epoch) {
      if (!(this_present_buffer_epoch && that_present_buffer_epoch))
        return false;
      if (this.buffer_epoch != that.buffer_epoch)
        return false;
    }

    boolean this_present_is_free = true;
    boolean that_present_is_free = true;
    if (this_present_is_free || that_present_is_free) {
      if (!(this_present_is_free && that_present_is_free))
        return false;
      if (this.is_free != that.is_free)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(slab);

    hashCode = hashCode * 8191 + start_page;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_pages);

    hashCode = hashCode * 8191 + touch;

    hashCode = hashCode * 8191 + ((isSetChunk_key()) ? 131071 : 524287);
    if (isSetChunk_key())
      hashCode = hashCode * 8191 + chunk_key.hashCode();

    hashCode = hashCode * 8191 + buffer_epoch;

    hashCode = hashCode * 8191 + ((is_free) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TMemoryData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSlab()).compareTo(other.isSetSlab());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlab()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slab, other.slab);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_page()).compareTo(other.isSetStart_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_page, other.start_page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_pages()).compareTo(other.isSetNum_pages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_pages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_pages, other.num_pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTouch()).compareTo(other.isSetTouch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTouch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.touch, other.touch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChunk_key()).compareTo(other.isSetChunk_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunk_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunk_key, other.chunk_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuffer_epoch()).compareTo(other.isSetBuffer_epoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffer_epoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer_epoch, other.buffer_epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_free()).compareTo(other.isSetIs_free());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_free()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_free, other.is_free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMemoryData(");
    boolean first = true;

    sb.append("slab:");
    sb.append(this.slab);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_page:");
    sb.append(this.start_page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_pages:");
    sb.append(this.num_pages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("touch:");
    sb.append(this.touch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunk_key:");
    if (this.chunk_key == null) {
      sb.append("null");
    } else {
      sb.append(this.chunk_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buffer_epoch:");
    sb.append(this.buffer_epoch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_free:");
    sb.append(this.is_free);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMemoryDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMemoryDataStandardScheme getScheme() {
      return new TMemoryDataStandardScheme();
    }
  }

  private static class TMemoryDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMemoryData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMemoryData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLAB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.slab = iprot.readI64();
              struct.setSlabIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start_page = iprot.readI32();
              struct.setStart_pageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_pages = iprot.readI64();
              struct.setNum_pagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOUCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.touch = iprot.readI32();
              struct.setTouchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHUNK_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.chunk_key = new java.util.ArrayList<java.lang.Long>(_list128.size);
                long _elem129;
                for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                {
                  _elem129 = iprot.readI64();
                  struct.chunk_key.add(_elem129);
                }
                iprot.readListEnd();
              }
              struct.setChunk_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUFFER_EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buffer_epoch = iprot.readI32();
              struct.setBuffer_epochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_free = iprot.readBool();
              struct.setIs_freeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMemoryData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SLAB_FIELD_DESC);
      oprot.writeI64(struct.slab);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_PAGE_FIELD_DESC);
      oprot.writeI32(struct.start_page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_PAGES_FIELD_DESC);
      oprot.writeI64(struct.num_pages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOUCH_FIELD_DESC);
      oprot.writeI32(struct.touch);
      oprot.writeFieldEnd();
      if (struct.chunk_key != null) {
        oprot.writeFieldBegin(CHUNK_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.chunk_key.size()));
          for (long _iter131 : struct.chunk_key)
          {
            oprot.writeI64(_iter131);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUFFER_EPOCH_FIELD_DESC);
      oprot.writeI32(struct.buffer_epoch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FREE_FIELD_DESC);
      oprot.writeBool(struct.is_free);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMemoryDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMemoryDataTupleScheme getScheme() {
      return new TMemoryDataTupleScheme();
    }
  }

  private static class TMemoryDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMemoryData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMemoryData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSlab()) {
        optionals.set(0);
      }
      if (struct.isSetStart_page()) {
        optionals.set(1);
      }
      if (struct.isSetNum_pages()) {
        optionals.set(2);
      }
      if (struct.isSetTouch()) {
        optionals.set(3);
      }
      if (struct.isSetChunk_key()) {
        optionals.set(4);
      }
      if (struct.isSetBuffer_epoch()) {
        optionals.set(5);
      }
      if (struct.isSetIs_free()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSlab()) {
        oprot.writeI64(struct.slab);
      }
      if (struct.isSetStart_page()) {
        oprot.writeI32(struct.start_page);
      }
      if (struct.isSetNum_pages()) {
        oprot.writeI64(struct.num_pages);
      }
      if (struct.isSetTouch()) {
        oprot.writeI32(struct.touch);
      }
      if (struct.isSetChunk_key()) {
        {
          oprot.writeI32(struct.chunk_key.size());
          for (long _iter132 : struct.chunk_key)
          {
            oprot.writeI64(_iter132);
          }
        }
      }
      if (struct.isSetBuffer_epoch()) {
        oprot.writeI32(struct.buffer_epoch);
      }
      if (struct.isSetIs_free()) {
        oprot.writeBool(struct.is_free);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMemoryData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.slab = iprot.readI64();
        struct.setSlabIsSet(true);
      }
      if (incoming.get(1)) {
        struct.start_page = iprot.readI32();
        struct.setStart_pageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_pages = iprot.readI64();
        struct.setNum_pagesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.touch = iprot.readI32();
        struct.setTouchIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.chunk_key = new java.util.ArrayList<java.lang.Long>(_list133.size);
          long _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = iprot.readI64();
            struct.chunk_key.add(_elem134);
          }
        }
        struct.setChunk_keyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.buffer_epoch = iprot.readI32();
        struct.setBuffer_epochIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_free = iprot.readBool();
        struct.setIs_freeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

