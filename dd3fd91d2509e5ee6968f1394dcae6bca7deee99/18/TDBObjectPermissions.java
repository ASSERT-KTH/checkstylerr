/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDBObjectPermissions extends org.apache.thrift.TUnion<TDBObjectPermissions, TDBObjectPermissions._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDBObjectPermissions");
  private static final org.apache.thrift.protocol.TField DATABASE_PERMISSIONS__FIELD_DESC = new org.apache.thrift.protocol.TField("database_permissions_", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_PERMISSIONS__FIELD_DESC = new org.apache.thrift.protocol.TField("table_permissions_", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DASHBOARD_PERMISSIONS__FIELD_DESC = new org.apache.thrift.protocol.TField("dashboard_permissions_", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField VIEW_PERMISSIONS__FIELD_DESC = new org.apache.thrift.protocol.TField("view_permissions_", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATABASE_PERMISSIONS_((short)1, "database_permissions_"),
    TABLE_PERMISSIONS_((short)2, "table_permissions_"),
    DASHBOARD_PERMISSIONS_((short)3, "dashboard_permissions_"),
    VIEW_PERMISSIONS_((short)4, "view_permissions_");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATABASE_PERMISSIONS_
          return DATABASE_PERMISSIONS_;
        case 2: // TABLE_PERMISSIONS_
          return TABLE_PERMISSIONS_;
        case 3: // DASHBOARD_PERMISSIONS_
          return DASHBOARD_PERMISSIONS_;
        case 4: // VIEW_PERMISSIONS_
          return VIEW_PERMISSIONS_;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATABASE_PERMISSIONS_, new org.apache.thrift.meta_data.FieldMetaData("database_permissions_", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDatabasePermissions.class)));
    tmpMap.put(_Fields.TABLE_PERMISSIONS_, new org.apache.thrift.meta_data.FieldMetaData("table_permissions_", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTablePermissions.class)));
    tmpMap.put(_Fields.DASHBOARD_PERMISSIONS_, new org.apache.thrift.meta_data.FieldMetaData("dashboard_permissions_", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDashboardPermissions.class)));
    tmpMap.put(_Fields.VIEW_PERMISSIONS_, new org.apache.thrift.meta_data.FieldMetaData("view_permissions_", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TViewPermissions.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDBObjectPermissions.class, metaDataMap);
  }

  public TDBObjectPermissions() {
    super();
  }

  public TDBObjectPermissions(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDBObjectPermissions(TDBObjectPermissions other) {
    super(other);
  }
  public TDBObjectPermissions deepCopy() {
    return new TDBObjectPermissions(this);
  }

  public static TDBObjectPermissions database_permissions_(TDatabasePermissions value) {
    TDBObjectPermissions x = new TDBObjectPermissions();
    x.setDatabase_permissions_(value);
    return x;
  }

  public static TDBObjectPermissions table_permissions_(TTablePermissions value) {
    TDBObjectPermissions x = new TDBObjectPermissions();
    x.setTable_permissions_(value);
    return x;
  }

  public static TDBObjectPermissions dashboard_permissions_(TDashboardPermissions value) {
    TDBObjectPermissions x = new TDBObjectPermissions();
    x.setDashboard_permissions_(value);
    return x;
  }

  public static TDBObjectPermissions view_permissions_(TViewPermissions value) {
    TDBObjectPermissions x = new TDBObjectPermissions();
    x.setView_permissions_(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case DATABASE_PERMISSIONS_:
        if (value instanceof TDatabasePermissions) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDatabasePermissions for field 'database_permissions_', but got " + value.getClass().getSimpleName());
      case TABLE_PERMISSIONS_:
        if (value instanceof TTablePermissions) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TTablePermissions for field 'table_permissions_', but got " + value.getClass().getSimpleName());
      case DASHBOARD_PERMISSIONS_:
        if (value instanceof TDashboardPermissions) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDashboardPermissions for field 'dashboard_permissions_', but got " + value.getClass().getSimpleName());
      case VIEW_PERMISSIONS_:
        if (value instanceof TViewPermissions) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TViewPermissions for field 'view_permissions_', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case DATABASE_PERMISSIONS_:
          if (field.type == DATABASE_PERMISSIONS__FIELD_DESC.type) {
            TDatabasePermissions database_permissions_;
            database_permissions_ = new TDatabasePermissions();
            database_permissions_.read(iprot);
            return database_permissions_;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TABLE_PERMISSIONS_:
          if (field.type == TABLE_PERMISSIONS__FIELD_DESC.type) {
            TTablePermissions table_permissions_;
            table_permissions_ = new TTablePermissions();
            table_permissions_.read(iprot);
            return table_permissions_;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DASHBOARD_PERMISSIONS_:
          if (field.type == DASHBOARD_PERMISSIONS__FIELD_DESC.type) {
            TDashboardPermissions dashboard_permissions_;
            dashboard_permissions_ = new TDashboardPermissions();
            dashboard_permissions_.read(iprot);
            return dashboard_permissions_;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case VIEW_PERMISSIONS_:
          if (field.type == VIEW_PERMISSIONS__FIELD_DESC.type) {
            TViewPermissions view_permissions_;
            view_permissions_ = new TViewPermissions();
            view_permissions_.read(iprot);
            return view_permissions_;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DATABASE_PERMISSIONS_:
        TDatabasePermissions database_permissions_ = (TDatabasePermissions)value_;
        database_permissions_.write(oprot);
        return;
      case TABLE_PERMISSIONS_:
        TTablePermissions table_permissions_ = (TTablePermissions)value_;
        table_permissions_.write(oprot);
        return;
      case DASHBOARD_PERMISSIONS_:
        TDashboardPermissions dashboard_permissions_ = (TDashboardPermissions)value_;
        dashboard_permissions_.write(oprot);
        return;
      case VIEW_PERMISSIONS_:
        TViewPermissions view_permissions_ = (TViewPermissions)value_;
        view_permissions_.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case DATABASE_PERMISSIONS_:
          TDatabasePermissions database_permissions_;
          database_permissions_ = new TDatabasePermissions();
          database_permissions_.read(iprot);
          return database_permissions_;
        case TABLE_PERMISSIONS_:
          TTablePermissions table_permissions_;
          table_permissions_ = new TTablePermissions();
          table_permissions_.read(iprot);
          return table_permissions_;
        case DASHBOARD_PERMISSIONS_:
          TDashboardPermissions dashboard_permissions_;
          dashboard_permissions_ = new TDashboardPermissions();
          dashboard_permissions_.read(iprot);
          return dashboard_permissions_;
        case VIEW_PERMISSIONS_:
          TViewPermissions view_permissions_;
          view_permissions_ = new TViewPermissions();
          view_permissions_.read(iprot);
          return view_permissions_;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DATABASE_PERMISSIONS_:
        TDatabasePermissions database_permissions_ = (TDatabasePermissions)value_;
        database_permissions_.write(oprot);
        return;
      case TABLE_PERMISSIONS_:
        TTablePermissions table_permissions_ = (TTablePermissions)value_;
        table_permissions_.write(oprot);
        return;
      case DASHBOARD_PERMISSIONS_:
        TDashboardPermissions dashboard_permissions_ = (TDashboardPermissions)value_;
        dashboard_permissions_.write(oprot);
        return;
      case VIEW_PERMISSIONS_:
        TViewPermissions view_permissions_ = (TViewPermissions)value_;
        view_permissions_.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case DATABASE_PERMISSIONS_:
        return DATABASE_PERMISSIONS__FIELD_DESC;
      case TABLE_PERMISSIONS_:
        return TABLE_PERMISSIONS__FIELD_DESC;
      case DASHBOARD_PERMISSIONS_:
        return DASHBOARD_PERMISSIONS__FIELD_DESC;
      case VIEW_PERMISSIONS_:
        return VIEW_PERMISSIONS__FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDatabasePermissions getDatabase_permissions_() {
    if (getSetField() == _Fields.DATABASE_PERMISSIONS_) {
      return (TDatabasePermissions)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'database_permissions_' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDatabase_permissions_(TDatabasePermissions value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DATABASE_PERMISSIONS_;
    value_ = value;
  }

  public TTablePermissions getTable_permissions_() {
    if (getSetField() == _Fields.TABLE_PERMISSIONS_) {
      return (TTablePermissions)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'table_permissions_' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTable_permissions_(TTablePermissions value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TABLE_PERMISSIONS_;
    value_ = value;
  }

  public TDashboardPermissions getDashboard_permissions_() {
    if (getSetField() == _Fields.DASHBOARD_PERMISSIONS_) {
      return (TDashboardPermissions)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'dashboard_permissions_' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDashboard_permissions_(TDashboardPermissions value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DASHBOARD_PERMISSIONS_;
    value_ = value;
  }

  public TViewPermissions getView_permissions_() {
    if (getSetField() == _Fields.VIEW_PERMISSIONS_) {
      return (TViewPermissions)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'view_permissions_' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setView_permissions_(TViewPermissions value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.VIEW_PERMISSIONS_;
    value_ = value;
  }

  public boolean isSetDatabase_permissions_() {
    return setField_ == _Fields.DATABASE_PERMISSIONS_;
  }


  public boolean isSetTable_permissions_() {
    return setField_ == _Fields.TABLE_PERMISSIONS_;
  }


  public boolean isSetDashboard_permissions_() {
    return setField_ == _Fields.DASHBOARD_PERMISSIONS_;
  }


  public boolean isSetView_permissions_() {
    return setField_ == _Fields.VIEW_PERMISSIONS_;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDBObjectPermissions) {
      return equals((TDBObjectPermissions)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDBObjectPermissions other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDBObjectPermissions other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
