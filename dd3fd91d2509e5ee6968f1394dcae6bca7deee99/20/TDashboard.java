/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TDashboard implements org.apache.thrift.TBase<TDashboard, TDashboard._Fields>, java.io.Serializable, Cloneable, Comparable<TDashboard> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDashboard");

  private static final org.apache.thrift.protocol.TField DASHBOARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dashboard_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DASHBOARD_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dashboard_state", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("image_hash", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DASHBOARD_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("dashboard_metadata", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DASHBOARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dashboard_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DASHBOARD_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("dashboard_owner", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_DASH_SHARED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_dash_shared", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDashboardStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDashboardTupleSchemeFactory();

  public java.lang.String dashboard_name; // required
  public java.lang.String dashboard_state; // required
  public java.lang.String image_hash; // required
  public java.lang.String update_time; // required
  public java.lang.String dashboard_metadata; // required
  public int dashboard_id; // required
  public java.lang.String dashboard_owner; // required
  public boolean is_dash_shared; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DASHBOARD_NAME((short)1, "dashboard_name"),
    DASHBOARD_STATE((short)2, "dashboard_state"),
    IMAGE_HASH((short)3, "image_hash"),
    UPDATE_TIME((short)4, "update_time"),
    DASHBOARD_METADATA((short)5, "dashboard_metadata"),
    DASHBOARD_ID((short)6, "dashboard_id"),
    DASHBOARD_OWNER((short)7, "dashboard_owner"),
    IS_DASH_SHARED((short)8, "is_dash_shared");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DASHBOARD_NAME
          return DASHBOARD_NAME;
        case 2: // DASHBOARD_STATE
          return DASHBOARD_STATE;
        case 3: // IMAGE_HASH
          return IMAGE_HASH;
        case 4: // UPDATE_TIME
          return UPDATE_TIME;
        case 5: // DASHBOARD_METADATA
          return DASHBOARD_METADATA;
        case 6: // DASHBOARD_ID
          return DASHBOARD_ID;
        case 7: // DASHBOARD_OWNER
          return DASHBOARD_OWNER;
        case 8: // IS_DASH_SHARED
          return IS_DASH_SHARED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DASHBOARD_ID_ISSET_ID = 0;
  private static final int __IS_DASH_SHARED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DASHBOARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("dashboard_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DASHBOARD_STATE, new org.apache.thrift.meta_data.FieldMetaData("dashboard_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_HASH, new org.apache.thrift.meta_data.FieldMetaData("image_hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DASHBOARD_METADATA, new org.apache.thrift.meta_data.FieldMetaData("dashboard_metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DASHBOARD_ID, new org.apache.thrift.meta_data.FieldMetaData("dashboard_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DASHBOARD_OWNER, new org.apache.thrift.meta_data.FieldMetaData("dashboard_owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DASH_SHARED, new org.apache.thrift.meta_data.FieldMetaData("is_dash_shared", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDashboard.class, metaDataMap);
  }

  public TDashboard() {
  }

  public TDashboard(
    java.lang.String dashboard_name,
    java.lang.String dashboard_state,
    java.lang.String image_hash,
    java.lang.String update_time,
    java.lang.String dashboard_metadata,
    int dashboard_id,
    java.lang.String dashboard_owner,
    boolean is_dash_shared)
  {
    this();
    this.dashboard_name = dashboard_name;
    this.dashboard_state = dashboard_state;
    this.image_hash = image_hash;
    this.update_time = update_time;
    this.dashboard_metadata = dashboard_metadata;
    this.dashboard_id = dashboard_id;
    setDashboard_idIsSet(true);
    this.dashboard_owner = dashboard_owner;
    this.is_dash_shared = is_dash_shared;
    setIs_dash_sharedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDashboard(TDashboard other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDashboard_name()) {
      this.dashboard_name = other.dashboard_name;
    }
    if (other.isSetDashboard_state()) {
      this.dashboard_state = other.dashboard_state;
    }
    if (other.isSetImage_hash()) {
      this.image_hash = other.image_hash;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
    if (other.isSetDashboard_metadata()) {
      this.dashboard_metadata = other.dashboard_metadata;
    }
    this.dashboard_id = other.dashboard_id;
    if (other.isSetDashboard_owner()) {
      this.dashboard_owner = other.dashboard_owner;
    }
    this.is_dash_shared = other.is_dash_shared;
  }

  public TDashboard deepCopy() {
    return new TDashboard(this);
  }

  @Override
  public void clear() {
    this.dashboard_name = null;
    this.dashboard_state = null;
    this.image_hash = null;
    this.update_time = null;
    this.dashboard_metadata = null;
    setDashboard_idIsSet(false);
    this.dashboard_id = 0;
    this.dashboard_owner = null;
    setIs_dash_sharedIsSet(false);
    this.is_dash_shared = false;
  }

  public java.lang.String getDashboard_name() {
    return this.dashboard_name;
  }

  public TDashboard setDashboard_name(java.lang.String dashboard_name) {
    this.dashboard_name = dashboard_name;
    return this;
  }

  public void unsetDashboard_name() {
    this.dashboard_name = null;
  }

  /** Returns true if field dashboard_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDashboard_name() {
    return this.dashboard_name != null;
  }

  public void setDashboard_nameIsSet(boolean value) {
    if (!value) {
      this.dashboard_name = null;
    }
  }

  public java.lang.String getDashboard_state() {
    return this.dashboard_state;
  }

  public TDashboard setDashboard_state(java.lang.String dashboard_state) {
    this.dashboard_state = dashboard_state;
    return this;
  }

  public void unsetDashboard_state() {
    this.dashboard_state = null;
  }

  /** Returns true if field dashboard_state is set (has been assigned a value) and false otherwise */
  public boolean isSetDashboard_state() {
    return this.dashboard_state != null;
  }

  public void setDashboard_stateIsSet(boolean value) {
    if (!value) {
      this.dashboard_state = null;
    }
  }

  public java.lang.String getImage_hash() {
    return this.image_hash;
  }

  public TDashboard setImage_hash(java.lang.String image_hash) {
    this.image_hash = image_hash;
    return this;
  }

  public void unsetImage_hash() {
    this.image_hash = null;
  }

  /** Returns true if field image_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetImage_hash() {
    return this.image_hash != null;
  }

  public void setImage_hashIsSet(boolean value) {
    if (!value) {
      this.image_hash = null;
    }
  }

  public java.lang.String getUpdate_time() {
    return this.update_time;
  }

  public TDashboard setUpdate_time(java.lang.String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public java.lang.String getDashboard_metadata() {
    return this.dashboard_metadata;
  }

  public TDashboard setDashboard_metadata(java.lang.String dashboard_metadata) {
    this.dashboard_metadata = dashboard_metadata;
    return this;
  }

  public void unsetDashboard_metadata() {
    this.dashboard_metadata = null;
  }

  /** Returns true if field dashboard_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetDashboard_metadata() {
    return this.dashboard_metadata != null;
  }

  public void setDashboard_metadataIsSet(boolean value) {
    if (!value) {
      this.dashboard_metadata = null;
    }
  }

  public int getDashboard_id() {
    return this.dashboard_id;
  }

  public TDashboard setDashboard_id(int dashboard_id) {
    this.dashboard_id = dashboard_id;
    setDashboard_idIsSet(true);
    return this;
  }

  public void unsetDashboard_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DASHBOARD_ID_ISSET_ID);
  }

  /** Returns true if field dashboard_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDashboard_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DASHBOARD_ID_ISSET_ID);
  }

  public void setDashboard_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DASHBOARD_ID_ISSET_ID, value);
  }

  public java.lang.String getDashboard_owner() {
    return this.dashboard_owner;
  }

  public TDashboard setDashboard_owner(java.lang.String dashboard_owner) {
    this.dashboard_owner = dashboard_owner;
    return this;
  }

  public void unsetDashboard_owner() {
    this.dashboard_owner = null;
  }

  /** Returns true if field dashboard_owner is set (has been assigned a value) and false otherwise */
  public boolean isSetDashboard_owner() {
    return this.dashboard_owner != null;
  }

  public void setDashboard_ownerIsSet(boolean value) {
    if (!value) {
      this.dashboard_owner = null;
    }
  }

  public boolean isIs_dash_shared() {
    return this.is_dash_shared;
  }

  public TDashboard setIs_dash_shared(boolean is_dash_shared) {
    this.is_dash_shared = is_dash_shared;
    setIs_dash_sharedIsSet(true);
    return this;
  }

  public void unsetIs_dash_shared() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_DASH_SHARED_ISSET_ID);
  }

  /** Returns true if field is_dash_shared is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_dash_shared() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_DASH_SHARED_ISSET_ID);
  }

  public void setIs_dash_sharedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_DASH_SHARED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DASHBOARD_NAME:
      if (value == null) {
        unsetDashboard_name();
      } else {
        setDashboard_name((java.lang.String)value);
      }
      break;

    case DASHBOARD_STATE:
      if (value == null) {
        unsetDashboard_state();
      } else {
        setDashboard_state((java.lang.String)value);
      }
      break;

    case IMAGE_HASH:
      if (value == null) {
        unsetImage_hash();
      } else {
        setImage_hash((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((java.lang.String)value);
      }
      break;

    case DASHBOARD_METADATA:
      if (value == null) {
        unsetDashboard_metadata();
      } else {
        setDashboard_metadata((java.lang.String)value);
      }
      break;

    case DASHBOARD_ID:
      if (value == null) {
        unsetDashboard_id();
      } else {
        setDashboard_id((java.lang.Integer)value);
      }
      break;

    case DASHBOARD_OWNER:
      if (value == null) {
        unsetDashboard_owner();
      } else {
        setDashboard_owner((java.lang.String)value);
      }
      break;

    case IS_DASH_SHARED:
      if (value == null) {
        unsetIs_dash_shared();
      } else {
        setIs_dash_shared((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DASHBOARD_NAME:
      return getDashboard_name();

    case DASHBOARD_STATE:
      return getDashboard_state();

    case IMAGE_HASH:
      return getImage_hash();

    case UPDATE_TIME:
      return getUpdate_time();

    case DASHBOARD_METADATA:
      return getDashboard_metadata();

    case DASHBOARD_ID:
      return getDashboard_id();

    case DASHBOARD_OWNER:
      return getDashboard_owner();

    case IS_DASH_SHARED:
      return isIs_dash_shared();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DASHBOARD_NAME:
      return isSetDashboard_name();
    case DASHBOARD_STATE:
      return isSetDashboard_state();
    case IMAGE_HASH:
      return isSetImage_hash();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case DASHBOARD_METADATA:
      return isSetDashboard_metadata();
    case DASHBOARD_ID:
      return isSetDashboard_id();
    case DASHBOARD_OWNER:
      return isSetDashboard_owner();
    case IS_DASH_SHARED:
      return isSetIs_dash_shared();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDashboard)
      return this.equals((TDashboard)that);
    return false;
  }

  public boolean equals(TDashboard that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dashboard_name = true && this.isSetDashboard_name();
    boolean that_present_dashboard_name = true && that.isSetDashboard_name();
    if (this_present_dashboard_name || that_present_dashboard_name) {
      if (!(this_present_dashboard_name && that_present_dashboard_name))
        return false;
      if (!this.dashboard_name.equals(that.dashboard_name))
        return false;
    }

    boolean this_present_dashboard_state = true && this.isSetDashboard_state();
    boolean that_present_dashboard_state = true && that.isSetDashboard_state();
    if (this_present_dashboard_state || that_present_dashboard_state) {
      if (!(this_present_dashboard_state && that_present_dashboard_state))
        return false;
      if (!this.dashboard_state.equals(that.dashboard_state))
        return false;
    }

    boolean this_present_image_hash = true && this.isSetImage_hash();
    boolean that_present_image_hash = true && that.isSetImage_hash();
    if (this_present_image_hash || that_present_image_hash) {
      if (!(this_present_image_hash && that_present_image_hash))
        return false;
      if (!this.image_hash.equals(that.image_hash))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_dashboard_metadata = true && this.isSetDashboard_metadata();
    boolean that_present_dashboard_metadata = true && that.isSetDashboard_metadata();
    if (this_present_dashboard_metadata || that_present_dashboard_metadata) {
      if (!(this_present_dashboard_metadata && that_present_dashboard_metadata))
        return false;
      if (!this.dashboard_metadata.equals(that.dashboard_metadata))
        return false;
    }

    boolean this_present_dashboard_id = true;
    boolean that_present_dashboard_id = true;
    if (this_present_dashboard_id || that_present_dashboard_id) {
      if (!(this_present_dashboard_id && that_present_dashboard_id))
        return false;
      if (this.dashboard_id != that.dashboard_id)
        return false;
    }

    boolean this_present_dashboard_owner = true && this.isSetDashboard_owner();
    boolean that_present_dashboard_owner = true && that.isSetDashboard_owner();
    if (this_present_dashboard_owner || that_present_dashboard_owner) {
      if (!(this_present_dashboard_owner && that_present_dashboard_owner))
        return false;
      if (!this.dashboard_owner.equals(that.dashboard_owner))
        return false;
    }

    boolean this_present_is_dash_shared = true;
    boolean that_present_is_dash_shared = true;
    if (this_present_is_dash_shared || that_present_is_dash_shared) {
      if (!(this_present_is_dash_shared && that_present_is_dash_shared))
        return false;
      if (this.is_dash_shared != that.is_dash_shared)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDashboard_name()) ? 131071 : 524287);
    if (isSetDashboard_name())
      hashCode = hashCode * 8191 + dashboard_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDashboard_state()) ? 131071 : 524287);
    if (isSetDashboard_state())
      hashCode = hashCode * 8191 + dashboard_state.hashCode();

    hashCode = hashCode * 8191 + ((isSetImage_hash()) ? 131071 : 524287);
    if (isSetImage_hash())
      hashCode = hashCode * 8191 + image_hash.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + update_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetDashboard_metadata()) ? 131071 : 524287);
    if (isSetDashboard_metadata())
      hashCode = hashCode * 8191 + dashboard_metadata.hashCode();

    hashCode = hashCode * 8191 + dashboard_id;

    hashCode = hashCode * 8191 + ((isSetDashboard_owner()) ? 131071 : 524287);
    if (isSetDashboard_owner())
      hashCode = hashCode * 8191 + dashboard_owner.hashCode();

    hashCode = hashCode * 8191 + ((is_dash_shared) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TDashboard other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDashboard_name()).compareTo(other.isSetDashboard_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDashboard_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dashboard_name, other.dashboard_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDashboard_state()).compareTo(other.isSetDashboard_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDashboard_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dashboard_state, other.dashboard_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImage_hash()).compareTo(other.isSetImage_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_hash, other.image_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDashboard_metadata()).compareTo(other.isSetDashboard_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDashboard_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dashboard_metadata, other.dashboard_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDashboard_id()).compareTo(other.isSetDashboard_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDashboard_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dashboard_id, other.dashboard_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDashboard_owner()).compareTo(other.isSetDashboard_owner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDashboard_owner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dashboard_owner, other.dashboard_owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_dash_shared()).compareTo(other.isSetIs_dash_shared());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_dash_shared()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_dash_shared, other.is_dash_shared);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDashboard(");
    boolean first = true;

    sb.append("dashboard_name:");
    if (this.dashboard_name == null) {
      sb.append("null");
    } else {
      sb.append(this.dashboard_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dashboard_state:");
    if (this.dashboard_state == null) {
      sb.append("null");
    } else {
      sb.append(this.dashboard_state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image_hash:");
    if (this.image_hash == null) {
      sb.append("null");
    } else {
      sb.append(this.image_hash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    if (this.update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.update_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dashboard_metadata:");
    if (this.dashboard_metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.dashboard_metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dashboard_id:");
    sb.append(this.dashboard_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dashboard_owner:");
    if (this.dashboard_owner == null) {
      sb.append("null");
    } else {
      sb.append(this.dashboard_owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_dash_shared:");
    sb.append(this.is_dash_shared);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDashboardStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDashboardStandardScheme getScheme() {
      return new TDashboardStandardScheme();
    }
  }

  private static class TDashboardStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDashboard> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDashboard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DASHBOARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dashboard_name = iprot.readString();
              struct.setDashboard_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DASHBOARD_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dashboard_state = iprot.readString();
              struct.setDashboard_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image_hash = iprot.readString();
              struct.setImage_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DASHBOARD_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dashboard_metadata = iprot.readString();
              struct.setDashboard_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DASHBOARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dashboard_id = iprot.readI32();
              struct.setDashboard_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DASHBOARD_OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dashboard_owner = iprot.readString();
              struct.setDashboard_ownerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_DASH_SHARED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_dash_shared = iprot.readBool();
              struct.setIs_dash_sharedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDashboard struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dashboard_name != null) {
        oprot.writeFieldBegin(DASHBOARD_NAME_FIELD_DESC);
        oprot.writeString(struct.dashboard_name);
        oprot.writeFieldEnd();
      }
      if (struct.dashboard_state != null) {
        oprot.writeFieldBegin(DASHBOARD_STATE_FIELD_DESC);
        oprot.writeString(struct.dashboard_state);
        oprot.writeFieldEnd();
      }
      if (struct.image_hash != null) {
        oprot.writeFieldBegin(IMAGE_HASH_FIELD_DESC);
        oprot.writeString(struct.image_hash);
        oprot.writeFieldEnd();
      }
      if (struct.update_time != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.update_time);
        oprot.writeFieldEnd();
      }
      if (struct.dashboard_metadata != null) {
        oprot.writeFieldBegin(DASHBOARD_METADATA_FIELD_DESC);
        oprot.writeString(struct.dashboard_metadata);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DASHBOARD_ID_FIELD_DESC);
      oprot.writeI32(struct.dashboard_id);
      oprot.writeFieldEnd();
      if (struct.dashboard_owner != null) {
        oprot.writeFieldBegin(DASHBOARD_OWNER_FIELD_DESC);
        oprot.writeString(struct.dashboard_owner);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_DASH_SHARED_FIELD_DESC);
      oprot.writeBool(struct.is_dash_shared);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDashboardTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDashboardTupleScheme getScheme() {
      return new TDashboardTupleScheme();
    }
  }

  private static class TDashboardTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDashboard> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDashboard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDashboard_name()) {
        optionals.set(0);
      }
      if (struct.isSetDashboard_state()) {
        optionals.set(1);
      }
      if (struct.isSetImage_hash()) {
        optionals.set(2);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(3);
      }
      if (struct.isSetDashboard_metadata()) {
        optionals.set(4);
      }
      if (struct.isSetDashboard_id()) {
        optionals.set(5);
      }
      if (struct.isSetDashboard_owner()) {
        optionals.set(6);
      }
      if (struct.isSetIs_dash_shared()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDashboard_name()) {
        oprot.writeString(struct.dashboard_name);
      }
      if (struct.isSetDashboard_state()) {
        oprot.writeString(struct.dashboard_state);
      }
      if (struct.isSetImage_hash()) {
        oprot.writeString(struct.image_hash);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
      if (struct.isSetDashboard_metadata()) {
        oprot.writeString(struct.dashboard_metadata);
      }
      if (struct.isSetDashboard_id()) {
        oprot.writeI32(struct.dashboard_id);
      }
      if (struct.isSetDashboard_owner()) {
        oprot.writeString(struct.dashboard_owner);
      }
      if (struct.isSetIs_dash_shared()) {
        oprot.writeBool(struct.is_dash_shared);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDashboard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.dashboard_name = iprot.readString();
        struct.setDashboard_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dashboard_state = iprot.readString();
        struct.setDashboard_stateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.image_hash = iprot.readString();
        struct.setImage_hashIsSet(true);
      }
      if (incoming.get(3)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dashboard_metadata = iprot.readString();
        struct.setDashboard_metadataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dashboard_id = iprot.readI32();
        struct.setDashboard_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dashboard_owner = iprot.readString();
        struct.setDashboard_ownerIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_dash_shared = iprot.readBool();
        struct.setIs_dash_sharedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

