/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TRenderResult implements org.apache.thrift.TBase<TRenderResult, TRenderResult._Fields>, java.io.Serializable, Cloneable, Comparable<TRenderResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRenderResult");

  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("nonce", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_time_ms", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RENDER_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("render_time_ms", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_time_ms", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField VEGA_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("vega_metadata", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRenderResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRenderResultTupleSchemeFactory();

  public java.nio.ByteBuffer image; // required
  public java.lang.String nonce; // required
  public long execution_time_ms; // required
  public long render_time_ms; // required
  public long total_time_ms; // required
  public java.lang.String vega_metadata; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMAGE((short)1, "image"),
    NONCE((short)2, "nonce"),
    EXECUTION_TIME_MS((short)3, "execution_time_ms"),
    RENDER_TIME_MS((short)4, "render_time_ms"),
    TOTAL_TIME_MS((short)5, "total_time_ms"),
    VEGA_METADATA((short)6, "vega_metadata");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMAGE
          return IMAGE;
        case 2: // NONCE
          return NONCE;
        case 3: // EXECUTION_TIME_MS
          return EXECUTION_TIME_MS;
        case 4: // RENDER_TIME_MS
          return RENDER_TIME_MS;
        case 5: // TOTAL_TIME_MS
          return TOTAL_TIME_MS;
        case 6: // VEGA_METADATA
          return VEGA_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTION_TIME_MS_ISSET_ID = 0;
  private static final int __RENDER_TIME_MS_ISSET_ID = 1;
  private static final int __TOTAL_TIME_MS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NONCE, new org.apache.thrift.meta_data.FieldMetaData("nonce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("execution_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RENDER_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("render_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("total_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VEGA_METADATA, new org.apache.thrift.meta_data.FieldMetaData("vega_metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRenderResult.class, metaDataMap);
  }

  public TRenderResult() {
  }

  public TRenderResult(
    java.nio.ByteBuffer image,
    java.lang.String nonce,
    long execution_time_ms,
    long render_time_ms,
    long total_time_ms,
    java.lang.String vega_metadata)
  {
    this();
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    this.nonce = nonce;
    this.execution_time_ms = execution_time_ms;
    setExecution_time_msIsSet(true);
    this.render_time_ms = render_time_ms;
    setRender_time_msIsSet(true);
    this.total_time_ms = total_time_ms;
    setTotal_time_msIsSet(true);
    this.vega_metadata = vega_metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRenderResult(TRenderResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImage()) {
      this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
    }
    if (other.isSetNonce()) {
      this.nonce = other.nonce;
    }
    this.execution_time_ms = other.execution_time_ms;
    this.render_time_ms = other.render_time_ms;
    this.total_time_ms = other.total_time_ms;
    if (other.isSetVega_metadata()) {
      this.vega_metadata = other.vega_metadata;
    }
  }

  public TRenderResult deepCopy() {
    return new TRenderResult(this);
  }

  @Override
  public void clear() {
    this.image = null;
    this.nonce = null;
    setExecution_time_msIsSet(false);
    this.execution_time_ms = 0;
    setRender_time_msIsSet(false);
    this.render_time_ms = 0;
    setTotal_time_msIsSet(false);
    this.total_time_ms = 0;
    this.vega_metadata = null;
  }

  public byte[] getImage() {
    setImage(org.apache.thrift.TBaseHelper.rightSize(image));
    return image == null ? null : image.array();
  }

  public java.nio.ByteBuffer bufferForImage() {
    return org.apache.thrift.TBaseHelper.copyBinary(image);
  }

  public TRenderResult setImage(byte[] image) {
    this.image = image == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(image.clone());
    return this;
  }

  public TRenderResult setImage(java.nio.ByteBuffer image) {
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public java.lang.String getNonce() {
    return this.nonce;
  }

  public TRenderResult setNonce(java.lang.String nonce) {
    this.nonce = nonce;
    return this;
  }

  public void unsetNonce() {
    this.nonce = null;
  }

  /** Returns true if field nonce is set (has been assigned a value) and false otherwise */
  public boolean isSetNonce() {
    return this.nonce != null;
  }

  public void setNonceIsSet(boolean value) {
    if (!value) {
      this.nonce = null;
    }
  }

  public long getExecution_time_ms() {
    return this.execution_time_ms;
  }

  public TRenderResult setExecution_time_ms(long execution_time_ms) {
    this.execution_time_ms = execution_time_ms;
    setExecution_time_msIsSet(true);
    return this;
  }

  public void unsetExecution_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTION_TIME_MS_ISSET_ID);
  }

  /** Returns true if field execution_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetExecution_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTION_TIME_MS_ISSET_ID);
  }

  public void setExecution_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTION_TIME_MS_ISSET_ID, value);
  }

  public long getRender_time_ms() {
    return this.render_time_ms;
  }

  public TRenderResult setRender_time_ms(long render_time_ms) {
    this.render_time_ms = render_time_ms;
    setRender_time_msIsSet(true);
    return this;
  }

  public void unsetRender_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RENDER_TIME_MS_ISSET_ID);
  }

  /** Returns true if field render_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRender_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RENDER_TIME_MS_ISSET_ID);
  }

  public void setRender_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RENDER_TIME_MS_ISSET_ID, value);
  }

  public long getTotal_time_ms() {
    return this.total_time_ms;
  }

  public TRenderResult setTotal_time_ms(long total_time_ms) {
    this.total_time_ms = total_time_ms;
    setTotal_time_msIsSet(true);
    return this;
  }

  public void unsetTotal_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_TIME_MS_ISSET_ID);
  }

  /** Returns true if field total_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_TIME_MS_ISSET_ID);
  }

  public void setTotal_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_TIME_MS_ISSET_ID, value);
  }

  public java.lang.String getVega_metadata() {
    return this.vega_metadata;
  }

  public TRenderResult setVega_metadata(java.lang.String vega_metadata) {
    this.vega_metadata = vega_metadata;
    return this;
  }

  public void unsetVega_metadata() {
    this.vega_metadata = null;
  }

  /** Returns true if field vega_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetVega_metadata() {
    return this.vega_metadata != null;
  }

  public void setVega_metadataIsSet(boolean value) {
    if (!value) {
      this.vega_metadata = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        if (value instanceof byte[]) {
          setImage((byte[])value);
        } else {
          setImage((java.nio.ByteBuffer)value);
        }
      }
      break;

    case NONCE:
      if (value == null) {
        unsetNonce();
      } else {
        setNonce((java.lang.String)value);
      }
      break;

    case EXECUTION_TIME_MS:
      if (value == null) {
        unsetExecution_time_ms();
      } else {
        setExecution_time_ms((java.lang.Long)value);
      }
      break;

    case RENDER_TIME_MS:
      if (value == null) {
        unsetRender_time_ms();
      } else {
        setRender_time_ms((java.lang.Long)value);
      }
      break;

    case TOTAL_TIME_MS:
      if (value == null) {
        unsetTotal_time_ms();
      } else {
        setTotal_time_ms((java.lang.Long)value);
      }
      break;

    case VEGA_METADATA:
      if (value == null) {
        unsetVega_metadata();
      } else {
        setVega_metadata((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMAGE:
      return getImage();

    case NONCE:
      return getNonce();

    case EXECUTION_TIME_MS:
      return getExecution_time_ms();

    case RENDER_TIME_MS:
      return getRender_time_ms();

    case TOTAL_TIME_MS:
      return getTotal_time_ms();

    case VEGA_METADATA:
      return getVega_metadata();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMAGE:
      return isSetImage();
    case NONCE:
      return isSetNonce();
    case EXECUTION_TIME_MS:
      return isSetExecution_time_ms();
    case RENDER_TIME_MS:
      return isSetRender_time_ms();
    case TOTAL_TIME_MS:
      return isSetTotal_time_ms();
    case VEGA_METADATA:
      return isSetVega_metadata();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TRenderResult)
      return this.equals((TRenderResult)that);
    return false;
  }

  public boolean equals(TRenderResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_nonce = true && this.isSetNonce();
    boolean that_present_nonce = true && that.isSetNonce();
    if (this_present_nonce || that_present_nonce) {
      if (!(this_present_nonce && that_present_nonce))
        return false;
      if (!this.nonce.equals(that.nonce))
        return false;
    }

    boolean this_present_execution_time_ms = true;
    boolean that_present_execution_time_ms = true;
    if (this_present_execution_time_ms || that_present_execution_time_ms) {
      if (!(this_present_execution_time_ms && that_present_execution_time_ms))
        return false;
      if (this.execution_time_ms != that.execution_time_ms)
        return false;
    }

    boolean this_present_render_time_ms = true;
    boolean that_present_render_time_ms = true;
    if (this_present_render_time_ms || that_present_render_time_ms) {
      if (!(this_present_render_time_ms && that_present_render_time_ms))
        return false;
      if (this.render_time_ms != that.render_time_ms)
        return false;
    }

    boolean this_present_total_time_ms = true;
    boolean that_present_total_time_ms = true;
    if (this_present_total_time_ms || that_present_total_time_ms) {
      if (!(this_present_total_time_ms && that_present_total_time_ms))
        return false;
      if (this.total_time_ms != that.total_time_ms)
        return false;
    }

    boolean this_present_vega_metadata = true && this.isSetVega_metadata();
    boolean that_present_vega_metadata = true && that.isSetVega_metadata();
    if (this_present_vega_metadata || that_present_vega_metadata) {
      if (!(this_present_vega_metadata && that_present_vega_metadata))
        return false;
      if (!this.vega_metadata.equals(that.vega_metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImage()) ? 131071 : 524287);
    if (isSetImage())
      hashCode = hashCode * 8191 + image.hashCode();

    hashCode = hashCode * 8191 + ((isSetNonce()) ? 131071 : 524287);
    if (isSetNonce())
      hashCode = hashCode * 8191 + nonce.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execution_time_ms);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(render_time_ms);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_time_ms);

    hashCode = hashCode * 8191 + ((isSetVega_metadata()) ? 131071 : 524287);
    if (isSetVega_metadata())
      hashCode = hashCode * 8191 + vega_metadata.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRenderResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNonce()).compareTo(other.isSetNonce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonce, other.nonce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecution_time_ms()).compareTo(other.isSetExecution_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecution_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_time_ms, other.execution_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRender_time_ms()).compareTo(other.isSetRender_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRender_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.render_time_ms, other.render_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_time_ms()).compareTo(other.isSetTotal_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_time_ms, other.total_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVega_metadata()).compareTo(other.isSetVega_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVega_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vega_metadata, other.vega_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRenderResult(");
    boolean first = true;

    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.image, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonce:");
    if (this.nonce == null) {
      sb.append("null");
    } else {
      sb.append(this.nonce);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execution_time_ms:");
    sb.append(this.execution_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("render_time_ms:");
    sb.append(this.render_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_time_ms:");
    sb.append(this.total_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vega_metadata:");
    if (this.vega_metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.vega_metadata);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRenderResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRenderResultStandardScheme getScheme() {
      return new TRenderResultStandardScheme();
    }
  }

  private static class TRenderResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRenderResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRenderResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readBinary();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NONCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nonce = iprot.readString();
              struct.setNonceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execution_time_ms = iprot.readI64();
              struct.setExecution_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RENDER_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.render_time_ms = iprot.readI64();
              struct.setRender_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_time_ms = iprot.readI64();
              struct.setTotal_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VEGA_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vega_metadata = iprot.readString();
              struct.setVega_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRenderResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeBinary(struct.image);
        oprot.writeFieldEnd();
      }
      if (struct.nonce != null) {
        oprot.writeFieldBegin(NONCE_FIELD_DESC);
        oprot.writeString(struct.nonce);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.execution_time_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENDER_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.render_time_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.total_time_ms);
      oprot.writeFieldEnd();
      if (struct.vega_metadata != null) {
        oprot.writeFieldBegin(VEGA_METADATA_FIELD_DESC);
        oprot.writeString(struct.vega_metadata);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRenderResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRenderResultTupleScheme getScheme() {
      return new TRenderResultTupleScheme();
    }
  }

  private static class TRenderResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRenderResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRenderResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImage()) {
        optionals.set(0);
      }
      if (struct.isSetNonce()) {
        optionals.set(1);
      }
      if (struct.isSetExecution_time_ms()) {
        optionals.set(2);
      }
      if (struct.isSetRender_time_ms()) {
        optionals.set(3);
      }
      if (struct.isSetTotal_time_ms()) {
        optionals.set(4);
      }
      if (struct.isSetVega_metadata()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetImage()) {
        oprot.writeBinary(struct.image);
      }
      if (struct.isSetNonce()) {
        oprot.writeString(struct.nonce);
      }
      if (struct.isSetExecution_time_ms()) {
        oprot.writeI64(struct.execution_time_ms);
      }
      if (struct.isSetRender_time_ms()) {
        oprot.writeI64(struct.render_time_ms);
      }
      if (struct.isSetTotal_time_ms()) {
        oprot.writeI64(struct.total_time_ms);
      }
      if (struct.isSetVega_metadata()) {
        oprot.writeString(struct.vega_metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRenderResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.image = iprot.readBinary();
        struct.setImageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nonce = iprot.readString();
        struct.setNonceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execution_time_ms = iprot.readI64();
        struct.setExecution_time_msIsSet(true);
      }
      if (incoming.get(3)) {
        struct.render_time_ms = iprot.readI64();
        struct.setRender_time_msIsSet(true);
      }
      if (incoming.get(4)) {
        struct.total_time_ms = iprot.readI64();
        struct.setTotal_time_msIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vega_metadata = iprot.readString();
        struct.setVega_metadataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

