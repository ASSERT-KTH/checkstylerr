/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TCountDistinctDescriptor implements org.apache.thrift.TBase<TCountDistinctDescriptor, TCountDistinctDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TCountDistinctDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCountDistinctDescriptor");

  private static final org.apache.thrift.protocol.TField IMPL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("impl_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("min_val", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BITMAP_SZ_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("bitmap_sz_bits", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField APPROXIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("approximate", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("device_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_BITMAP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sub_bitmap_count", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCountDistinctDescriptorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCountDistinctDescriptorTupleSchemeFactory();

  /**
   * 
   * @see TCountDistinctImplType
   */
  public TCountDistinctImplType impl_type; // required
  public long min_val; // required
  public long bitmap_sz_bits; // required
  public boolean approximate; // required
  /**
   * 
   * @see com.mapd.thrift.server.TDeviceType
   */
  public com.mapd.thrift.server.TDeviceType device_type; // required
  public long sub_bitmap_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCountDistinctImplType
     */
    IMPL_TYPE((short)1, "impl_type"),
    MIN_VAL((short)2, "min_val"),
    BITMAP_SZ_BITS((short)3, "bitmap_sz_bits"),
    APPROXIMATE((short)4, "approximate"),
    /**
     * 
     * @see com.mapd.thrift.server.TDeviceType
     */
    DEVICE_TYPE((short)5, "device_type"),
    SUB_BITMAP_COUNT((short)6, "sub_bitmap_count");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMPL_TYPE
          return IMPL_TYPE;
        case 2: // MIN_VAL
          return MIN_VAL;
        case 3: // BITMAP_SZ_BITS
          return BITMAP_SZ_BITS;
        case 4: // APPROXIMATE
          return APPROXIMATE;
        case 5: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 6: // SUB_BITMAP_COUNT
          return SUB_BITMAP_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_VAL_ISSET_ID = 0;
  private static final int __BITMAP_SZ_BITS_ISSET_ID = 1;
  private static final int __APPROXIMATE_ISSET_ID = 2;
  private static final int __SUB_BITMAP_COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMPL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("impl_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCountDistinctImplType.class)));
    tmpMap.put(_Fields.MIN_VAL, new org.apache.thrift.meta_data.FieldMetaData("min_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BITMAP_SZ_BITS, new org.apache.thrift.meta_data.FieldMetaData("bitmap_sz_bits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPROXIMATE, new org.apache.thrift.meta_data.FieldMetaData("approximate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("device_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.mapd.thrift.server.TDeviceType.class)));
    tmpMap.put(_Fields.SUB_BITMAP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sub_bitmap_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCountDistinctDescriptor.class, metaDataMap);
  }

  public TCountDistinctDescriptor() {
  }

  public TCountDistinctDescriptor(
    TCountDistinctImplType impl_type,
    long min_val,
    long bitmap_sz_bits,
    boolean approximate,
    com.mapd.thrift.server.TDeviceType device_type,
    long sub_bitmap_count)
  {
    this();
    this.impl_type = impl_type;
    this.min_val = min_val;
    setMin_valIsSet(true);
    this.bitmap_sz_bits = bitmap_sz_bits;
    setBitmap_sz_bitsIsSet(true);
    this.approximate = approximate;
    setApproximateIsSet(true);
    this.device_type = device_type;
    this.sub_bitmap_count = sub_bitmap_count;
    setSub_bitmap_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCountDistinctDescriptor(TCountDistinctDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImpl_type()) {
      this.impl_type = other.impl_type;
    }
    this.min_val = other.min_val;
    this.bitmap_sz_bits = other.bitmap_sz_bits;
    this.approximate = other.approximate;
    if (other.isSetDevice_type()) {
      this.device_type = other.device_type;
    }
    this.sub_bitmap_count = other.sub_bitmap_count;
  }

  public TCountDistinctDescriptor deepCopy() {
    return new TCountDistinctDescriptor(this);
  }

  @Override
  public void clear() {
    this.impl_type = null;
    setMin_valIsSet(false);
    this.min_val = 0;
    setBitmap_sz_bitsIsSet(false);
    this.bitmap_sz_bits = 0;
    setApproximateIsSet(false);
    this.approximate = false;
    this.device_type = null;
    setSub_bitmap_countIsSet(false);
    this.sub_bitmap_count = 0;
  }

  /**
   * 
   * @see TCountDistinctImplType
   */
  public TCountDistinctImplType getImpl_type() {
    return this.impl_type;
  }

  /**
   * 
   * @see TCountDistinctImplType
   */
  public TCountDistinctDescriptor setImpl_type(TCountDistinctImplType impl_type) {
    this.impl_type = impl_type;
    return this;
  }

  public void unsetImpl_type() {
    this.impl_type = null;
  }

  /** Returns true if field impl_type is set (has been assigned a value) and false otherwise */
  public boolean isSetImpl_type() {
    return this.impl_type != null;
  }

  public void setImpl_typeIsSet(boolean value) {
    if (!value) {
      this.impl_type = null;
    }
  }

  public long getMin_val() {
    return this.min_val;
  }

  public TCountDistinctDescriptor setMin_val(long min_val) {
    this.min_val = min_val;
    setMin_valIsSet(true);
    return this;
  }

  public void unsetMin_val() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_VAL_ISSET_ID);
  }

  /** Returns true if field min_val is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_val() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_VAL_ISSET_ID);
  }

  public void setMin_valIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_VAL_ISSET_ID, value);
  }

  public long getBitmap_sz_bits() {
    return this.bitmap_sz_bits;
  }

  public TCountDistinctDescriptor setBitmap_sz_bits(long bitmap_sz_bits) {
    this.bitmap_sz_bits = bitmap_sz_bits;
    setBitmap_sz_bitsIsSet(true);
    return this;
  }

  public void unsetBitmap_sz_bits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BITMAP_SZ_BITS_ISSET_ID);
  }

  /** Returns true if field bitmap_sz_bits is set (has been assigned a value) and false otherwise */
  public boolean isSetBitmap_sz_bits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BITMAP_SZ_BITS_ISSET_ID);
  }

  public void setBitmap_sz_bitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BITMAP_SZ_BITS_ISSET_ID, value);
  }

  public boolean isApproximate() {
    return this.approximate;
  }

  public TCountDistinctDescriptor setApproximate(boolean approximate) {
    this.approximate = approximate;
    setApproximateIsSet(true);
    return this;
  }

  public void unsetApproximate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPROXIMATE_ISSET_ID);
  }

  /** Returns true if field approximate is set (has been assigned a value) and false otherwise */
  public boolean isSetApproximate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPROXIMATE_ISSET_ID);
  }

  public void setApproximateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPROXIMATE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.mapd.thrift.server.TDeviceType
   */
  public com.mapd.thrift.server.TDeviceType getDevice_type() {
    return this.device_type;
  }

  /**
   * 
   * @see com.mapd.thrift.server.TDeviceType
   */
  public TCountDistinctDescriptor setDevice_type(com.mapd.thrift.server.TDeviceType device_type) {
    this.device_type = device_type;
    return this;
  }

  public void unsetDevice_type() {
    this.device_type = null;
  }

  /** Returns true if field device_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice_type() {
    return this.device_type != null;
  }

  public void setDevice_typeIsSet(boolean value) {
    if (!value) {
      this.device_type = null;
    }
  }

  public long getSub_bitmap_count() {
    return this.sub_bitmap_count;
  }

  public TCountDistinctDescriptor setSub_bitmap_count(long sub_bitmap_count) {
    this.sub_bitmap_count = sub_bitmap_count;
    setSub_bitmap_countIsSet(true);
    return this;
  }

  public void unsetSub_bitmap_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUB_BITMAP_COUNT_ISSET_ID);
  }

  /** Returns true if field sub_bitmap_count is set (has been assigned a value) and false otherwise */
  public boolean isSetSub_bitmap_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUB_BITMAP_COUNT_ISSET_ID);
  }

  public void setSub_bitmap_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUB_BITMAP_COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IMPL_TYPE:
      if (value == null) {
        unsetImpl_type();
      } else {
        setImpl_type((TCountDistinctImplType)value);
      }
      break;

    case MIN_VAL:
      if (value == null) {
        unsetMin_val();
      } else {
        setMin_val((java.lang.Long)value);
      }
      break;

    case BITMAP_SZ_BITS:
      if (value == null) {
        unsetBitmap_sz_bits();
      } else {
        setBitmap_sz_bits((java.lang.Long)value);
      }
      break;

    case APPROXIMATE:
      if (value == null) {
        unsetApproximate();
      } else {
        setApproximate((java.lang.Boolean)value);
      }
      break;

    case DEVICE_TYPE:
      if (value == null) {
        unsetDevice_type();
      } else {
        setDevice_type((com.mapd.thrift.server.TDeviceType)value);
      }
      break;

    case SUB_BITMAP_COUNT:
      if (value == null) {
        unsetSub_bitmap_count();
      } else {
        setSub_bitmap_count((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMPL_TYPE:
      return getImpl_type();

    case MIN_VAL:
      return getMin_val();

    case BITMAP_SZ_BITS:
      return getBitmap_sz_bits();

    case APPROXIMATE:
      return isApproximate();

    case DEVICE_TYPE:
      return getDevice_type();

    case SUB_BITMAP_COUNT:
      return getSub_bitmap_count();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMPL_TYPE:
      return isSetImpl_type();
    case MIN_VAL:
      return isSetMin_val();
    case BITMAP_SZ_BITS:
      return isSetBitmap_sz_bits();
    case APPROXIMATE:
      return isSetApproximate();
    case DEVICE_TYPE:
      return isSetDevice_type();
    case SUB_BITMAP_COUNT:
      return isSetSub_bitmap_count();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCountDistinctDescriptor)
      return this.equals((TCountDistinctDescriptor)that);
    return false;
  }

  public boolean equals(TCountDistinctDescriptor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_impl_type = true && this.isSetImpl_type();
    boolean that_present_impl_type = true && that.isSetImpl_type();
    if (this_present_impl_type || that_present_impl_type) {
      if (!(this_present_impl_type && that_present_impl_type))
        return false;
      if (!this.impl_type.equals(that.impl_type))
        return false;
    }

    boolean this_present_min_val = true;
    boolean that_present_min_val = true;
    if (this_present_min_val || that_present_min_val) {
      if (!(this_present_min_val && that_present_min_val))
        return false;
      if (this.min_val != that.min_val)
        return false;
    }

    boolean this_present_bitmap_sz_bits = true;
    boolean that_present_bitmap_sz_bits = true;
    if (this_present_bitmap_sz_bits || that_present_bitmap_sz_bits) {
      if (!(this_present_bitmap_sz_bits && that_present_bitmap_sz_bits))
        return false;
      if (this.bitmap_sz_bits != that.bitmap_sz_bits)
        return false;
    }

    boolean this_present_approximate = true;
    boolean that_present_approximate = true;
    if (this_present_approximate || that_present_approximate) {
      if (!(this_present_approximate && that_present_approximate))
        return false;
      if (this.approximate != that.approximate)
        return false;
    }

    boolean this_present_device_type = true && this.isSetDevice_type();
    boolean that_present_device_type = true && that.isSetDevice_type();
    if (this_present_device_type || that_present_device_type) {
      if (!(this_present_device_type && that_present_device_type))
        return false;
      if (!this.device_type.equals(that.device_type))
        return false;
    }

    boolean this_present_sub_bitmap_count = true;
    boolean that_present_sub_bitmap_count = true;
    if (this_present_sub_bitmap_count || that_present_sub_bitmap_count) {
      if (!(this_present_sub_bitmap_count && that_present_sub_bitmap_count))
        return false;
      if (this.sub_bitmap_count != that.sub_bitmap_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImpl_type()) ? 131071 : 524287);
    if (isSetImpl_type())
      hashCode = hashCode * 8191 + impl_type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_val);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bitmap_sz_bits);

    hashCode = hashCode * 8191 + ((approximate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDevice_type()) ? 131071 : 524287);
    if (isSetDevice_type())
      hashCode = hashCode * 8191 + device_type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sub_bitmap_count);

    return hashCode;
  }

  @Override
  public int compareTo(TCountDistinctDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetImpl_type()).compareTo(other.isSetImpl_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpl_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impl_type, other.impl_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_val()).compareTo(other.isSetMin_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_val, other.min_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBitmap_sz_bits()).compareTo(other.isSetBitmap_sz_bits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitmap_sz_bits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitmap_sz_bits, other.bitmap_sz_bits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApproximate()).compareTo(other.isSetApproximate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproximate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approximate, other.approximate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDevice_type()).compareTo(other.isSetDevice_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_type, other.device_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSub_bitmap_count()).compareTo(other.isSetSub_bitmap_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub_bitmap_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub_bitmap_count, other.sub_bitmap_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCountDistinctDescriptor(");
    boolean first = true;

    sb.append("impl_type:");
    if (this.impl_type == null) {
      sb.append("null");
    } else {
      sb.append(this.impl_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_val:");
    sb.append(this.min_val);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bitmap_sz_bits:");
    sb.append(this.bitmap_sz_bits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approximate:");
    sb.append(this.approximate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("device_type:");
    if (this.device_type == null) {
      sb.append("null");
    } else {
      sb.append(this.device_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sub_bitmap_count:");
    sb.append(this.sub_bitmap_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCountDistinctDescriptorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCountDistinctDescriptorStandardScheme getScheme() {
      return new TCountDistinctDescriptorStandardScheme();
    }
  }

  private static class TCountDistinctDescriptorStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCountDistinctDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCountDistinctDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMPL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.impl_type = com.mapd.thrift.server.TCountDistinctImplType.findByValue(iprot.readI32());
              struct.setImpl_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_val = iprot.readI64();
              struct.setMin_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BITMAP_SZ_BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bitmap_sz_bits = iprot.readI64();
              struct.setBitmap_sz_bitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPROXIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.approximate = iprot.readBool();
              struct.setApproximateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.device_type = com.mapd.thrift.server.TDeviceType.findByValue(iprot.readI32());
              struct.setDevice_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_BITMAP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sub_bitmap_count = iprot.readI64();
              struct.setSub_bitmap_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCountDistinctDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.impl_type != null) {
        oprot.writeFieldBegin(IMPL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.impl_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_VAL_FIELD_DESC);
      oprot.writeI64(struct.min_val);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BITMAP_SZ_BITS_FIELD_DESC);
      oprot.writeI64(struct.bitmap_sz_bits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROXIMATE_FIELD_DESC);
      oprot.writeBool(struct.approximate);
      oprot.writeFieldEnd();
      if (struct.device_type != null) {
        oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.device_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_BITMAP_COUNT_FIELD_DESC);
      oprot.writeI64(struct.sub_bitmap_count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCountDistinctDescriptorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCountDistinctDescriptorTupleScheme getScheme() {
      return new TCountDistinctDescriptorTupleScheme();
    }
  }

  private static class TCountDistinctDescriptorTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCountDistinctDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCountDistinctDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImpl_type()) {
        optionals.set(0);
      }
      if (struct.isSetMin_val()) {
        optionals.set(1);
      }
      if (struct.isSetBitmap_sz_bits()) {
        optionals.set(2);
      }
      if (struct.isSetApproximate()) {
        optionals.set(3);
      }
      if (struct.isSetDevice_type()) {
        optionals.set(4);
      }
      if (struct.isSetSub_bitmap_count()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetImpl_type()) {
        oprot.writeI32(struct.impl_type.getValue());
      }
      if (struct.isSetMin_val()) {
        oprot.writeI64(struct.min_val);
      }
      if (struct.isSetBitmap_sz_bits()) {
        oprot.writeI64(struct.bitmap_sz_bits);
      }
      if (struct.isSetApproximate()) {
        oprot.writeBool(struct.approximate);
      }
      if (struct.isSetDevice_type()) {
        oprot.writeI32(struct.device_type.getValue());
      }
      if (struct.isSetSub_bitmap_count()) {
        oprot.writeI64(struct.sub_bitmap_count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCountDistinctDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.impl_type = com.mapd.thrift.server.TCountDistinctImplType.findByValue(iprot.readI32());
        struct.setImpl_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.min_val = iprot.readI64();
        struct.setMin_valIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bitmap_sz_bits = iprot.readI64();
        struct.setBitmap_sz_bitsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.approximate = iprot.readBool();
        struct.setApproximateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.device_type = com.mapd.thrift.server.TDeviceType.findByValue(iprot.readI32());
        struct.setDevice_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sub_bitmap_count = iprot.readI64();
        struct.setSub_bitmap_countIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

