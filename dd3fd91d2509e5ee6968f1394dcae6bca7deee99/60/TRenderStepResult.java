/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-01")
public class TRenderStepResult implements org.apache.thrift.TBase<TRenderStepResult, TRenderStepResult._Fields>, java.io.Serializable, Cloneable, Comparable<TRenderStepResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRenderStepResult");

  private static final org.apache.thrift.protocol.TField MERGE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_data", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField RAW_PIXEL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("raw_pixel_data", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_time_ms", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RENDER_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("render_time_ms", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_time_ms", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRenderStepResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRenderStepResultTupleSchemeFactory();

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> merge_data; // required
  public TRawPixelData raw_pixel_data; // required
  public long execution_time_ms; // required
  public long render_time_ms; // required
  public long total_time_ms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERGE_DATA((short)1, "merge_data"),
    RAW_PIXEL_DATA((short)2, "raw_pixel_data"),
    EXECUTION_TIME_MS((short)3, "execution_time_ms"),
    RENDER_TIME_MS((short)4, "render_time_ms"),
    TOTAL_TIME_MS((short)5, "total_time_ms");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERGE_DATA
          return MERGE_DATA;
        case 2: // RAW_PIXEL_DATA
          return RAW_PIXEL_DATA;
        case 3: // EXECUTION_TIME_MS
          return EXECUTION_TIME_MS;
        case 4: // RENDER_TIME_MS
          return RENDER_TIME_MS;
        case 5: // TOTAL_TIME_MS
          return TOTAL_TIME_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTION_TIME_MS_ISSET_ID = 0;
  private static final int __RENDER_TIME_MS_ISSET_ID = 1;
  private static final int __TOTAL_TIME_MS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERGE_DATA, new org.apache.thrift.meta_data.FieldMetaData("merge_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "TRenderAggDataMap")));
    tmpMap.put(_Fields.RAW_PIXEL_DATA, new org.apache.thrift.meta_data.FieldMetaData("raw_pixel_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRawPixelData.class)));
    tmpMap.put(_Fields.EXECUTION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("execution_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RENDER_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("render_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("total_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRenderStepResult.class, metaDataMap);
  }

  public TRenderStepResult() {
  }

  public TRenderStepResult(
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> merge_data,
    TRawPixelData raw_pixel_data,
    long execution_time_ms,
    long render_time_ms,
    long total_time_ms)
  {
    this();
    this.merge_data = merge_data;
    this.raw_pixel_data = raw_pixel_data;
    this.execution_time_ms = execution_time_ms;
    setExecution_time_msIsSet(true);
    this.render_time_ms = render_time_ms;
    setRender_time_msIsSet(true);
    this.total_time_ms = total_time_ms;
    setTotal_time_msIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRenderStepResult(TRenderStepResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMerge_data()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> __this__merge_data = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>>(other.merge_data.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> other_element : other.merge_data.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> other_element_value = other_element.getValue();

        java.lang.String __this__merge_data_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> __this__merge_data_copy_value = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>(other_element_value.size());
        for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> other_element_value_element : other_element_value.entrySet()) {

          java.lang.String other_element_value_element_key = other_element_value_element.getKey();
          java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> other_element_value_element_value = other_element_value_element.getValue();

          java.lang.String __this__merge_data_copy_value_copy_key = other_element_value_element_key;

          java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> __this__merge_data_copy_value_copy_value = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>(other_element_value_element_value.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> other_element_value_element_value_element : other_element_value_element_value.entrySet()) {

            java.lang.String other_element_value_element_value_element_key = other_element_value_element_value_element.getKey();
            java.util.Map<java.lang.String,java.util.List<TRenderDatum>> other_element_value_element_value_element_value = other_element_value_element_value_element.getValue();

            java.lang.String __this__merge_data_copy_value_copy_value_copy_key = other_element_value_element_value_element_key;

            java.util.Map<java.lang.String,java.util.List<TRenderDatum>> __this__merge_data_copy_value_copy_value_copy_value = new java.util.HashMap<java.lang.String,java.util.List<TRenderDatum>>(other_element_value_element_value_element_value.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<TRenderDatum>> other_element_value_element_value_element_value_element : other_element_value_element_value_element_value.entrySet()) {

              java.lang.String other_element_value_element_value_element_value_element_key = other_element_value_element_value_element_value_element.getKey();
              java.util.List<TRenderDatum> other_element_value_element_value_element_value_element_value = other_element_value_element_value_element_value_element.getValue();

              java.lang.String __this__merge_data_copy_value_copy_value_copy_value_copy_key = other_element_value_element_value_element_value_element_key;

              java.util.List<TRenderDatum> __this__merge_data_copy_value_copy_value_copy_value_copy_value = new java.util.ArrayList<TRenderDatum>(other_element_value_element_value_element_value_element_value.size());
              for (TRenderDatum other_element_value_element_value_element_value_element_value_element : other_element_value_element_value_element_value_element_value) {
                __this__merge_data_copy_value_copy_value_copy_value_copy_value.add(new TRenderDatum(other_element_value_element_value_element_value_element_value_element));
              }

              __this__merge_data_copy_value_copy_value_copy_value.put(__this__merge_data_copy_value_copy_value_copy_value_copy_key, __this__merge_data_copy_value_copy_value_copy_value_copy_value);
            }

            __this__merge_data_copy_value_copy_value.put(__this__merge_data_copy_value_copy_value_copy_key, __this__merge_data_copy_value_copy_value_copy_value);
          }

          __this__merge_data_copy_value.put(__this__merge_data_copy_value_copy_key, __this__merge_data_copy_value_copy_value);
        }

        __this__merge_data.put(__this__merge_data_copy_key, __this__merge_data_copy_value);
      }
      this.merge_data = __this__merge_data;
    }
    if (other.isSetRaw_pixel_data()) {
      this.raw_pixel_data = new TRawPixelData(other.raw_pixel_data);
    }
    this.execution_time_ms = other.execution_time_ms;
    this.render_time_ms = other.render_time_ms;
    this.total_time_ms = other.total_time_ms;
  }

  public TRenderStepResult deepCopy() {
    return new TRenderStepResult(this);
  }

  @Override
  public void clear() {
    this.merge_data = null;
    this.raw_pixel_data = null;
    setExecution_time_msIsSet(false);
    this.execution_time_ms = 0;
    setRender_time_msIsSet(false);
    this.render_time_ms = 0;
    setTotal_time_msIsSet(false);
    this.total_time_ms = 0;
  }

  public int getMerge_dataSize() {
    return (this.merge_data == null) ? 0 : this.merge_data.size();
  }

  public void putToMerge_data(java.lang.String key, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> val) {
    if (this.merge_data == null) {
      this.merge_data = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>>();
    }
    this.merge_data.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> getMerge_data() {
    return this.merge_data;
  }

  public TRenderStepResult setMerge_data(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> merge_data) {
    this.merge_data = merge_data;
    return this;
  }

  public void unsetMerge_data() {
    this.merge_data = null;
  }

  /** Returns true if field merge_data is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_data() {
    return this.merge_data != null;
  }

  public void setMerge_dataIsSet(boolean value) {
    if (!value) {
      this.merge_data = null;
    }
  }

  public TRawPixelData getRaw_pixel_data() {
    return this.raw_pixel_data;
  }

  public TRenderStepResult setRaw_pixel_data(TRawPixelData raw_pixel_data) {
    this.raw_pixel_data = raw_pixel_data;
    return this;
  }

  public void unsetRaw_pixel_data() {
    this.raw_pixel_data = null;
  }

  /** Returns true if field raw_pixel_data is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw_pixel_data() {
    return this.raw_pixel_data != null;
  }

  public void setRaw_pixel_dataIsSet(boolean value) {
    if (!value) {
      this.raw_pixel_data = null;
    }
  }

  public long getExecution_time_ms() {
    return this.execution_time_ms;
  }

  public TRenderStepResult setExecution_time_ms(long execution_time_ms) {
    this.execution_time_ms = execution_time_ms;
    setExecution_time_msIsSet(true);
    return this;
  }

  public void unsetExecution_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTION_TIME_MS_ISSET_ID);
  }

  /** Returns true if field execution_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetExecution_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTION_TIME_MS_ISSET_ID);
  }

  public void setExecution_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTION_TIME_MS_ISSET_ID, value);
  }

  public long getRender_time_ms() {
    return this.render_time_ms;
  }

  public TRenderStepResult setRender_time_ms(long render_time_ms) {
    this.render_time_ms = render_time_ms;
    setRender_time_msIsSet(true);
    return this;
  }

  public void unsetRender_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RENDER_TIME_MS_ISSET_ID);
  }

  /** Returns true if field render_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRender_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RENDER_TIME_MS_ISSET_ID);
  }

  public void setRender_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RENDER_TIME_MS_ISSET_ID, value);
  }

  public long getTotal_time_ms() {
    return this.total_time_ms;
  }

  public TRenderStepResult setTotal_time_ms(long total_time_ms) {
    this.total_time_ms = total_time_ms;
    setTotal_time_msIsSet(true);
    return this;
  }

  public void unsetTotal_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_TIME_MS_ISSET_ID);
  }

  /** Returns true if field total_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_TIME_MS_ISSET_ID);
  }

  public void setTotal_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_TIME_MS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MERGE_DATA:
      if (value == null) {
        unsetMerge_data();
      } else {
        setMerge_data((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>>)value);
      }
      break;

    case RAW_PIXEL_DATA:
      if (value == null) {
        unsetRaw_pixel_data();
      } else {
        setRaw_pixel_data((TRawPixelData)value);
      }
      break;

    case EXECUTION_TIME_MS:
      if (value == null) {
        unsetExecution_time_ms();
      } else {
        setExecution_time_ms((java.lang.Long)value);
      }
      break;

    case RENDER_TIME_MS:
      if (value == null) {
        unsetRender_time_ms();
      } else {
        setRender_time_ms((java.lang.Long)value);
      }
      break;

    case TOTAL_TIME_MS:
      if (value == null) {
        unsetTotal_time_ms();
      } else {
        setTotal_time_ms((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MERGE_DATA:
      return getMerge_data();

    case RAW_PIXEL_DATA:
      return getRaw_pixel_data();

    case EXECUTION_TIME_MS:
      return getExecution_time_ms();

    case RENDER_TIME_MS:
      return getRender_time_ms();

    case TOTAL_TIME_MS:
      return getTotal_time_ms();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MERGE_DATA:
      return isSetMerge_data();
    case RAW_PIXEL_DATA:
      return isSetRaw_pixel_data();
    case EXECUTION_TIME_MS:
      return isSetExecution_time_ms();
    case RENDER_TIME_MS:
      return isSetRender_time_ms();
    case TOTAL_TIME_MS:
      return isSetTotal_time_ms();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TRenderStepResult)
      return this.equals((TRenderStepResult)that);
    return false;
  }

  public boolean equals(TRenderStepResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_merge_data = true && this.isSetMerge_data();
    boolean that_present_merge_data = true && that.isSetMerge_data();
    if (this_present_merge_data || that_present_merge_data) {
      if (!(this_present_merge_data && that_present_merge_data))
        return false;
      if (!this.merge_data.equals(that.merge_data))
        return false;
    }

    boolean this_present_raw_pixel_data = true && this.isSetRaw_pixel_data();
    boolean that_present_raw_pixel_data = true && that.isSetRaw_pixel_data();
    if (this_present_raw_pixel_data || that_present_raw_pixel_data) {
      if (!(this_present_raw_pixel_data && that_present_raw_pixel_data))
        return false;
      if (!this.raw_pixel_data.equals(that.raw_pixel_data))
        return false;
    }

    boolean this_present_execution_time_ms = true;
    boolean that_present_execution_time_ms = true;
    if (this_present_execution_time_ms || that_present_execution_time_ms) {
      if (!(this_present_execution_time_ms && that_present_execution_time_ms))
        return false;
      if (this.execution_time_ms != that.execution_time_ms)
        return false;
    }

    boolean this_present_render_time_ms = true;
    boolean that_present_render_time_ms = true;
    if (this_present_render_time_ms || that_present_render_time_ms) {
      if (!(this_present_render_time_ms && that_present_render_time_ms))
        return false;
      if (this.render_time_ms != that.render_time_ms)
        return false;
    }

    boolean this_present_total_time_ms = true;
    boolean that_present_total_time_ms = true;
    if (this_present_total_time_ms || that_present_total_time_ms) {
      if (!(this_present_total_time_ms && that_present_total_time_ms))
        return false;
      if (this.total_time_ms != that.total_time_ms)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMerge_data()) ? 131071 : 524287);
    if (isSetMerge_data())
      hashCode = hashCode * 8191 + merge_data.hashCode();

    hashCode = hashCode * 8191 + ((isSetRaw_pixel_data()) ? 131071 : 524287);
    if (isSetRaw_pixel_data())
      hashCode = hashCode * 8191 + raw_pixel_data.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execution_time_ms);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(render_time_ms);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_time_ms);

    return hashCode;
  }

  @Override
  public int compareTo(TRenderStepResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMerge_data()).compareTo(other.isSetMerge_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_data, other.merge_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRaw_pixel_data()).compareTo(other.isSetRaw_pixel_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw_pixel_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw_pixel_data, other.raw_pixel_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecution_time_ms()).compareTo(other.isSetExecution_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecution_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_time_ms, other.execution_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRender_time_ms()).compareTo(other.isSetRender_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRender_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.render_time_ms, other.render_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_time_ms()).compareTo(other.isSetTotal_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_time_ms, other.total_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRenderStepResult(");
    boolean first = true;

    sb.append("merge_data:");
    if (this.merge_data == null) {
      sb.append("null");
    } else {
      sb.append(this.merge_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("raw_pixel_data:");
    if (this.raw_pixel_data == null) {
      sb.append("null");
    } else {
      sb.append(this.raw_pixel_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execution_time_ms:");
    sb.append(this.execution_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("render_time_ms:");
    sb.append(this.render_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_time_ms:");
    sb.append(this.total_time_ms);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (raw_pixel_data != null) {
      raw_pixel_data.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRenderStepResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRenderStepResultStandardScheme getScheme() {
      return new TRenderStepResultStandardScheme();
    }
  }

  private static class TRenderStepResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRenderStepResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRenderStepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERGE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map218 = iprot.readMapBegin();
                struct.merge_data = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>>(2*_map218.size);
                java.lang.String _key219;
                java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> _val220;
                for (int _i221 = 0; _i221 < _map218.size; ++_i221)
                {
                  _key219 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map222 = iprot.readMapBegin();
                    _val220 = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>(2*_map222.size);
                    java.lang.String _key223;
                    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> _val224;
                    for (int _i225 = 0; _i225 < _map222.size; ++_i225)
                    {
                      _key223 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TMap _map226 = iprot.readMapBegin();
                        _val224 = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>(2*_map226.size);
                        java.lang.String _key227;
                        java.util.Map<java.lang.String,java.util.List<TRenderDatum>> _val228;
                        for (int _i229 = 0; _i229 < _map226.size; ++_i229)
                        {
                          _key227 = iprot.readString();
                          {
                            org.apache.thrift.protocol.TMap _map230 = iprot.readMapBegin();
                            _val228 = new java.util.HashMap<java.lang.String,java.util.List<TRenderDatum>>(2*_map230.size);
                            java.lang.String _key231;
                            java.util.List<TRenderDatum> _val232;
                            for (int _i233 = 0; _i233 < _map230.size; ++_i233)
                            {
                              _key231 = iprot.readString();
                              {
                                org.apache.thrift.protocol.TList _list234 = iprot.readListBegin();
                                _val232 = new java.util.ArrayList<TRenderDatum>(_list234.size);
                                TRenderDatum _elem235;
                                for (int _i236 = 0; _i236 < _list234.size; ++_i236)
                                {
                                  _elem235 = new TRenderDatum();
                                  _elem235.read(iprot);
                                  _val232.add(_elem235);
                                }
                                iprot.readListEnd();
                              }
                              _val228.put(_key231, _val232);
                            }
                            iprot.readMapEnd();
                          }
                          _val224.put(_key227, _val228);
                        }
                        iprot.readMapEnd();
                      }
                      _val220.put(_key223, _val224);
                    }
                    iprot.readMapEnd();
                  }
                  struct.merge_data.put(_key219, _val220);
                }
                iprot.readMapEnd();
              }
              struct.setMerge_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAW_PIXEL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.raw_pixel_data = new TRawPixelData();
              struct.raw_pixel_data.read(iprot);
              struct.setRaw_pixel_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execution_time_ms = iprot.readI64();
              struct.setExecution_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RENDER_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.render_time_ms = iprot.readI64();
              struct.setRender_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_time_ms = iprot.readI64();
              struct.setTotal_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRenderStepResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merge_data != null) {
        oprot.writeFieldBegin(MERGE_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.merge_data.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> _iter237 : struct.merge_data.entrySet())
          {
            oprot.writeString(_iter237.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, _iter237.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> _iter238 : _iter237.getValue().entrySet())
              {
                oprot.writeString(_iter238.getKey());
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, _iter238.getValue().size()));
                  for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> _iter239 : _iter238.getValue().entrySet())
                  {
                    oprot.writeString(_iter239.getKey());
                    {
                      oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter239.getValue().size()));
                      for (java.util.Map.Entry<java.lang.String, java.util.List<TRenderDatum>> _iter240 : _iter239.getValue().entrySet())
                      {
                        oprot.writeString(_iter240.getKey());
                        {
                          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter240.getValue().size()));
                          for (TRenderDatum _iter241 : _iter240.getValue())
                          {
                            _iter241.write(oprot);
                          }
                          oprot.writeListEnd();
                        }
                      }
                      oprot.writeMapEnd();
                    }
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.raw_pixel_data != null) {
        oprot.writeFieldBegin(RAW_PIXEL_DATA_FIELD_DESC);
        struct.raw_pixel_data.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.execution_time_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENDER_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.render_time_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.total_time_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRenderStepResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRenderStepResultTupleScheme getScheme() {
      return new TRenderStepResultTupleScheme();
    }
  }

  private static class TRenderStepResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRenderStepResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRenderStepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMerge_data()) {
        optionals.set(0);
      }
      if (struct.isSetRaw_pixel_data()) {
        optionals.set(1);
      }
      if (struct.isSetExecution_time_ms()) {
        optionals.set(2);
      }
      if (struct.isSetRender_time_ms()) {
        optionals.set(3);
      }
      if (struct.isSetTotal_time_ms()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMerge_data()) {
        {
          oprot.writeI32(struct.merge_data.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>> _iter242 : struct.merge_data.entrySet())
          {
            oprot.writeString(_iter242.getKey());
            {
              oprot.writeI32(_iter242.getValue().size());
              for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> _iter243 : _iter242.getValue().entrySet())
              {
                oprot.writeString(_iter243.getKey());
                {
                  oprot.writeI32(_iter243.getValue().size());
                  for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> _iter244 : _iter243.getValue().entrySet())
                  {
                    oprot.writeString(_iter244.getKey());
                    {
                      oprot.writeI32(_iter244.getValue().size());
                      for (java.util.Map.Entry<java.lang.String, java.util.List<TRenderDatum>> _iter245 : _iter244.getValue().entrySet())
                      {
                        oprot.writeString(_iter245.getKey());
                        {
                          oprot.writeI32(_iter245.getValue().size());
                          for (TRenderDatum _iter246 : _iter245.getValue())
                          {
                            _iter246.write(oprot);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetRaw_pixel_data()) {
        struct.raw_pixel_data.write(oprot);
      }
      if (struct.isSetExecution_time_ms()) {
        oprot.writeI64(struct.execution_time_ms);
      }
      if (struct.isSetRender_time_ms()) {
        oprot.writeI64(struct.render_time_ms);
      }
      if (struct.isSetTotal_time_ms()) {
        oprot.writeI64(struct.total_time_ms);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRenderStepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map247 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.merge_data = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>>(2*_map247.size);
          java.lang.String _key248;
          java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>> _val249;
          for (int _i250 = 0; _i250 < _map247.size; ++_i250)
          {
            _key248 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map251 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val249 = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>>(2*_map251.size);
              java.lang.String _key252;
              java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>> _val253;
              for (int _i254 = 0; _i254 < _map251.size; ++_i254)
              {
                _key252 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map255 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                  _val253 = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.List<TRenderDatum>>>(2*_map255.size);
                  java.lang.String _key256;
                  java.util.Map<java.lang.String,java.util.List<TRenderDatum>> _val257;
                  for (int _i258 = 0; _i258 < _map255.size; ++_i258)
                  {
                    _key256 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map259 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                      _val257 = new java.util.HashMap<java.lang.String,java.util.List<TRenderDatum>>(2*_map259.size);
                      java.lang.String _key260;
                      java.util.List<TRenderDatum> _val261;
                      for (int _i262 = 0; _i262 < _map259.size; ++_i262)
                      {
                        _key260 = iprot.readString();
                        {
                          org.apache.thrift.protocol.TList _list263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                          _val261 = new java.util.ArrayList<TRenderDatum>(_list263.size);
                          TRenderDatum _elem264;
                          for (int _i265 = 0; _i265 < _list263.size; ++_i265)
                          {
                            _elem264 = new TRenderDatum();
                            _elem264.read(iprot);
                            _val261.add(_elem264);
                          }
                        }
                        _val257.put(_key260, _val261);
                      }
                    }
                    _val253.put(_key256, _val257);
                  }
                }
                _val249.put(_key252, _val253);
              }
            }
            struct.merge_data.put(_key248, _val249);
          }
        }
        struct.setMerge_dataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.raw_pixel_data = new TRawPixelData();
        struct.raw_pixel_data.read(iprot);
        struct.setRaw_pixel_dataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execution_time_ms = iprot.readI64();
        struct.setExecution_time_msIsSet(true);
      }
      if (incoming.get(3)) {
        struct.render_time_ms = iprot.readI64();
        struct.setRender_time_msIsSet(true);
      }
      if (incoming.get(4)) {
        struct.total_time_ms = iprot.readI64();
        struct.setTotal_time_msIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

