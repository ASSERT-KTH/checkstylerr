/*
 * Copyright (c) 1997, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package com.sun.jts.codegen.otsidl;


/**
* com/sun/jts/codegen/otsidl/_CoordinatorResourceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from com/sun/jts/ots.idl
* Tuesday, February 5, 2002 12:57:23 PM PST
*/


//#-----------------------------------------------------------------------------
public class _CoordinatorResourceStub extends org.omg.CORBA.portable.ObjectImpl implements com.sun.jts.codegen.otsidl.CoordinatorResource
{

  public void commit_subtransaction (org.omg.CosTransactions.Coordinator parent)
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("commit_subtransaction", true);
       org.omg.CosTransactions.CoordinatorHelper.write ($out, parent);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       commit_subtransaction (parent);
    } finally {
        _releaseReply ($in);
    }
  } // commit_subtransaction

  public void rollback_subtransaction ()
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("rollback_subtransaction", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       rollback_subtransaction ();
    } finally {
        _releaseReply ($in);
    }
  } // rollback_subtransaction

  public org.omg.CosTransactions.Vote prepare () throws org.omg.CosTransactions.HeuristicMixed, org.omg.CosTransactions.HeuristicHazard
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("prepare", true);
       $in = _invoke ($out);
       org.omg.CosTransactions.Vote $result = org.omg.CosTransactions.VoteHelper.read ($in);
       return $result;
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicMixed:1.0"))
          throw org.omg.CosTransactions.HeuristicMixedHelper.read ($in);
       else if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicHazard:1.0"))
          throw org.omg.CosTransactions.HeuristicHazardHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       return prepare ();
    } finally {
        _releaseReply ($in);
    }
  } // prepare

  public void rollback () throws org.omg.CosTransactions.HeuristicCommit, org.omg.CosTransactions.HeuristicMixed, org.omg.CosTransactions.HeuristicHazard
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("rollback", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicCommit:1.0"))
          throw org.omg.CosTransactions.HeuristicCommitHelper.read ($in);
       else if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicMixed:1.0"))
          throw org.omg.CosTransactions.HeuristicMixedHelper.read ($in);
       else if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicHazard:1.0"))
          throw org.omg.CosTransactions.HeuristicHazardHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       rollback ();
    } finally {
        _releaseReply ($in);
    }
  } // rollback

  public void commit () throws org.omg.CosTransactions.NotPrepared, org.omg.CosTransactions.HeuristicRollback, org.omg.CosTransactions.HeuristicMixed, org.omg.CosTransactions.HeuristicHazard
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("commit", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:omg.org/CosTransactions/NotPrepared:1.0"))
          throw org.omg.CosTransactions.NotPreparedHelper.read ($in);
       else if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicRollback:1.0"))
          throw org.omg.CosTransactions.HeuristicRollbackHelper.read ($in);
       else if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicMixed:1.0"))
          throw org.omg.CosTransactions.HeuristicMixedHelper.read ($in);
       else if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicHazard:1.0"))
          throw org.omg.CosTransactions.HeuristicHazardHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       commit ();
    } finally {
        _releaseReply ($in);
    }
  } // commit

  public void commit_one_phase () throws org.omg.CosTransactions.HeuristicHazard
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("commit_one_phase", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:omg.org/CosTransactions/HeuristicHazard:1.0"))
          throw org.omg.CosTransactions.HeuristicHazardHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       commit_one_phase ();
    } finally {
        _releaseReply ($in);
    }
  } // commit_one_phase

  public void forget ()
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("forget", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       forget ();
    } finally {
        _releaseReply ($in);
    }
  } // forget

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:otsidl/CoordinatorResource:1.0",
    "IDL:omg.org/CosTransactions/SubtransactionAwareResource:1.0",
    "IDL:omg.org/CosTransactions/Resource:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _CoordinatorResourceStub
