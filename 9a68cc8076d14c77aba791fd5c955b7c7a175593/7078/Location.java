/*
 * Copyright (c) 2006, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package org.glassfish.contextpropagation;

import java.util.EnumSet;

import org.glassfish.contextpropagation.bootstrap.ContextBootstrap;

/**
 * The Location class provides information about the current location of the
 * request relative to the point where it originally entered the system. As
 * the request hops from one region of the system to the next (from thread to
 * thread or from process to process) the Location is updated to reflect the
 * changes in location.
 *
 */
public class Location implements ViewCapable, ContextLifecycle {
  public static final EnumSet<PropagationMode> PROP_MODES = PropagationMode.defaultSetOneway();
  private View view;
  public static final String KEY = "org.glassfish.contextpropagation.Location";
  private String origin;
  private String locationId;
  private short lastChildId = 0;

  /*
   * Implemented as a ViewCapable custom context so that Location may be
   * propagated
   */
  protected Location(View aView) {
    view = aView;
  }

  /**
   * @return The original unique identifier for the request. This identifier
   * is generated by the process where the request was originally submitted.
   */
  public String getOrigin() {
    return origin == null ? ContextBootstrap.getGuid() : origin;
  }

  /* For future implementation public short[] getBreadCrumbs() {
  } provides a more compact way of representing the location id*/

  /**
   * @return a unique String illustrating the shortest path between
   * the original location where
   * the request entered the system and current location.
   */
  public String getLocationId() {
    return "[" + getLocationIdInternal() + "]";
  }

  private String getLocationIdInternal() {
    return locationId == null ? "0" : locationId;
  }

  @Override
  public void contextChanged(Object replacementContext) { /* NO-OP */ }

  @Override
  public void contextAdded() {
    origin = view.get("origin");
    view.put("origin", getOrigin(), PROP_MODES);
    locationId = view.get("locationId");
  }

  @Override
  public void contextRemoved() { /* NO-OP */}

  @Override
  public ViewCapable contextToPropagate() {
    view.put("locationId", getLocationIdInternal() + ", " + ++lastChildId, PROP_MODES);
    return this;
  }

  // For future implementation public short[] getTravelLog(); Provides the full
  // itinerary followed by the request
}
