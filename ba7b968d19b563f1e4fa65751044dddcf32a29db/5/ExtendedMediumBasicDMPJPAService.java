/**
 * Copyright (C) 2013 â€“ 2017 SLUB Dresden & Avantgarde Labs GmbH (<code@dswarm.org>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.dswarm.persistence.service;

import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;

import com.google.inject.Provider;

import org.dswarm.persistence.DMPPersistenceException;
import org.dswarm.persistence.dto.BasicDMPDTO;
import org.dswarm.persistence.model.ExtendedBasicDMPJPAObject;
import org.dswarm.persistence.model.proxy.ProxyExtendedBasicDMPJPAObject;

/**
 * A generic persistence service implementation for {@link org.dswarm.persistence.model.ExtendedBasicDMPJPAObject}s, i.e., objects where the identifier will be
 * generated by the database and that can have a name and a description.
 *
 * @author tgaengler
 * @param <POJOCLASS> the concrete POJO class
 */
public abstract class ExtendedMediumBasicDMPJPAService<PROXYPOJOCLASS extends ProxyExtendedBasicDMPJPAObject<POJOCLASS>, POJOCLASS extends ExtendedBasicDMPJPAObject, MEDIUMCLASS extends BasicDMPDTO<MEDIUMCLASS>>
		extends ExtendedBasicDMPJPAService<PROXYPOJOCLASS, POJOCLASS> {

	/**
	 * Creates a new persistence service for the given concrete POJO class and the entity manager provider.
	 *
	 * @param clasz a concrete POJO class
	 * @param entityManagerProvider an entity manager provider
	 */
	protected ExtendedMediumBasicDMPJPAService(final Class<POJOCLASS> clasz, final Class<PROXYPOJOCLASS> proxyClasz,
																						 final Provider<EntityManager> entityManagerProvider) {

		super(clasz, proxyClasz, entityManagerProvider);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateObjectInternal(final POJOCLASS object, final POJOCLASS updateObject)
			throws DMPPersistenceException {

		final String description = object.getDescription();

		updateObject.setDescription(description);

		super.updateObjectInternal(object, updateObject);
	}

	public final List<MEDIUMCLASS> getMediumObjects() {

		return getObjects().stream()
				.map(this::createMediumVariant)
				.collect(Collectors.toList());
	}

	public abstract MEDIUMCLASS createMediumVariant(final POJOCLASS object);
}
