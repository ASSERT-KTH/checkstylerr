/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TRawRenderPassDataResult implements org.apache.thrift.TBase<TRawRenderPassDataResult, TRawRenderPassDataResult._Fields>, java.io.Serializable, Cloneable, Comparable<TRawRenderPassDataResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRawRenderPassDataResult");

  private static final org.apache.thrift.protocol.TField NUM_PIXEL_CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_pixel_channels", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_PIXEL_SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_pixel_samples", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PIXELS_FIELD_DESC = new org.apache.thrift.protocol.TField("pixels", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_IDS__A_FIELD_DESC = new org.apache.thrift.protocol.TField("row_ids_A", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_IDS__B_FIELD_DESC = new org.apache.thrift.protocol.TField("row_ids_B", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TABLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_ids", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCUM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("accum_data", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCUM_DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("accum_depth", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRawRenderPassDataResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRawRenderPassDataResultTupleSchemeFactory();

  public int num_pixel_channels; // required
  public int num_pixel_samples; // required
  public java.nio.ByteBuffer pixels; // required
  public java.nio.ByteBuffer row_ids_A; // required
  public java.nio.ByteBuffer row_ids_B; // required
  public java.nio.ByteBuffer table_ids; // required
  public java.nio.ByteBuffer accum_data; // required
  public int accum_depth; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_PIXEL_CHANNELS((short)1, "num_pixel_channels"),
    NUM_PIXEL_SAMPLES((short)2, "num_pixel_samples"),
    PIXELS((short)3, "pixels"),
    ROW_IDS__A((short)4, "row_ids_A"),
    ROW_IDS__B((short)5, "row_ids_B"),
    TABLE_IDS((short)6, "table_ids"),
    ACCUM_DATA((short)7, "accum_data"),
    ACCUM_DEPTH((short)8, "accum_depth");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_PIXEL_CHANNELS
          return NUM_PIXEL_CHANNELS;
        case 2: // NUM_PIXEL_SAMPLES
          return NUM_PIXEL_SAMPLES;
        case 3: // PIXELS
          return PIXELS;
        case 4: // ROW_IDS__A
          return ROW_IDS__A;
        case 5: // ROW_IDS__B
          return ROW_IDS__B;
        case 6: // TABLE_IDS
          return TABLE_IDS;
        case 7: // ACCUM_DATA
          return ACCUM_DATA;
        case 8: // ACCUM_DEPTH
          return ACCUM_DEPTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_PIXEL_CHANNELS_ISSET_ID = 0;
  private static final int __NUM_PIXEL_SAMPLES_ISSET_ID = 1;
  private static final int __ACCUM_DEPTH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_PIXEL_CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("num_pixel_channels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_PIXEL_SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("num_pixel_samples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIXELS, new org.apache.thrift.meta_data.FieldMetaData("pixels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ROW_IDS__A, new org.apache.thrift.meta_data.FieldMetaData("row_ids_A", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ROW_IDS__B, new org.apache.thrift.meta_data.FieldMetaData("row_ids_B", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TABLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("table_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ACCUM_DATA, new org.apache.thrift.meta_data.FieldMetaData("accum_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ACCUM_DEPTH, new org.apache.thrift.meta_data.FieldMetaData("accum_depth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRawRenderPassDataResult.class, metaDataMap);
  }

  public TRawRenderPassDataResult() {
  }

  public TRawRenderPassDataResult(
    int num_pixel_channels,
    int num_pixel_samples,
    java.nio.ByteBuffer pixels,
    java.nio.ByteBuffer row_ids_A,
    java.nio.ByteBuffer row_ids_B,
    java.nio.ByteBuffer table_ids,
    java.nio.ByteBuffer accum_data,
    int accum_depth)
  {
    this();
    this.num_pixel_channels = num_pixel_channels;
    setNum_pixel_channelsIsSet(true);
    this.num_pixel_samples = num_pixel_samples;
    setNum_pixel_samplesIsSet(true);
    this.pixels = org.apache.thrift.TBaseHelper.copyBinary(pixels);
    this.row_ids_A = org.apache.thrift.TBaseHelper.copyBinary(row_ids_A);
    this.row_ids_B = org.apache.thrift.TBaseHelper.copyBinary(row_ids_B);
    this.table_ids = org.apache.thrift.TBaseHelper.copyBinary(table_ids);
    this.accum_data = org.apache.thrift.TBaseHelper.copyBinary(accum_data);
    this.accum_depth = accum_depth;
    setAccum_depthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRawRenderPassDataResult(TRawRenderPassDataResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_pixel_channels = other.num_pixel_channels;
    this.num_pixel_samples = other.num_pixel_samples;
    if (other.isSetPixels()) {
      this.pixels = org.apache.thrift.TBaseHelper.copyBinary(other.pixels);
    }
    if (other.isSetRow_ids_A()) {
      this.row_ids_A = org.apache.thrift.TBaseHelper.copyBinary(other.row_ids_A);
    }
    if (other.isSetRow_ids_B()) {
      this.row_ids_B = org.apache.thrift.TBaseHelper.copyBinary(other.row_ids_B);
    }
    if (other.isSetTable_ids()) {
      this.table_ids = org.apache.thrift.TBaseHelper.copyBinary(other.table_ids);
    }
    if (other.isSetAccum_data()) {
      this.accum_data = org.apache.thrift.TBaseHelper.copyBinary(other.accum_data);
    }
    this.accum_depth = other.accum_depth;
  }

  public TRawRenderPassDataResult deepCopy() {
    return new TRawRenderPassDataResult(this);
  }

  @Override
  public void clear() {
    setNum_pixel_channelsIsSet(false);
    this.num_pixel_channels = 0;
    setNum_pixel_samplesIsSet(false);
    this.num_pixel_samples = 0;
    this.pixels = null;
    this.row_ids_A = null;
    this.row_ids_B = null;
    this.table_ids = null;
    this.accum_data = null;
    setAccum_depthIsSet(false);
    this.accum_depth = 0;
  }

  public int getNum_pixel_channels() {
    return this.num_pixel_channels;
  }

  public TRawRenderPassDataResult setNum_pixel_channels(int num_pixel_channels) {
    this.num_pixel_channels = num_pixel_channels;
    setNum_pixel_channelsIsSet(true);
    return this;
  }

  public void unsetNum_pixel_channels() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_PIXEL_CHANNELS_ISSET_ID);
  }

  /** Returns true if field num_pixel_channels is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_pixel_channels() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_PIXEL_CHANNELS_ISSET_ID);
  }

  public void setNum_pixel_channelsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_PIXEL_CHANNELS_ISSET_ID, value);
  }

  public int getNum_pixel_samples() {
    return this.num_pixel_samples;
  }

  public TRawRenderPassDataResult setNum_pixel_samples(int num_pixel_samples) {
    this.num_pixel_samples = num_pixel_samples;
    setNum_pixel_samplesIsSet(true);
    return this;
  }

  public void unsetNum_pixel_samples() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_PIXEL_SAMPLES_ISSET_ID);
  }

  /** Returns true if field num_pixel_samples is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_pixel_samples() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_PIXEL_SAMPLES_ISSET_ID);
  }

  public void setNum_pixel_samplesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_PIXEL_SAMPLES_ISSET_ID, value);
  }

  public byte[] getPixels() {
    setPixels(org.apache.thrift.TBaseHelper.rightSize(pixels));
    return pixels == null ? null : pixels.array();
  }

  public java.nio.ByteBuffer bufferForPixels() {
    return org.apache.thrift.TBaseHelper.copyBinary(pixels);
  }

  public TRawRenderPassDataResult setPixels(byte[] pixels) {
    this.pixels = pixels == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(pixels.clone());
    return this;
  }

  public TRawRenderPassDataResult setPixels(java.nio.ByteBuffer pixels) {
    this.pixels = org.apache.thrift.TBaseHelper.copyBinary(pixels);
    return this;
  }

  public void unsetPixels() {
    this.pixels = null;
  }

  /** Returns true if field pixels is set (has been assigned a value) and false otherwise */
  public boolean isSetPixels() {
    return this.pixels != null;
  }

  public void setPixelsIsSet(boolean value) {
    if (!value) {
      this.pixels = null;
    }
  }

  public byte[] getRow_ids_A() {
    setRow_ids_A(org.apache.thrift.TBaseHelper.rightSize(row_ids_A));
    return row_ids_A == null ? null : row_ids_A.array();
  }

  public java.nio.ByteBuffer bufferForRow_ids_A() {
    return org.apache.thrift.TBaseHelper.copyBinary(row_ids_A);
  }

  public TRawRenderPassDataResult setRow_ids_A(byte[] row_ids_A) {
    this.row_ids_A = row_ids_A == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(row_ids_A.clone());
    return this;
  }

  public TRawRenderPassDataResult setRow_ids_A(java.nio.ByteBuffer row_ids_A) {
    this.row_ids_A = org.apache.thrift.TBaseHelper.copyBinary(row_ids_A);
    return this;
  }

  public void unsetRow_ids_A() {
    this.row_ids_A = null;
  }

  /** Returns true if field row_ids_A is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_ids_A() {
    return this.row_ids_A != null;
  }

  public void setRow_ids_AIsSet(boolean value) {
    if (!value) {
      this.row_ids_A = null;
    }
  }

  public byte[] getRow_ids_B() {
    setRow_ids_B(org.apache.thrift.TBaseHelper.rightSize(row_ids_B));
    return row_ids_B == null ? null : row_ids_B.array();
  }

  public java.nio.ByteBuffer bufferForRow_ids_B() {
    return org.apache.thrift.TBaseHelper.copyBinary(row_ids_B);
  }

  public TRawRenderPassDataResult setRow_ids_B(byte[] row_ids_B) {
    this.row_ids_B = row_ids_B == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(row_ids_B.clone());
    return this;
  }

  public TRawRenderPassDataResult setRow_ids_B(java.nio.ByteBuffer row_ids_B) {
    this.row_ids_B = org.apache.thrift.TBaseHelper.copyBinary(row_ids_B);
    return this;
  }

  public void unsetRow_ids_B() {
    this.row_ids_B = null;
  }

  /** Returns true if field row_ids_B is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_ids_B() {
    return this.row_ids_B != null;
  }

  public void setRow_ids_BIsSet(boolean value) {
    if (!value) {
      this.row_ids_B = null;
    }
  }

  public byte[] getTable_ids() {
    setTable_ids(org.apache.thrift.TBaseHelper.rightSize(table_ids));
    return table_ids == null ? null : table_ids.array();
  }

  public java.nio.ByteBuffer bufferForTable_ids() {
    return org.apache.thrift.TBaseHelper.copyBinary(table_ids);
  }

  public TRawRenderPassDataResult setTable_ids(byte[] table_ids) {
    this.table_ids = table_ids == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(table_ids.clone());
    return this;
  }

  public TRawRenderPassDataResult setTable_ids(java.nio.ByteBuffer table_ids) {
    this.table_ids = org.apache.thrift.TBaseHelper.copyBinary(table_ids);
    return this;
  }

  public void unsetTable_ids() {
    this.table_ids = null;
  }

  /** Returns true if field table_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_ids() {
    return this.table_ids != null;
  }

  public void setTable_idsIsSet(boolean value) {
    if (!value) {
      this.table_ids = null;
    }
  }

  public byte[] getAccum_data() {
    setAccum_data(org.apache.thrift.TBaseHelper.rightSize(accum_data));
    return accum_data == null ? null : accum_data.array();
  }

  public java.nio.ByteBuffer bufferForAccum_data() {
    return org.apache.thrift.TBaseHelper.copyBinary(accum_data);
  }

  public TRawRenderPassDataResult setAccum_data(byte[] accum_data) {
    this.accum_data = accum_data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(accum_data.clone());
    return this;
  }

  public TRawRenderPassDataResult setAccum_data(java.nio.ByteBuffer accum_data) {
    this.accum_data = org.apache.thrift.TBaseHelper.copyBinary(accum_data);
    return this;
  }

  public void unsetAccum_data() {
    this.accum_data = null;
  }

  /** Returns true if field accum_data is set (has been assigned a value) and false otherwise */
  public boolean isSetAccum_data() {
    return this.accum_data != null;
  }

  public void setAccum_dataIsSet(boolean value) {
    if (!value) {
      this.accum_data = null;
    }
  }

  public int getAccum_depth() {
    return this.accum_depth;
  }

  public TRawRenderPassDataResult setAccum_depth(int accum_depth) {
    this.accum_depth = accum_depth;
    setAccum_depthIsSet(true);
    return this;
  }

  public void unsetAccum_depth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCUM_DEPTH_ISSET_ID);
  }

  /** Returns true if field accum_depth is set (has been assigned a value) and false otherwise */
  public boolean isSetAccum_depth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCUM_DEPTH_ISSET_ID);
  }

  public void setAccum_depthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCUM_DEPTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NUM_PIXEL_CHANNELS:
      if (value == null) {
        unsetNum_pixel_channels();
      } else {
        setNum_pixel_channels((java.lang.Integer)value);
      }
      break;

    case NUM_PIXEL_SAMPLES:
      if (value == null) {
        unsetNum_pixel_samples();
      } else {
        setNum_pixel_samples((java.lang.Integer)value);
      }
      break;

    case PIXELS:
      if (value == null) {
        unsetPixels();
      } else {
        if (value instanceof byte[]) {
          setPixels((byte[])value);
        } else {
          setPixels((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ROW_IDS__A:
      if (value == null) {
        unsetRow_ids_A();
      } else {
        if (value instanceof byte[]) {
          setRow_ids_A((byte[])value);
        } else {
          setRow_ids_A((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ROW_IDS__B:
      if (value == null) {
        unsetRow_ids_B();
      } else {
        if (value instanceof byte[]) {
          setRow_ids_B((byte[])value);
        } else {
          setRow_ids_B((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TABLE_IDS:
      if (value == null) {
        unsetTable_ids();
      } else {
        if (value instanceof byte[]) {
          setTable_ids((byte[])value);
        } else {
          setTable_ids((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ACCUM_DATA:
      if (value == null) {
        unsetAccum_data();
      } else {
        if (value instanceof byte[]) {
          setAccum_data((byte[])value);
        } else {
          setAccum_data((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ACCUM_DEPTH:
      if (value == null) {
        unsetAccum_depth();
      } else {
        setAccum_depth((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_PIXEL_CHANNELS:
      return getNum_pixel_channels();

    case NUM_PIXEL_SAMPLES:
      return getNum_pixel_samples();

    case PIXELS:
      return getPixels();

    case ROW_IDS__A:
      return getRow_ids_A();

    case ROW_IDS__B:
      return getRow_ids_B();

    case TABLE_IDS:
      return getTable_ids();

    case ACCUM_DATA:
      return getAccum_data();

    case ACCUM_DEPTH:
      return getAccum_depth();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_PIXEL_CHANNELS:
      return isSetNum_pixel_channels();
    case NUM_PIXEL_SAMPLES:
      return isSetNum_pixel_samples();
    case PIXELS:
      return isSetPixels();
    case ROW_IDS__A:
      return isSetRow_ids_A();
    case ROW_IDS__B:
      return isSetRow_ids_B();
    case TABLE_IDS:
      return isSetTable_ids();
    case ACCUM_DATA:
      return isSetAccum_data();
    case ACCUM_DEPTH:
      return isSetAccum_depth();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TRawRenderPassDataResult)
      return this.equals((TRawRenderPassDataResult)that);
    return false;
  }

  public boolean equals(TRawRenderPassDataResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_num_pixel_channels = true;
    boolean that_present_num_pixel_channels = true;
    if (this_present_num_pixel_channels || that_present_num_pixel_channels) {
      if (!(this_present_num_pixel_channels && that_present_num_pixel_channels))
        return false;
      if (this.num_pixel_channels != that.num_pixel_channels)
        return false;
    }

    boolean this_present_num_pixel_samples = true;
    boolean that_present_num_pixel_samples = true;
    if (this_present_num_pixel_samples || that_present_num_pixel_samples) {
      if (!(this_present_num_pixel_samples && that_present_num_pixel_samples))
        return false;
      if (this.num_pixel_samples != that.num_pixel_samples)
        return false;
    }

    boolean this_present_pixels = true && this.isSetPixels();
    boolean that_present_pixels = true && that.isSetPixels();
    if (this_present_pixels || that_present_pixels) {
      if (!(this_present_pixels && that_present_pixels))
        return false;
      if (!this.pixels.equals(that.pixels))
        return false;
    }

    boolean this_present_row_ids_A = true && this.isSetRow_ids_A();
    boolean that_present_row_ids_A = true && that.isSetRow_ids_A();
    if (this_present_row_ids_A || that_present_row_ids_A) {
      if (!(this_present_row_ids_A && that_present_row_ids_A))
        return false;
      if (!this.row_ids_A.equals(that.row_ids_A))
        return false;
    }

    boolean this_present_row_ids_B = true && this.isSetRow_ids_B();
    boolean that_present_row_ids_B = true && that.isSetRow_ids_B();
    if (this_present_row_ids_B || that_present_row_ids_B) {
      if (!(this_present_row_ids_B && that_present_row_ids_B))
        return false;
      if (!this.row_ids_B.equals(that.row_ids_B))
        return false;
    }

    boolean this_present_table_ids = true && this.isSetTable_ids();
    boolean that_present_table_ids = true && that.isSetTable_ids();
    if (this_present_table_ids || that_present_table_ids) {
      if (!(this_present_table_ids && that_present_table_ids))
        return false;
      if (!this.table_ids.equals(that.table_ids))
        return false;
    }

    boolean this_present_accum_data = true && this.isSetAccum_data();
    boolean that_present_accum_data = true && that.isSetAccum_data();
    if (this_present_accum_data || that_present_accum_data) {
      if (!(this_present_accum_data && that_present_accum_data))
        return false;
      if (!this.accum_data.equals(that.accum_data))
        return false;
    }

    boolean this_present_accum_depth = true;
    boolean that_present_accum_depth = true;
    if (this_present_accum_depth || that_present_accum_depth) {
      if (!(this_present_accum_depth && that_present_accum_depth))
        return false;
      if (this.accum_depth != that.accum_depth)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + num_pixel_channels;

    hashCode = hashCode * 8191 + num_pixel_samples;

    hashCode = hashCode * 8191 + ((isSetPixels()) ? 131071 : 524287);
    if (isSetPixels())
      hashCode = hashCode * 8191 + pixels.hashCode();

    hashCode = hashCode * 8191 + ((isSetRow_ids_A()) ? 131071 : 524287);
    if (isSetRow_ids_A())
      hashCode = hashCode * 8191 + row_ids_A.hashCode();

    hashCode = hashCode * 8191 + ((isSetRow_ids_B()) ? 131071 : 524287);
    if (isSetRow_ids_B())
      hashCode = hashCode * 8191 + row_ids_B.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_ids()) ? 131071 : 524287);
    if (isSetTable_ids())
      hashCode = hashCode * 8191 + table_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccum_data()) ? 131071 : 524287);
    if (isSetAccum_data())
      hashCode = hashCode * 8191 + accum_data.hashCode();

    hashCode = hashCode * 8191 + accum_depth;

    return hashCode;
  }

  @Override
  public int compareTo(TRawRenderPassDataResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNum_pixel_channels()).compareTo(other.isSetNum_pixel_channels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_pixel_channels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_pixel_channels, other.num_pixel_channels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_pixel_samples()).compareTo(other.isSetNum_pixel_samples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_pixel_samples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_pixel_samples, other.num_pixel_samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPixels()).compareTo(other.isSetPixels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPixels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pixels, other.pixels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRow_ids_A()).compareTo(other.isSetRow_ids_A());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_ids_A()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_ids_A, other.row_ids_A);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRow_ids_B()).compareTo(other.isSetRow_ids_B());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_ids_B()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_ids_B, other.row_ids_B);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTable_ids()).compareTo(other.isSetTable_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_ids, other.table_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccum_data()).compareTo(other.isSetAccum_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccum_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accum_data, other.accum_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccum_depth()).compareTo(other.isSetAccum_depth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccum_depth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accum_depth, other.accum_depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRawRenderPassDataResult(");
    boolean first = true;

    sb.append("num_pixel_channels:");
    sb.append(this.num_pixel_channels);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_pixel_samples:");
    sb.append(this.num_pixel_samples);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pixels:");
    if (this.pixels == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.pixels, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_ids_A:");
    if (this.row_ids_A == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.row_ids_A, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_ids_B:");
    if (this.row_ids_B == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.row_ids_B, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_ids:");
    if (this.table_ids == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.table_ids, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accum_data:");
    if (this.accum_data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.accum_data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accum_depth:");
    sb.append(this.accum_depth);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRawRenderPassDataResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRawRenderPassDataResultStandardScheme getScheme() {
      return new TRawRenderPassDataResultStandardScheme();
    }
  }

  private static class TRawRenderPassDataResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRawRenderPassDataResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRawRenderPassDataResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_PIXEL_CHANNELS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_pixel_channels = iprot.readI32();
              struct.setNum_pixel_channelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_PIXEL_SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_pixel_samples = iprot.readI32();
              struct.setNum_pixel_samplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PIXELS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pixels = iprot.readBinary();
              struct.setPixelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_IDS__A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.row_ids_A = iprot.readBinary();
              struct.setRow_ids_AIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_IDS__B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.row_ids_B = iprot.readBinary();
              struct.setRow_ids_BIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TABLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_ids = iprot.readBinary();
              struct.setTable_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCUM_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accum_data = iprot.readBinary();
              struct.setAccum_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCUM_DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accum_depth = iprot.readI32();
              struct.setAccum_depthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRawRenderPassDataResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_PIXEL_CHANNELS_FIELD_DESC);
      oprot.writeI32(struct.num_pixel_channels);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_PIXEL_SAMPLES_FIELD_DESC);
      oprot.writeI32(struct.num_pixel_samples);
      oprot.writeFieldEnd();
      if (struct.pixels != null) {
        oprot.writeFieldBegin(PIXELS_FIELD_DESC);
        oprot.writeBinary(struct.pixels);
        oprot.writeFieldEnd();
      }
      if (struct.row_ids_A != null) {
        oprot.writeFieldBegin(ROW_IDS__A_FIELD_DESC);
        oprot.writeBinary(struct.row_ids_A);
        oprot.writeFieldEnd();
      }
      if (struct.row_ids_B != null) {
        oprot.writeFieldBegin(ROW_IDS__B_FIELD_DESC);
        oprot.writeBinary(struct.row_ids_B);
        oprot.writeFieldEnd();
      }
      if (struct.table_ids != null) {
        oprot.writeFieldBegin(TABLE_IDS_FIELD_DESC);
        oprot.writeBinary(struct.table_ids);
        oprot.writeFieldEnd();
      }
      if (struct.accum_data != null) {
        oprot.writeFieldBegin(ACCUM_DATA_FIELD_DESC);
        oprot.writeBinary(struct.accum_data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCUM_DEPTH_FIELD_DESC);
      oprot.writeI32(struct.accum_depth);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRawRenderPassDataResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRawRenderPassDataResultTupleScheme getScheme() {
      return new TRawRenderPassDataResultTupleScheme();
    }
  }

  private static class TRawRenderPassDataResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRawRenderPassDataResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRawRenderPassDataResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNum_pixel_channels()) {
        optionals.set(0);
      }
      if (struct.isSetNum_pixel_samples()) {
        optionals.set(1);
      }
      if (struct.isSetPixels()) {
        optionals.set(2);
      }
      if (struct.isSetRow_ids_A()) {
        optionals.set(3);
      }
      if (struct.isSetRow_ids_B()) {
        optionals.set(4);
      }
      if (struct.isSetTable_ids()) {
        optionals.set(5);
      }
      if (struct.isSetAccum_data()) {
        optionals.set(6);
      }
      if (struct.isSetAccum_depth()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetNum_pixel_channels()) {
        oprot.writeI32(struct.num_pixel_channels);
      }
      if (struct.isSetNum_pixel_samples()) {
        oprot.writeI32(struct.num_pixel_samples);
      }
      if (struct.isSetPixels()) {
        oprot.writeBinary(struct.pixels);
      }
      if (struct.isSetRow_ids_A()) {
        oprot.writeBinary(struct.row_ids_A);
      }
      if (struct.isSetRow_ids_B()) {
        oprot.writeBinary(struct.row_ids_B);
      }
      if (struct.isSetTable_ids()) {
        oprot.writeBinary(struct.table_ids);
      }
      if (struct.isSetAccum_data()) {
        oprot.writeBinary(struct.accum_data);
      }
      if (struct.isSetAccum_depth()) {
        oprot.writeI32(struct.accum_depth);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRawRenderPassDataResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.num_pixel_channels = iprot.readI32();
        struct.setNum_pixel_channelsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num_pixel_samples = iprot.readI32();
        struct.setNum_pixel_samplesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pixels = iprot.readBinary();
        struct.setPixelsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.row_ids_A = iprot.readBinary();
        struct.setRow_ids_AIsSet(true);
      }
      if (incoming.get(4)) {
        struct.row_ids_B = iprot.readBinary();
        struct.setRow_ids_BIsSet(true);
      }
      if (incoming.get(5)) {
        struct.table_ids = iprot.readBinary();
        struct.setTable_idsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accum_data = iprot.readBinary();
        struct.setAccum_dataIsSet(true);
      }
      if (incoming.get(7)) {
        struct.accum_depth = iprot.readI32();
        struct.setAccum_depthIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

