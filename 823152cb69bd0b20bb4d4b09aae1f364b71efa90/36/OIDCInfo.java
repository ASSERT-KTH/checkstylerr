/*
 * Pelion Device Management API
 * Pelion Device Management API build from the publicly defined API definitions.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * Represents OIDC specific attributes.
 */
@ApiModel(description = "Represents OIDC specific attributes.")

public class OIDCInfo implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("authorization_endpoint")
    private String authorizationEndpoint = null;

    @SerializedName("auto_enrollment")
    private Boolean autoEnrollment = null;

    @SerializedName("claim_mapping")
    private OIDCClaimMapping claimMapping = null;

    @SerializedName("client_id")
    private String clientId = null;

    @SerializedName("client_secret")
    private String clientSecret = null;

    @SerializedName("end_session_endpoint")
    private String endSessionEndpoint = null;

    @SerializedName("issuer")
    private String issuer = null;

    @SerializedName("jwks_uri")
    private String jwksUri = null;

    @SerializedName("keys")
    private List<IdpPublicKey> keys = null;

    @SerializedName("redirect_uri")
    private String redirectUri = null;

    @SerializedName("revocation_endpoint")
    private String revocationEndpoint = null;

    @SerializedName("scopes")
    private String scopes = null;

    @SerializedName("token_endpoint")
    private String tokenEndpoint = null;

    /**
     * One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the
     * client must use the POST mode.
     */
    @JsonAdapter(TokenRequestModeEnum.Adapter.class)
    public enum TokenRequestModeEnum {
        POST("POST"),

        GET("GET");

        private String value;

        TokenRequestModeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TokenRequestModeEnum fromValue(String text) {
            for (TokenRequestModeEnum b : TokenRequestModeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TokenRequestModeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TokenRequestModeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TokenRequestModeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TokenRequestModeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("token_request_mode")
    private TokenRequestModeEnum tokenRequestMode = TokenRequestModeEnum.POST;

    @SerializedName("token_response_path")
    private String tokenResponsePath = null;

    @SerializedName("userinfo_endpoint")
    private String userinfoEndpoint = null;

    public OIDCInfo authorizationEndpoint(String authorizationEndpoint) {
        this.authorizationEndpoint = authorizationEndpoint;
        return this;
    }

    /**
     * URL of the OAuth 2.0 authorization endpoint.
     * 
     * @return authorizationEndpoint
     **/
    @ApiModelProperty(value = "URL of the OAuth 2.0 authorization endpoint.")
    public String getAuthorizationEndpoint() {
        return authorizationEndpoint;
    }

    public void setAuthorizationEndpoint(String authorizationEndpoint) {
        this.authorizationEndpoint = authorizationEndpoint;
    }

    public OIDCInfo autoEnrollment(Boolean autoEnrollment) {
        this.autoEnrollment = autoEnrollment;
        return this;
    }

    /**
     * For future use.
     * 
     * @return autoEnrollment
     **/
    @ApiModelProperty(value = "For future use.")
    public Boolean isAutoEnrollment() {
        return autoEnrollment;
    }

    public void setAutoEnrollment(Boolean autoEnrollment) {
        this.autoEnrollment = autoEnrollment;
    }

    public OIDCInfo claimMapping(OIDCClaimMapping claimMapping) {
        this.claimMapping = claimMapping;
        return this;
    }

    /**
     * Mapping table for supporting custom OIDC claims.
     * 
     * @return claimMapping
     **/
    @ApiModelProperty(value = "Mapping table for supporting custom OIDC claims.")
    public OIDCClaimMapping getClaimMapping() {
        return claimMapping;
    }

    public void setClaimMapping(OIDCClaimMapping claimMapping) {
        this.claimMapping = claimMapping;
    }

    public OIDCInfo clientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Client ID needed to authenticate and gain access to identity provider&#39;s API.
     * 
     * @return clientId
     **/
    @ApiModelProperty(value = "Client ID needed to authenticate and gain access to identity provider's API.")
    public String getClientId() {
        return clientId;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    public OIDCInfo clientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Client secret needed to authenticate and gain access to identity provider&#39;s API.
     * 
     * @return clientSecret
     **/
    @ApiModelProperty(value = "Client secret needed to authenticate and gain access to identity provider's API.")
    public String getClientSecret() {
        return clientSecret;
    }

    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }

    public OIDCInfo endSessionEndpoint(String endSessionEndpoint) {
        this.endSessionEndpoint = endSessionEndpoint;
        return this;
    }

    /**
     * URL of the provider&#39;s end session endpoint.
     * 
     * @return endSessionEndpoint
     **/
    @ApiModelProperty(value = "URL of the provider's end session endpoint.")
    public String getEndSessionEndpoint() {
        return endSessionEndpoint;
    }

    public void setEndSessionEndpoint(String endSessionEndpoint) {
        this.endSessionEndpoint = endSessionEndpoint;
    }

    public OIDCInfo issuer(String issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Issuer of the identity provider.
     * 
     * @return issuer
     **/
    @ApiModelProperty(required = true, value = "Issuer of the identity provider.")
    public String getIssuer() {
        return issuer;
    }

    public void setIssuer(String issuer) {
        this.issuer = issuer;
    }

    public OIDCInfo jwksUri(String jwksUri) {
        this.jwksUri = jwksUri;
        return this;
    }

    /**
     * URL of the provider&#39;s JSON web key set document.
     * 
     * @return jwksUri
     **/
    @ApiModelProperty(value = "URL of the provider's JSON web key set document.")
    public String getJwksUri() {
        return jwksUri;
    }

    public void setJwksUri(String jwksUri) {
        this.jwksUri = jwksUri;
    }

    public OIDCInfo keys(List<IdpPublicKey> keys) {
        this.keys = keys;
        return this;
    }

    public OIDCInfo addKeysItem(IdpPublicKey keysItem) {
        if (this.keys == null) {
            this.keys = new ArrayList<IdpPublicKey>();
        }
        this.keys.add(keysItem);
        return this;
    }

    /**
     * Provider&#39;s public keys and key IDs used to sign ID tokens. PEM-encoded.
     * 
     * @return keys
     **/
    @ApiModelProperty(value = "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.")
    public List<IdpPublicKey> getKeys() {
        return keys;
    }

    public void setKeys(List<IdpPublicKey> keys) {
        this.keys = keys;
    }

    public OIDCInfo redirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }

    /**
     * The URI needed to authenticate and gain access to identity provider&#39;s API. Leave this empty to use the
     * default redirect URI.
     * 
     * @return redirectUri
     **/
    @ApiModelProperty(value = "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.")
    public String getRedirectUri() {
        return redirectUri;
    }

    public void setRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
    }

    public OIDCInfo revocationEndpoint(String revocationEndpoint) {
        this.revocationEndpoint = revocationEndpoint;
        return this;
    }

    /**
     * URL of the provider&#39;s token revocation endpoint.
     * 
     * @return revocationEndpoint
     **/
    @ApiModelProperty(value = "URL of the provider's token revocation endpoint.")
    public String getRevocationEndpoint() {
        return revocationEndpoint;
    }

    public void setRevocationEndpoint(String revocationEndpoint) {
        this.revocationEndpoint = revocationEndpoint;
    }

    public OIDCInfo scopes(String scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default
     * scopes are [&#39;openid profile email&#39;](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).
     * 
     * @return scopes
     **/
    @ApiModelProperty(example = "openid email",
                      value = "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).")
    public String getScopes() {
        return scopes;
    }

    public void setScopes(String scopes) {
        this.scopes = scopes;
    }

    public OIDCInfo tokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }

    /**
     * URL of the OAuth 2.0 authorization endpoint.
     * 
     * @return tokenEndpoint
     **/
    @ApiModelProperty(value = "URL of the OAuth 2.0 authorization endpoint.")
    public String getTokenEndpoint() {
        return tokenEndpoint;
    }

    public void setTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
    }

    public OIDCInfo tokenRequestMode(TokenRequestModeEnum tokenRequestMode) {
        this.tokenRequestMode = tokenRequestMode;
        return this;
    }

    /**
     * One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the
     * client must use the POST mode.
     * 
     * @return tokenRequestMode
     **/
    @ApiModelProperty(value = "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.")
    public TokenRequestModeEnum getTokenRequestMode() {
        return tokenRequestMode;
    }

    public void setTokenRequestMode(TokenRequestModeEnum tokenRequestMode) {
        this.tokenRequestMode = tokenRequestMode;
    }

    public OIDCInfo tokenResponsePath(String tokenResponsePath) {
        this.tokenResponsePath = tokenResponsePath;
        return this;
    }

    /**
     * Path to the standard data in the token response. Levels in the JSON structure must be separated by &#39;.&#39;
     * (dot) characters.
     * 
     * @return tokenResponsePath
     **/
    @ApiModelProperty(example = "oidc.data",
                      value = "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.")
    public String getTokenResponsePath() {
        return tokenResponsePath;
    }

    public void setTokenResponsePath(String tokenResponsePath) {
        this.tokenResponsePath = tokenResponsePath;
    }

    public OIDCInfo userinfoEndpoint(String userinfoEndpoint) {
        this.userinfoEndpoint = userinfoEndpoint;
        return this;
    }

    /**
     * URL of the OAuth 2.0 UserInfo endpoint.
     * 
     * @return userinfoEndpoint
     **/
    @ApiModelProperty(value = "URL of the OAuth 2.0 UserInfo endpoint.")
    public String getUserinfoEndpoint() {
        return userinfoEndpoint;
    }

    public void setUserinfoEndpoint(String userinfoEndpoint) {
        this.userinfoEndpoint = userinfoEndpoint;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OIDCInfo oiDCInfo = (OIDCInfo) o;
        return Objects.equals(this.authorizationEndpoint, oiDCInfo.authorizationEndpoint)
               && Objects.equals(this.autoEnrollment, oiDCInfo.autoEnrollment)
               && Objects.equals(this.claimMapping, oiDCInfo.claimMapping)
               && Objects.equals(this.clientId, oiDCInfo.clientId)
               && Objects.equals(this.clientSecret, oiDCInfo.clientSecret)
               && Objects.equals(this.endSessionEndpoint, oiDCInfo.endSessionEndpoint)
               && Objects.equals(this.issuer, oiDCInfo.issuer) && Objects.equals(this.jwksUri, oiDCInfo.jwksUri)
               && Objects.equals(this.keys, oiDCInfo.keys) && Objects.equals(this.redirectUri, oiDCInfo.redirectUri)
               && Objects.equals(this.revocationEndpoint, oiDCInfo.revocationEndpoint)
               && Objects.equals(this.scopes, oiDCInfo.scopes)
               && Objects.equals(this.tokenEndpoint, oiDCInfo.tokenEndpoint)
               && Objects.equals(this.tokenRequestMode, oiDCInfo.tokenRequestMode)
               && Objects.equals(this.tokenResponsePath, oiDCInfo.tokenResponsePath)
               && Objects.equals(this.userinfoEndpoint, oiDCInfo.userinfoEndpoint);
    }

    @Override
    public int hashCode() {
        return Objects.hash(authorizationEndpoint, autoEnrollment, claimMapping, clientId, clientSecret,
                            endSessionEndpoint, issuer, jwksUri, keys, redirectUri, revocationEndpoint, scopes,
                            tokenEndpoint, tokenRequestMode, tokenResponsePath, userinfoEndpoint);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OIDCInfo {\n");

        sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
        sb.append("    autoEnrollment: ").append(toIndentedString(autoEnrollment)).append("\n");
        sb.append("    claimMapping: ").append(toIndentedString(claimMapping)).append("\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
        sb.append("    endSessionEndpoint: ").append(toIndentedString(endSessionEndpoint)).append("\n");
        sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
        sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
        sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
        sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
        sb.append("    revocationEndpoint: ").append(toIndentedString(revocationEndpoint)).append("\n");
        sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
        sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
        sb.append("    tokenRequestMode: ").append(toIndentedString(tokenRequestMode)).append("\n");
        sb.append("    tokenResponsePath: ").append(toIndentedString(tokenResponsePath)).append("\n");
        sb.append("    userinfoEndpoint: ").append(toIndentedString(userinfoEndpoint)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
