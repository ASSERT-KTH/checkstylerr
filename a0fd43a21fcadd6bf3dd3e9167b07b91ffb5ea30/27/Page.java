// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/documentation.proto

package com.google.api;

/**
 * Protobuf type {@code google.api.Page}
 *
 * <pre>
 * Represents a documentation page. A page can contain subpages to represent
 * nested documentation set structure.
 * </pre>
 */
public  final class Page extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.api.Page)
    PageOrBuilder {
  // Use Page.newBuilder() to construct.
  private Page(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Page() {
    name_ = "";
    content_ = "";
    subpages_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Page(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            content_ = s;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              subpages_ = new java.util.ArrayList<com.google.api.Page>();
              mutable_bitField0_ |= 0x00000004;
            }
            subpages_.add(input.readMessage(com.google.api.Page.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        subpages_ = java.util.Collections.unmodifiableList(subpages_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.api.DocumentationProto.internal_static_google_api_Page_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.api.DocumentationProto.internal_static_google_api_Page_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.api.Page.class, com.google.api.Page.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   *     pages:
   *     - name: Tutorial
   *       content: (== include tutorial.md ==)
   *       subpages:
   *       - name: Java
   *         content: (== include tutorial_java.md ==)
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   *     pages:
   *     - name: Tutorial
   *       content: (== include tutorial.md ==)
   *       subpages:
   *       - name: Java
   *         content: (== include tutorial_java.md ==)
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONTENT_FIELD_NUMBER = 2;
  private volatile java.lang.Object content_;
  /**
   * <code>optional string content = 2;</code>
   *
   * <pre>
   * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
   * to include content from a Markdown file.
   * </pre>
   */
  public java.lang.String getContent() {
    java.lang.Object ref = content_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      content_ = s;
      return s;
    }
  }
  /**
   * <code>optional string content = 2;</code>
   *
   * <pre>
   * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
   * to include content from a Markdown file.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getContentBytes() {
    java.lang.Object ref = content_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      content_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SUBPAGES_FIELD_NUMBER = 3;
  private java.util.List<com.google.api.Page> subpages_;
  /**
   * <code>repeated .google.api.Page subpages = 3;</code>
   *
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   */
  public java.util.List<com.google.api.Page> getSubpagesList() {
    return subpages_;
  }
  /**
   * <code>repeated .google.api.Page subpages = 3;</code>
   *
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   */
  public java.util.List<? extends com.google.api.PageOrBuilder> 
      getSubpagesOrBuilderList() {
    return subpages_;
  }
  /**
   * <code>repeated .google.api.Page subpages = 3;</code>
   *
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   */
  public int getSubpagesCount() {
    return subpages_.size();
  }
  /**
   * <code>repeated .google.api.Page subpages = 3;</code>
   *
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   */
  public com.google.api.Page getSubpages(int index) {
    return subpages_.get(index);
  }
  /**
   * <code>repeated .google.api.Page subpages = 3;</code>
   *
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   */
  public com.google.api.PageOrBuilder getSubpagesOrBuilder(
      int index) {
    return subpages_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
    }
    if (!getContentBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, content_);
    }
    for (int i = 0; i < subpages_.size(); i++) {
      output.writeMessage(3, subpages_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
    }
    if (!getContentBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, content_);
    }
    for (int i = 0; i < subpages_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, subpages_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.api.Page parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.Page parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.api.Page parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.api.Page parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.api.Page parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.Page prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.api.Page}
   *
   * <pre>
   * Represents a documentation page. A page can contain subpages to represent
   * nested documentation set structure.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.Page)
      com.google.api.PageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.DocumentationProto.internal_static_google_api_Page_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.DocumentationProto.internal_static_google_api_Page_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.Page.class, com.google.api.Page.Builder.class);
    }

    // Construct using com.google.api.Page.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getSubpagesFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      content_ = "";

      if (subpagesBuilder_ == null) {
        subpages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        subpagesBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.api.DocumentationProto.internal_static_google_api_Page_descriptor;
    }

    public com.google.api.Page getDefaultInstanceForType() {
      return com.google.api.Page.getDefaultInstance();
    }

    public com.google.api.Page build() {
      com.google.api.Page result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.api.Page buildPartial() {
      com.google.api.Page result = new com.google.api.Page(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      result.content_ = content_;
      if (subpagesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          subpages_ = java.util.Collections.unmodifiableList(subpages_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.subpages_ = subpages_;
      } else {
        result.subpages_ = subpagesBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.api.Page) {
        return mergeFrom((com.google.api.Page)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.api.Page other) {
      if (other == com.google.api.Page.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getContent().isEmpty()) {
        content_ = other.content_;
        onChanged();
      }
      if (subpagesBuilder_ == null) {
        if (!other.subpages_.isEmpty()) {
          if (subpages_.isEmpty()) {
            subpages_ = other.subpages_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSubpagesIsMutable();
            subpages_.addAll(other.subpages_);
          }
          onChanged();
        }
      } else {
        if (!other.subpages_.isEmpty()) {
          if (subpagesBuilder_.isEmpty()) {
            subpagesBuilder_.dispose();
            subpagesBuilder_ = null;
            subpages_ = other.subpages_;
            bitField0_ = (bitField0_ & ~0x00000004);
            subpagesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getSubpagesFieldBuilder() : null;
          } else {
            subpagesBuilder_.addAllMessages(other.subpages_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.api.Page parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.api.Page) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     *     pages:
     *     - name: Tutorial
     *       content: (== include tutorial.md ==)
     *       subpages:
     *       - name: Java
     *         content: (== include tutorial_java.md ==)
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     *     pages:
     *     - name: Tutorial
     *       content: (== include tutorial.md ==)
     *       subpages:
     *       - name: Java
     *         content: (== include tutorial_java.md ==)
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     *     pages:
     *     - name: Tutorial
     *       content: (== include tutorial.md ==)
     *       subpages:
     *       - name: Java
     *         content: (== include tutorial_java.md ==)
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     *     pages:
     *     - name: Tutorial
     *       content: (== include tutorial.md ==)
     *       subpages:
     *       - name: Java
     *         content: (== include tutorial_java.md ==)
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     *     pages:
     *     - name: Tutorial
     *       content: (== include tutorial.md ==)
     *       subpages:
     *       - name: Java
     *         content: (== include tutorial_java.md ==)
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object content_ = "";
    /**
     * <code>optional string content = 2;</code>
     *
     * <pre>
     * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
     * to include content from a Markdown file.
     * </pre>
     */
    public java.lang.String getContent() {
      java.lang.Object ref = content_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        content_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string content = 2;</code>
     *
     * <pre>
     * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
     * to include content from a Markdown file.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getContentBytes() {
      java.lang.Object ref = content_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        content_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string content = 2;</code>
     *
     * <pre>
     * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
     * to include content from a Markdown file.
     * </pre>
     */
    public Builder setContent(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      content_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string content = 2;</code>
     *
     * <pre>
     * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
     * to include content from a Markdown file.
     * </pre>
     */
    public Builder clearContent() {
      
      content_ = getDefaultInstance().getContent();
      onChanged();
      return this;
    }
    /**
     * <code>optional string content = 2;</code>
     *
     * <pre>
     * The Markdown content of the page. You can use `&amp;#40;== include {path} ==&amp;#41;`
     * to include content from a Markdown file.
     * </pre>
     */
    public Builder setContentBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      content_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.api.Page> subpages_ =
      java.util.Collections.emptyList();
    private void ensureSubpagesIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        subpages_ = new java.util.ArrayList<com.google.api.Page>(subpages_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.google.api.Page, com.google.api.Page.Builder, com.google.api.PageOrBuilder> subpagesBuilder_;

    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public java.util.List<com.google.api.Page> getSubpagesList() {
      if (subpagesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(subpages_);
      } else {
        return subpagesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public int getSubpagesCount() {
      if (subpagesBuilder_ == null) {
        return subpages_.size();
      } else {
        return subpagesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public com.google.api.Page getSubpages(int index) {
      if (subpagesBuilder_ == null) {
        return subpages_.get(index);
      } else {
        return subpagesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder setSubpages(
        int index, com.google.api.Page value) {
      if (subpagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubpagesIsMutable();
        subpages_.set(index, value);
        onChanged();
      } else {
        subpagesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder setSubpages(
        int index, com.google.api.Page.Builder builderForValue) {
      if (subpagesBuilder_ == null) {
        ensureSubpagesIsMutable();
        subpages_.set(index, builderForValue.build());
        onChanged();
      } else {
        subpagesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder addSubpages(com.google.api.Page value) {
      if (subpagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubpagesIsMutable();
        subpages_.add(value);
        onChanged();
      } else {
        subpagesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder addSubpages(
        int index, com.google.api.Page value) {
      if (subpagesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubpagesIsMutable();
        subpages_.add(index, value);
        onChanged();
      } else {
        subpagesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder addSubpages(
        com.google.api.Page.Builder builderForValue) {
      if (subpagesBuilder_ == null) {
        ensureSubpagesIsMutable();
        subpages_.add(builderForValue.build());
        onChanged();
      } else {
        subpagesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder addSubpages(
        int index, com.google.api.Page.Builder builderForValue) {
      if (subpagesBuilder_ == null) {
        ensureSubpagesIsMutable();
        subpages_.add(index, builderForValue.build());
        onChanged();
      } else {
        subpagesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder addAllSubpages(
        java.lang.Iterable<? extends com.google.api.Page> values) {
      if (subpagesBuilder_ == null) {
        ensureSubpagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, subpages_);
        onChanged();
      } else {
        subpagesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder clearSubpages() {
      if (subpagesBuilder_ == null) {
        subpages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        subpagesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public Builder removeSubpages(int index) {
      if (subpagesBuilder_ == null) {
        ensureSubpagesIsMutable();
        subpages_.remove(index);
        onChanged();
      } else {
        subpagesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public com.google.api.Page.Builder getSubpagesBuilder(
        int index) {
      return getSubpagesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public com.google.api.PageOrBuilder getSubpagesOrBuilder(
        int index) {
      if (subpagesBuilder_ == null) {
        return subpages_.get(index);  } else {
        return subpagesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public java.util.List<? extends com.google.api.PageOrBuilder> 
         getSubpagesOrBuilderList() {
      if (subpagesBuilder_ != null) {
        return subpagesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(subpages_);
      }
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public com.google.api.Page.Builder addSubpagesBuilder() {
      return getSubpagesFieldBuilder().addBuilder(
          com.google.api.Page.getDefaultInstance());
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public com.google.api.Page.Builder addSubpagesBuilder(
        int index) {
      return getSubpagesFieldBuilder().addBuilder(
          index, com.google.api.Page.getDefaultInstance());
    }
    /**
     * <code>repeated .google.api.Page subpages = 3;</code>
     *
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     */
    public java.util.List<com.google.api.Page.Builder> 
         getSubpagesBuilderList() {
      return getSubpagesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.google.api.Page, com.google.api.Page.Builder, com.google.api.PageOrBuilder> 
        getSubpagesFieldBuilder() {
      if (subpagesBuilder_ == null) {
        subpagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.google.api.Page, com.google.api.Page.Builder, com.google.api.PageOrBuilder>(
                subpages_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        subpages_ = null;
      }
      return subpagesBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.api.Page)
  }

  // @@protoc_insertion_point(class_scope:google.api.Page)
  private static final com.google.api.Page DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.api.Page();
  }

  public static com.google.api.Page getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Page>
      PARSER = new com.google.protobuf.AbstractParser<Page>() {
    public Page parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new Page(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<Page> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Page> getParserForType() {
    return PARSER;
  }

  public com.google.api.Page getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

