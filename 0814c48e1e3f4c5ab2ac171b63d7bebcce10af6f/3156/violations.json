[
    {
        "line": "3",
        "severity": "warning",
        "message": "Line has trailing spaces.",
        "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
    },
    {
        "line": "7",
        "severity": "warning",
        "message": "Line has trailing spaces.",
        "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
    },
    {
        "line": "9",
        "severity": "warning",
        "message": "Line has trailing spaces.",
        "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
    },
    {
        "line": "111",
        "column": "9",
        "severity": "warning",
        "message": "Missing a Javadoc comment.",
        "source": "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck"
    },
    {
        "line": "117",
        "column": "9",
        "severity": "warning",
        "message": "Missing a Javadoc comment.",
        "source": "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck"
    },
    {
        "line": "123",
        "column": "9",
        "severity": "warning",
        "message": "Missing a Javadoc comment.",
        "source": "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck"
    },
    {
        "line": "136",
        "column": "9",
        "severity": "warning",
        "message": "';' is preceded with whitespace.",
        "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
    },
    {
        "line": "148",
        "column": "5",
        "severity": "warning",
        "message": "Missing a Javadoc comment.",
        "source": "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck"
    },
    {
        "line": "152",
        "column": "5",
        "severity": "warning",
        "message": "Missing a Javadoc comment.",
        "source": "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck"
    },
    {
        "line": "153",
        "column": "5",
        "severity": "warning",
        "message": "Missing a Javadoc comment.",
        "source": "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck"
    },
    {
        "line": "253",
        "column": "53",
        "severity": "warning",
        "message": "',' is not followed by whitespace.",
        "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
    },
    {
        "line": "272",
        "column": "45",
        "severity": "warning",
        "message": "',' is not followed by whitespace.",
        "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
    },
    {
        "line": "318",
        "column": "88",
        "severity": "warning",
        "message": "',' is not followed by whitespace.",
        "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
    },
    {
        "line": "381",
        "column": "119",
        "severity": "warning",
        "message": "Use a single space to separate non-whitespace characters.",
        "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
    },
    {
        "line": "410",
        "severity": "warning",
        "message": "Line has trailing spaces.",
        "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
    },
    {
        "line": "445",
        "column": "108",
        "severity": "warning",
        "message": "Use a single space to separate non-whitespace characters.",
        "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
    },
    {
        "line": "467",
        "severity": "warning",
        "message": "Line is longer than 200 characters (found 219).",
        "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
    },
    {
        "line": "531",
        "column": "49",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "556",
        "column": "49",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "559",
        "column": "56",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "618",
        "column": "63",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "662",
        "column": "59",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "697",
        "column": "59",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "738",
        "column": "59",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    },
    {
        "line": "779",
        "column": "59",
        "severity": "warning",
        "message": "String literal expressions should be on the left side of an equalsIgnoreCase comparison.",
        "source": "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck"
    }
]