/*
 * This file is generated by jOOQ.
 */
package com.selfxdsd.storage.generated.jooq.tables;


import com.selfxdsd.storage.generated.jooq.Keys;
import com.selfxdsd.storage.generated.jooq.SelfXdsd;
import com.selfxdsd.storage.generated.jooq.tables.records.SlfUsersXdsdRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlfUsersXdsd extends TableImpl<SlfUsersXdsdRecord> {

    private static final long serialVersionUID = 824477473;

    /**
     * The reference instance of <code>self_xdsd.slf_users_xdsd</code>
     */
    public static final SlfUsersXdsd SLF_USERS_XDSD = new SlfUsersXdsd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlfUsersXdsdRecord> getRecordType() {
        return SlfUsersXdsdRecord.class;
    }

    /**
     * The column <code>self_xdsd.slf_users_xdsd.username</code>.
     */
    public final TableField<SlfUsersXdsdRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_users_xdsd.provider</code>.
     */
    public final TableField<SlfUsersXdsdRecord, String> PROVIDER = createField(DSL.name("provider"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_users_xdsd.email</code>.
     */
    public final TableField<SlfUsersXdsdRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>self_xdsd.slf_users_xdsd.access_token</code>.
     */
    public final TableField<SlfUsersXdsdRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * Create a <code>self_xdsd.slf_users_xdsd</code> table reference
     */
    public SlfUsersXdsd() {
        this(DSL.name("slf_users_xdsd"), null);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_users_xdsd</code> table reference
     */
    public SlfUsersXdsd(String alias) {
        this(DSL.name(alias), SLF_USERS_XDSD);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_users_xdsd</code> table reference
     */
    public SlfUsersXdsd(Name alias) {
        this(alias, SLF_USERS_XDSD);
    }

    private SlfUsersXdsd(Name alias, Table<SlfUsersXdsdRecord> aliased) {
        this(alias, aliased, null);
    }

    private SlfUsersXdsd(Name alias, Table<SlfUsersXdsdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SlfUsersXdsd(Table<O> child, ForeignKey<O, SlfUsersXdsdRecord> key) {
        super(child, key, SLF_USERS_XDSD);
    }

    @Override
    public Schema getSchema() {
        return SelfXdsd.SELF_XDSD;
    }

    @Override
    public UniqueKey<SlfUsersXdsdRecord> getPrimaryKey() {
        return Keys.KEY_SLF_USERS_XDSD_PRIMARY;
    }

    @Override
    public List<UniqueKey<SlfUsersXdsdRecord>> getKeys() {
        return Arrays.<UniqueKey<SlfUsersXdsdRecord>>asList(Keys.KEY_SLF_USERS_XDSD_PRIMARY);
    }

    @Override
    public SlfUsersXdsd as(String alias) {
        return new SlfUsersXdsd(DSL.name(alias), this);
    }

    @Override
    public SlfUsersXdsd as(Name alias) {
        return new SlfUsersXdsd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfUsersXdsd rename(String name) {
        return new SlfUsersXdsd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfUsersXdsd rename(Name name) {
        return new SlfUsersXdsd(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
