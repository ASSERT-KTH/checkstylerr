/*
 * This file is generated by jOOQ.
 */
package com.selfxdsd.storage.generated.jooq.tables;


import com.selfxdsd.storage.generated.jooq.Keys;
import com.selfxdsd.storage.generated.jooq.SelfXdsd;
import com.selfxdsd.storage.generated.jooq.tables.records.SlfContributorsXdsdRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlfContributorsXdsd extends TableImpl<SlfContributorsXdsdRecord> {

    private static final long serialVersionUID = 385630579;

    /**
     * The reference instance of <code>self_xdsd.slf_contributors_xdsd</code>
     */
    public static final SlfContributorsXdsd SLF_CONTRIBUTORS_XDSD = new SlfContributorsXdsd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlfContributorsXdsdRecord> getRecordType() {
        return SlfContributorsXdsdRecord.class;
    }

    /**
     * The column <code>self_xdsd.slf_contributors_xdsd.username</code>.
     */
    public final TableField<SlfContributorsXdsdRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_contributors_xdsd.provider</code>.
     */
    public final TableField<SlfContributorsXdsdRecord, String> PROVIDER = createField(DSL.name("provider"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>self_xdsd.slf_contributors_xdsd</code> table reference
     */
    public SlfContributorsXdsd() {
        this(DSL.name("slf_contributors_xdsd"), null);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_contributors_xdsd</code> table reference
     */
    public SlfContributorsXdsd(String alias) {
        this(DSL.name(alias), SLF_CONTRIBUTORS_XDSD);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_contributors_xdsd</code> table reference
     */
    public SlfContributorsXdsd(Name alias) {
        this(alias, SLF_CONTRIBUTORS_XDSD);
    }

    private SlfContributorsXdsd(Name alias, Table<SlfContributorsXdsdRecord> aliased) {
        this(alias, aliased, null);
    }

    private SlfContributorsXdsd(Name alias, Table<SlfContributorsXdsdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SlfContributorsXdsd(Table<O> child, ForeignKey<O, SlfContributorsXdsdRecord> key) {
        super(child, key, SLF_CONTRIBUTORS_XDSD);
    }

    @Override
    public Schema getSchema() {
        return SelfXdsd.SELF_XDSD;
    }

    @Override
    public UniqueKey<SlfContributorsXdsdRecord> getPrimaryKey() {
        return Keys.KEY_SLF_CONTRIBUTORS_XDSD_PRIMARY;
    }

    @Override
    public List<UniqueKey<SlfContributorsXdsdRecord>> getKeys() {
        return Arrays.<UniqueKey<SlfContributorsXdsdRecord>>asList(Keys.KEY_SLF_CONTRIBUTORS_XDSD_PRIMARY);
    }

    @Override
    public SlfContributorsXdsd as(String alias) {
        return new SlfContributorsXdsd(DSL.name(alias), this);
    }

    @Override
    public SlfContributorsXdsd as(Name alias) {
        return new SlfContributorsXdsd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfContributorsXdsd rename(String name) {
        return new SlfContributorsXdsd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfContributorsXdsd rename(Name name) {
        return new SlfContributorsXdsd(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
