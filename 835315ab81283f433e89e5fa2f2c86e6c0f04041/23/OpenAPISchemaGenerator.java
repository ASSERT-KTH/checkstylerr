package com.creditdatamw.labs.kapenta.openapi;

import com.creditdatamw.labs.kapenta.OutputType;
import com.creditdatamw.labs.kapenta.config.ApiConfiguration;
import com.creditdatamw.labs.kapenta.config.Method;
import com.creditdatamw.labs.kapenta.config.ReportConfiguration;
import com.creditdatamw.labs.kapenta.http.Reports;
import org.openapi4j.parser.model.v3.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generates an OpenAPI v3 Schema from the kapenta configuration
 */
public class OpenAPISchemaGenerator {
    private final String baseUri;
    private final OpenApi3 openApiSchema;

    public OpenAPISchemaGenerator(ApiConfiguration apiConfiguration) {
        this.baseUri = apiConfiguration.getApiRoot();
        this.openApiSchema = new OpenApi3();
        this.openApiSchema.setOpenapi("3.0.0");
        this.addInfo(apiConfiguration);
        this.addMetaPaths(apiConfiguration);
        apiConfiguration.getReports()
            .forEach(this::addReportToSchema);
    }

    public String getBaseUri() {
        return baseUri;
    }

    public OpenApi3 getGeneratedSchema() {
        return this.openApiSchema;
    }

    private void addInfo(ApiConfiguration apiConfiguration) {
        Info info = new Info();
        info.setTitle("kapenta OpenAPI -- autogenerated");
        info.setDescription("kapenta OpenAPI -- autogenerated");
        info.setVersion("v1.0.0");

        openApiSchema.setInfo(info);
    }

    private void addMetaPaths(ApiConfiguration apiConfiguration) {
        Path reportsJsonPath = new Path();
        Operation getOperation = new Operation();
        Response defaultResponse = new Response();

        MediaType jsonMediaType = new MediaType();

        Schema schema = new Schema();
        schema.setType("array");
        schema.setTitle("reports");
        schema.setDescription("Array or reports");
        jsonMediaType.setSchema(schema);

        defaultResponse.setContentMediaType("application/json", jsonMediaType);

        getOperation.setOperationId("kapenta:get-reports-list");
        getOperation.setSummary("List of Reports available on the API");
        getOperation.setDescription("List of Reports available on the API");

        getOperation.setResponse("default", defaultResponse);
        reportsJsonPath.setGet(getOperation);

        openApiSchema.setPath(getBaseUri().concat("/reports.json"), reportsJsonPath);
    }

    private void addReportToSchema(ReportConfiguration reportConfig) {
        openApiSchema.setPath(getBaseUri().concat(reportConfig.getPath()), reportConfigToPath(reportConfig));
    }

    private Path reportConfigToPath(ReportConfiguration reportConfig) {
        Path p = new Path();
        final Method method = reportConfig.getMethods();
        Response response = new Response();

        Map<String, MediaType> contentMediaTypes = new HashMap<>();
        reportConfig.outputTypes().forEach(outputType -> {
            MediaType mediaType = new MediaType();
            Schema schema = new Schema();
            if (outputType == OutputType.PDF) {
                schema.setType("binary");
            } else {
                schema.setType("string");
            }
            mediaType.setSchema(schema);
            contentMediaTypes.put(outputType.getContentType(), mediaType);
        });

        response.setContentMediaTypes(contentMediaTypes);

        List<Parameter> requestParameters = new ArrayList<>();
        reportConfig.getParameters().forEach(parameDef -> {
            Parameter parameter = new Parameter();

            parameter.setName(parameDef.getName());
            parameter.setIn("query");

            Schema schema = new Schema();
            schema.setTitle(parameDef.getName());
            schema.setDefault(parameDef.getDefaultValue());
            schema.setType(parameDef.getType().getSimpleName());
            parameter.setSchema(schema);

            requestParameters.add(parameter);
        });


        Operation postOperation;
        Operation getOperation;

        if (method.isPost()) {
            postOperation = new Operation();
            postOperation.setOperationId(String.format("report-%s:post",
                reportConfig.getPath().replaceFirst("/", "")
                    .replaceAll("/","-")));

            postOperation.setParameters(requestParameters);
            postOperation.setResponse("default", response);
            p.setPost(postOperation);
        }

        if (method.isGet()) {
            getOperation = new Operation();
            getOperation.setOperationId(String.format("report-%s:get",
                reportConfig.getPath().replaceFirst("/", "")
                    .replaceAll("/","-")));

            getOperation.setParameters(requestParameters);
            getOperation.setResponse("default", response);
            p.setGet(getOperation);
        }

        return p;
    }
}
