// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [SubtenantUserDao]
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;

/**
 * Data Access Object (DAO) for subtenant users.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for subtenant users.")
public abstract class AbstractSubtenantUserDao extends AbstractModelDao<SubtenantUser>
                                               implements CrudDao<SubtenantUser> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantUserDao() throws MbedCloudException {
        super();
    }

    /**
     * Adds a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    @Override
    public SubtenantUser create() throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).createSubtenantUser(getModel()));
        return getModel();
    }

    /**
     * Adds a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    @Override
    public SubtenantUser create(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        setModel(subtenantUser);
        return create();
    }

    /**
     * Adds a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantUser(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param action
     *            Create or invite user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    public SubtenantUser create(@Nullable @DefaultValue("create") String action) throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).createSubtenantUser(action, getModel()));
        return getModel();
    }

    /**
     * Adds a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantUser(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param action
     *            Create or invite user.
     * @param accountId
     *            The ID of the account.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return an added subtenant user
     */
    public SubtenantUser create(@Nullable @DefaultValue("create") String action,
                                @NonNull String accountId) throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).createSubtenantUser(action, accountId, getModel()));
        return getModel();
    }

    /**
     * Deletes a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteSubtenantUser(getModel());
    }

    /**
     * Deletes a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        setModel(subtenantUser);
        delete();
    }

    /**
     * Deletes a subtenant user.
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantUser(String, String)}
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the user to be deleted.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void delete(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteSubtenantUser(accountId, id);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected SubtenantUser instantiateModel() {
        return new SubtenantUser();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Accounts(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Accounts(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Accounts(context);
    }

    /**
     * Gets a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#readSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    @Override
    public SubtenantUser read() throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).readSubtenantUser(getModel()));
        return getModel();
    }

    /**
     * Gets a subtenant user.
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readSubtenantUser(String, String)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    public SubtenantUser read(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).readSubtenantUser(accountId, id));
        return getModel();
    }

    /**
     * Modifies a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    @Override
    public SubtenantUser update() throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).updateSubtenantUser(getModel()));
        return getModel();
    }

    /**
     * Modifies a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantUser(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return something
     */
    @Override
    public SubtenantUser update(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        setModel(subtenantUser);
        return update();
    }

    /**
     * Modifies a subtenant user.
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantUser(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     * @return an updated subtenant user
     */
    public SubtenantUser update(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        setModel(((Accounts) getModuleOrThrow()).updateSubtenantUser(accountId, id, getModel()));
        return getModel();
    }

    /**
     * Validate the user email.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#validateEmail(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void validateEmail() throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).validateEmail(getModel());
    }

    /**
     * Validate the user email.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#validateEmail(String, String)}
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the user whose email is validated.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void validateEmail(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).validateEmail(accountId, id);
    }
}
