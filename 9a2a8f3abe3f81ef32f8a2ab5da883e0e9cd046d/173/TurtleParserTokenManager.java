/* TurtleParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TurtleParserTokenManager.java */
package org.semanticweb.owlapi.rdf.turtle.parser;

/**
 * Token Manager.
 */
@SuppressWarnings("all")
class TurtleParserTokenManager implements TurtleParserConstants {

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        "\50", "\51", "\133", "\135", "\54", "\56", "\73", "\100\160\162\145\146\151\170",
        "\136\136", "\100\142\141\163\145", "\100", "\141", null, "\137\72", "\164\162\165\145",
        "\146\141\154\163\145", "\123\105\114\105\103\124", "\127\110\105\122\105",
        "\106\111\114\124\105\122", null, null, null, null, null, null, null, null, null, null,
        null,};
    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
        "DEFAULT",
        "IN_STRING",
        "IN_SINGLESTRING",
        "IN_LONG_STRING",
        "IN_LONG_SINGLESTRING",
    };
    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, 1, -1, -1, 0, 2, -1, -1, 0, 3, -1, -1, 0, 4, -1, -1, 0, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
    };
    static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec3 = {
        0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x5e00000000ffffffL
    };
    static final long[] jjbitVec4 = {
        0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec5 = {
        0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec6 = {
        0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec7 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
    };
    static final long[] jjbitVec8 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
    };
    static final long[] jjbitVec9 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
    };
    static final long[] jjbitVec10 = {
        0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
    };
    static final long[] jjbitVec11 = {
        0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec12 = {
        0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec13 = {
        0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final int[] jjnextStates = {
        22, 23, 24, 26, 29, 30, 32, 22, 23, 34, 39, 41, 23, 24, 26, 29,
        30, 32, 44, 45, 46, 47, 48, 49, 53, 54, 3, 4, 9, 10, 27, 28,
        37, 38,
    };
    static final long[] jjtoToken = {
        0x1ffffffffe22201L,
    };
    static final long[] jjtoSkip = {
        0x3eL,
    };
    static final long[] jjtoSpecial = {
        0x0L,
    };
    static final long[] jjtoMore = {
        0x1dddc0L,
    };
    private final int[] jjrounds = new int[56];
    private final int[] jjstateSet = new int[2 * 56];
    private final StringBuilder jjimage = new StringBuilder();
    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;
    protected JavaCharStream input_stream;
    protected int curChar;
    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;

    public TurtleParserTokenManager(JavaCharStream stream) {

        if (JavaCharStream.staticFlag) {
            throw new RuntimeException(
                "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }

        input_stream = stream;
    }

    public TurtleParserTokenManager(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 47:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec9[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec10[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec11[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec12[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec13[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 47:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec9[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec10[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L) {
                    return true;
                }
                return false;
        }
    }

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x4000000000L) != 0L) {
                    return 56;
                }
                if ((active0 & 0x3e0000000000L) != 0L) {
                    jjmatchedKind = 46;
                    return 56;
                }
                if ((active0 & 0x100000000L) != 0L) {
                    return 57;
                }
                if ((active0 & 0x20000000L) != 0L) {
                    return 6;
                }
                if ((active0 & 0x10000000000L) != 0L) {
                    jjmatchedKind = 49;
                    return 16;
                }
                return -1;
            case 1:
                if ((active0 & 0x3e0000000000L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 1;
                    return 56;
                }
                if ((active0 & 0x10000000000L) != 0L) {
                    return 17;
                }
                return -1;
            case 2:
                if ((active0 & 0x3e0000000000L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 2;
                    return 56;
                }
                return -1;
            case 3:
                if ((active0 & 0x20000000000L) != 0L) {
                    return 56;
                }
                if ((active0 & 0x3c0000000000L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 3;
                    return 56;
                }
                return -1;
            case 4:
                if ((active0 & 0x140000000000L) != 0L) {
                    return 56;
                }
                if ((active0 & 0x280000000000L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 4;
                    return 56;
                }
                return -1;
            case 5:
                if ((active0 & 0x280000000000L) != 0L) {
                    return 56;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 34:
                jjmatchedKind = 6;
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 39:
                jjmatchedKind = 10;
                return jjMoveStringLiteralDfa1_0(0x40000L);
            case 40:
                return jjStopAtPos(0, 27);
            case 41:
                return jjStopAtPos(0, 28);
            case 44:
                return jjStopAtPos(0, 31);
            case 46:
                return jjStartNfaWithStates_0(0, 32, 57);
            case 59:
                return jjStopAtPos(0, 33);
            case 64:
                jjmatchedKind = 37;
                return jjMoveStringLiteralDfa1_0(0x1400000000L);
            case 70:
                return jjMoveStringLiteralDfa1_0(0x200000000000L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x80000000000L);
            case 87:
                return jjMoveStringLiteralDfa1_0(0x100000000000L);
            case 91:
                return jjStartNfaWithStates_0(0, 29, 6);
            case 93:
                return jjStopAtPos(0, 30);
            case 94:
                return jjMoveStringLiteralDfa1_0(0x800000000L);
            case 95:
                return jjMoveStringLiteralDfa1_0(0x10000000000L);
            case 97:
                return jjStartNfaWithStates_0(0, 38, 56);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x40000000000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x20000000000L);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 34:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
            case 39:
                return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
            case 58:
                if ((active0 & 0x10000000000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 40, 17);
                }
                break;
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
            case 72:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
            case 73:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
            case 94:
                if ((active0 & 0x800000000L) != 0L) {
                    return jjStopAtPos(1, 35);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
            case 112:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 34:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStopAtPos(2, 14);
                }
                break;
            case 39:
                if ((active0 & 0x40000L) != 0L) {
                    return jjStopAtPos(2, 18);
                }
                break;
            case 69:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
            case 76:
                return jjMoveStringLiteralDfa3_0(active0, 0x280000000000L);
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
            case 82:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
            case 84:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
            case 101:
                if ((active0 & 0x20000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 41, 56);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x41000000000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(2, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
            case 69:
                if ((active0 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 44, 56);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
            case 101:
                if ((active0 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(4, 36);
                } else if ((active0 & 0x40000000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 42, 56);
                }
                break;
            case 102:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(3, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 82:
                if ((active0 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 45, 56);
                }
                break;
            case 84:
                if ((active0 & 0x80000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 43, 56);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(4, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 120:
                if ((active0 & 0x400000000L) != 0L) {
                    return jjStopAtPos(6, 34);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 56;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 57:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 25) {
                                    kind = 25;
                                }
                                {
                                    jjCheckNAdd(40);
                                }
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(35, 36);
                            }
                            break;
                        case 16:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(12, 13);
                            } else if (curChar == 58) {
                                jjstateSet[jjnewStateCnt++] = 17;
                            }
                            if ((0x3ff200000000000L & l) != 0L) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                            }
                            break;
                        case 0:
                            if ((0x3ff200000000000L & l) != 0L) {
                                if (kind > 53) {
                                    kind = 53;
                                }
                            } else if (curChar == 58) {
                                if (kind > 48) {
                                    kind = 48;
                                }
                                {
                                    jjCheckNAdd(50);
                                }
                            } else if (curChar == 46) {
                                jjCheckNAddTwoStates(35, 40);
                            } else if (curChar == 60) {
                                jjCheckNAddTwoStates(9, 10);
                            } else if (curChar == 35) {
                                if (kind > 5) {
                                    kind = 5;
                                }
                                {
                                    jjCheckNAdd(1);
                                }
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 22) {
                                    kind = 22;
                                }
                                {
                                    jjCheckNAddStates(0, 6);
                                }
                            } else if ((0x280000000000L & l) != 0L) {
                                jjCheckNAddStates(7, 11);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAddTwoStates(12, 13);
                                }
                            }
                            break;
                        case 56:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(53, 54);
                            } else if (curChar == 58) {
                                jjCheckNAdd(50);
                            }
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(47, 48);
                            } else if (curChar == 58) {
                                if (kind > 48) {
                                    kind = 48;
                                }
                            }
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            if ((0x3ff200000000000L & l) != 0L) {
                                if (kind > 51) {
                                    kind = 51;
                                }
                            }
                            if ((0x3ff200000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 49;
                            }
                            if ((0x3ff200000000000L & l) != 0L) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                            }
                            if ((0x3ff200000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 46;
                            }
                            break;
                        case 1:
                            if ((0xfffffffffffffbffL & l) == 0L) {
                                break;
                            }
                            if (kind > 5) {
                                kind = 5;
                            }
                        {
                            jjCheckNAdd(1);
                        }
                        break;
                        case 3:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(4);
                            }
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 26) {
                                kind = 26;
                            }
                        {
                            jjCheckNAdd(4);
                        }
                        break;
                        case 8:
                            if (curChar == 60) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 9:
                            if ((0xbffffffeffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 10:
                            if (curChar == 62 && kind > 47) {
                                kind = 47;
                            }
                            break;
                        case 11:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                        {
                            jjCheckNAddTwoStates(12, 13);
                        }
                        break;
                        case 12:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            break;
                        case 13:
                            if ((0x3ff200000000000L & l) != 0L && kind > 49) {
                                kind = 49;
                            }
                            break;
                        case 14:
                            if ((0x3ff200000000000L & l) != 0L && kind > 53) {
                                kind = 53;
                            }
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 55) {
                                kind = 55;
                            }
                        {
                            jjCheckNAddTwoStates(18, 19);
                        }
                        break;
                        case 18:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(18, 19);
                            }
                            break;
                        case 19:
                            if ((0x3ff200000000000L & l) != 0L && kind > 55) {
                                kind = 55;
                            }
                            break;
                        case 21:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 22) {
                                kind = 22;
                            }
                        {
                            jjCheckNAddStates(0, 6);
                        }
                        break;
                        case 22:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 23) {
                                kind = 23;
                            }
                        {
                            jjCheckNAdd(22);
                        }
                        break;
                        case 23:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddStates(12, 14);
                            }
                            break;
                        case 24:
                            if (curChar == 46) {
                                jjCheckNAddTwoStates(25, 26);
                            }
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(25, 26);
                            }
                            break;
                        case 27:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(28);
                            }
                            break;
                        case 28:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 24) {
                                kind = 24;
                            }
                        {
                            jjCheckNAdd(28);
                        }
                        break;
                        case 29:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(29, 30);
                            }
                            break;
                        case 30:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 25) {
                                kind = 25;
                            }
                        {
                            jjCheckNAdd(31);
                        }
                        break;
                        case 31:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 25) {
                                kind = 25;
                            }
                        {
                            jjCheckNAdd(31);
                        }
                        break;
                        case 32:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 25) {
                                kind = 25;
                            }
                        {
                            jjCheckNAdd(32);
                        }
                        break;
                        case 33:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAddStates(7, 11);
                            }
                            break;
                        case 34:
                            if (curChar == 46) {
                                jjCheckNAdd(35);
                            }
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(35, 36);
                            }
                            break;
                        case 37:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(38);
                            }
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 24) {
                                kind = 24;
                            }
                        {
                            jjCheckNAdd(38);
                        }
                        break;
                        case 39:
                            if (curChar == 46) {
                                jjCheckNAdd(40);
                            }
                            break;
                        case 40:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 25) {
                                kind = 25;
                            }
                        {
                            jjCheckNAdd(40);
                        }
                        break;
                        case 41:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 25) {
                                kind = 25;
                            }
                        {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                        case 42:
                            if (curChar == 46) {
                                jjCheckNAddTwoStates(35, 40);
                            }
                            break;
                        case 44:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            break;
                        case 45:
                            if ((0x3ff200000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 46;
                            }
                            break;
                        case 46:
                            if (curChar == 58 && kind > 48) {
                                kind = 48;
                            }
                            break;
                        case 47:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(47, 48);
                            }
                            break;
                        case 48:
                            if ((0x3ff200000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 49;
                            }
                            break;
                        case 49:
                            if (curChar == 58) {
                                jjCheckNAdd(50);
                            }
                            break;
                        case 50:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 50) {
                                kind = 50;
                            }
                        {
                            jjCheckNAddTwoStates(51, 52);
                        }
                        break;
                        case 51:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(51, 52);
                            }
                            break;
                        case 52:
                            if ((0x3ff200000000000L & l) != 0L && kind > 50) {
                                kind = 50;
                            }
                            break;
                        case 53:
                            if ((0x3ff600000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(53, 54);
                            }
                            break;
                        case 54:
                            if ((0x3ff200000000000L & l) != 0L && kind > 51) {
                                kind = 51;
                            }
                            break;
                        case 55:
                            if (curChar != 58) {
                                break;
                            }
                            if (kind > 48) {
                                kind = 48;
                            }
                        {
                            jjCheckNAdd(50);
                        }
                        break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 16:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 54) {
                                    kind = 54;
                                }
                            } else if (curChar == 91) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 53) {
                                    kind = 53;
                                }
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAddTwoStates(12, 13);
                                }
                            }
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 51) {
                                    kind = 51;
                                }
                                {
                                    jjCheckNAddStates(18, 25);
                                }
                            } else if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 46) {
                                    kind = 46;
                                }
                            }
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(26, 27);
                            }
                            break;
                        case 56:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 51) {
                                    kind = 51;
                                }
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(53, 54);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAdd(49);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(47, 48);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAdd(46);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            break;
                        case 1:
                            if (kind > 5) {
                                kind = 5;
                            }
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 2:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(26, 27);
                            }
                            break;
                        case 5:
                            if (curChar == 91) {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 6:
                            if (curChar == 93 && kind > 39) {
                                kind = 39;
                            }
                            break;
                        case 7:
                            if ((0x7fffffe07fffffeL & l) != 0L && kind > 46) {
                                kind = 46;
                            }
                            break;
                        case 9: {
                            jjAddStates(28, 29);
                        }
                        break;
                        case 11:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                        {
                            jjCheckNAddTwoStates(12, 13);
                        }
                        break;
                        case 12:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            break;
                        case 13:
                            if ((0x7fffffe87fffffeL & l) != 0L && kind > 49) {
                                kind = 49;
                            }
                            break;
                        case 14:
                            if ((0x7fffffe87fffffeL & l) != 0L && kind > 53) {
                                kind = 53;
                            }
                            break;
                        case 15:
                            if ((0x7fffffe87fffffeL & l) != 0L && kind > 54) {
                                kind = 54;
                            }
                            break;
                        case 17:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 55) {
                                kind = 55;
                            }
                        {
                            jjCheckNAddTwoStates(18, 19);
                        }
                        break;
                        case 18:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(18, 19);
                            }
                            break;
                        case 19:
                            if ((0x7fffffe87fffffeL & l) != 0L && kind > 55) {
                                kind = 55;
                            }
                            break;
                        case 20:
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 26:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(30, 31);
                            }
                            break;
                        case 36:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(32, 33);
                            }
                            break;
                        case 43:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 51) {
                                kind = 51;
                            }
                        {
                            jjCheckNAddStates(18, 25);
                        }
                        break;
                        case 44:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            break;
                        case 45:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAdd(46);
                            }
                            break;
                        case 47:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(47, 48);
                            }
                            break;
                        case 48:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAdd(49);
                            }
                            break;
                        case 50:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 50) {
                                kind = 50;
                            }
                        {
                            jjCheckNAddTwoStates(51, 52);
                        }
                        break;
                        case 51:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(51, 52);
                            }
                            break;
                        case 52:
                            if ((0x7fffffe87fffffeL & l) != 0L && kind > 50) {
                                kind = 50;
                            }
                            break;
                        case 53:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(53, 54);
                            }
                            break;
                        case 54:
                            if ((0x7fffffe87fffffeL & l) != 0L && kind > 51) {
                                kind = 51;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 16:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                            }
                            break;
                        case 0:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                                {
                                    jjCheckNAddTwoStates(12, 13);
                                }
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 53) {
                                    kind = 53;
                                }
                            }
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 54) {
                                    kind = 54;
                                }
                            }
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 51) {
                                    kind = 51;
                                }
                                {
                                    jjCheckNAddStates(18, 25);
                                }
                            }
                            break;
                        case 56:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAdd(46);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 49) {
                                    kind = 49;
                                }
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(47, 48);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAdd(49);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(53, 54);
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 51) {
                                    kind = 51;
                                }
                            }
                            break;
                        case 1:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 5) {
                                kind = 5;
                            }
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 9:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(28, 29);
                            }
                            break;
                        case 11:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                        {
                            jjCheckNAddTwoStates(12, 13);
                        }
                        break;
                        case 12:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(12, 13);
                            }
                            break;
                        case 13:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 49) {
                                kind = 49;
                            }
                            break;
                        case 14:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 53) {
                                kind = 53;
                            }
                            break;
                        case 15:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 54) {
                                kind = 54;
                            }
                            break;
                        case 17:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 55) {
                                kind = 55;
                            }
                        {
                            jjCheckNAddTwoStates(18, 19);
                        }
                        break;
                        case 18:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(18, 19);
                            }
                            break;
                        case 19:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 55) {
                                kind = 55;
                            }
                            break;
                        case 43:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 51) {
                                kind = 51;
                            }
                        {
                            jjCheckNAddStates(18, 25);
                        }
                        break;
                        case 44:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(44, 45);
                            }
                            break;
                        case 45:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAdd(46);
                            }
                            break;
                        case 47:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(47, 48);
                            }
                            break;
                        case 48:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAdd(49);
                            }
                            break;
                        case 50:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                break;
                            }
                            if (kind > 50) {
                                kind = 50;
                            }
                        {
                            jjCheckNAddTwoStates(51, 52);
                        }
                        break;
                        case 51:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(51, 52);
                            }
                            break;
                        case 52:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 50) {
                                kind = 50;
                            }
                            break;
                        case 53:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(53, 54);
                            }
                            break;
                        case 54:
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 51) {
                                kind = 51;
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_3(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_3(int pos, long active0) {
        return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_3() {
        switch (curChar) {
            case 34:
                return jjMoveStringLiteralDfa1_3(0x20000L);
            default:
                return jjMoveNfa_3(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_3(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(0, active0);
            return 1;
        }
        switch (curChar) {
            case 34:
                return jjMoveStringLiteralDfa2_3(active0, 0x20000L);
            default:
                break;
        }
        return jjStartNfa_3(0, active0);
    }

    private int jjMoveStringLiteralDfa2_3(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_3(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(1, active0);
            return 2;
        }
        switch (curChar) {
            case 34:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStopAtPos(2, 17);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_3(1, active0);
    }

    private int jjMoveNfa_3(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 2;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            kind = 16;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (kind > 16) {
                                kind = 16;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16) {
                                kind = 16;
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_4(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_4(int pos, long active0) {
        return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_4() {
        switch (curChar) {
            case 39:
                return jjMoveStringLiteralDfa1_4(0x200000L);
            default:
                return jjMoveNfa_4(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_4(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_4(0, active0);
            return 1;
        }
        switch (curChar) {
            case 39:
                return jjMoveStringLiteralDfa2_4(active0, 0x200000L);
            default:
                break;
        }
        return jjStartNfa_4(0, active0);
    }

    private int jjMoveStringLiteralDfa2_4(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_4(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_4(1, active0);
            return 2;
        }
        switch (curChar) {
            case 39:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStopAtPos(2, 21);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_4(1, active0);
    }

    private int jjMoveNfa_4(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 2;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            kind = 20;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (kind > 20) {
                                kind = 20;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20) {
                                kind = 20;
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 34:
                return jjStopAtPos(0, 9);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xfffffffbffffffffL & l) != 0L && kind > 8) {
                                kind = 8;
                            }
                            break;
                        case 1:
                            if (kind > 7) {
                                kind = 7;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 8) {
                                kind = 8;
                            }
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (kind > 7) {
                                kind = 7;
                            }
                            break;
                        case 2:
                            if (kind > 8) {
                                kind = 8;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 8) {
                                kind = 8;
                            }
                            break;
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7) {
                                kind = 7;
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_2(int pos, long active0) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_2(int pos, long active0) {
        return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 39:
                return jjStopAtPos(0, 13);
            default:
                return jjMoveNfa_2(0, 0);
        }
    }

    private int jjMoveNfa_2(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xffffff7fffffffffL & l) != 0L && kind > 12) {
                                kind = 12;
                            }
                            break;
                        case 1:
                            if (kind > 11) {
                                kind = 11;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (kind > 12) {
                                kind = 12;
                            }
                            if (curChar == 92) {
                                jjstateSet[jjnewStateCnt++] = 1;
                            }
                            break;
                        case 1:
                            if (kind > 11) {
                                kind = 11;
                            }
                            break;
                        case 2:
                            if (kind > 12) {
                                kind = 12;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 12) {
                                kind = 12;
                            }
                            break;
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 11) {
                                kind = 11;
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                                break;
                            } else {
                                break;
                            }
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (Exception e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            for (; ; ) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                                curChar = input_stream.BeginToken();
                            }
                        } catch (java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        if (jjmatchedPos == 0 && jjmatchedKind > 56) {
                            jjmatchedKind = 56;
                        }
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        break;
                    case 3:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_3();
                        if (jjmatchedPos == 0 && jjmatchedKind > 15) {
                            jjmatchedKind = 15;
                        }
                        break;
                    case 4:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_4();
                        if (jjmatchedPos == 0 && jjmatchedKind > 19) {
                            jjmatchedKind = 19;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) {
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    }
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077)))
                        != 0L) {
                        if (jjnewLexState[jjmatchedKind] != -1) {
                            curLexState = jjnewLexState[jjmatchedKind];
                        }
                        continue EOFLoop;
                    }
                    if (jjnewLexState[jjmatchedKind] != -1) {
                        curLexState = jjnewLexState[jjmatchedKind];
                    }
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else {
                        error_column++;
                    }
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column,
                    error_after, curChar, TokenMgrException.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    public void ReInit(JavaCharStream stream) {

        jjmatchedPos =
            jjnewStateCnt =
                0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 56; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    public void ReInit(JavaCharStream stream, int lexState)

    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 5 || lexState < 0) {
            throw new TokenMgrException(
                "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                TokenMgrException.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }
}
