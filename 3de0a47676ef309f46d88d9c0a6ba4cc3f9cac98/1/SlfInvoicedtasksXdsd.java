/*
 * This file is generated by jOOQ.
 */
package com.selfxdsd.storage.generated.jooq.tables;


import com.selfxdsd.storage.generated.jooq.Indexes;
import com.selfxdsd.storage.generated.jooq.Keys;
import com.selfxdsd.storage.generated.jooq.SelfXdsd;
import com.selfxdsd.storage.generated.jooq.tables.records.SlfInvoicedtasksXdsdRecord;

import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlfInvoicedtasksXdsd extends TableImpl<SlfInvoicedtasksXdsdRecord> {

    private static final long serialVersionUID = 1500256648;

    /**
     * The reference instance of <code>self_xdsd.slf_invoicedtasks_xdsd</code>
     */
    public static final SlfInvoicedtasksXdsd SLF_INVOICEDTASKS_XDSD = new SlfInvoicedtasksXdsd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlfInvoicedtasksXdsdRecord> getRecordType() {
        return SlfInvoicedtasksXdsdRecord.class;
    }

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.id</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.invoiceId</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, Integer> INVOICEID = createField(DSL.name("invoiceId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.repo_fullname</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, String> REPO_FULLNAME = createField(DSL.name("repo_fullname"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.username</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.provider</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, String> PROVIDER = createField(DSL.name("provider"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.role</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.value</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, BigInteger> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.issueId</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, String> ISSUEID = createField(DSL.name("issueId"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.assigned</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, LocalDateTime> ASSIGNED = createField(DSL.name("assigned"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.deadline</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, LocalDateTime> DEADLINE = createField(DSL.name("deadline"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.invoiced</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, LocalDateTime> INVOICED = createField(DSL.name("invoiced"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.estimation_minutes</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, Integer> ESTIMATION_MINUTES = createField(DSL.name("estimation_minutes"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.commission</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, BigInteger> COMMISSION = createField(DSL.name("commission"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20).nullable(false), this, "");

    /**
     * The column <code>self_xdsd.slf_invoicedtasks_xdsd.isPullRequest</code>.
     */
    public final TableField<SlfInvoicedtasksXdsdRecord, Boolean> ISPULLREQUEST = createField(DSL.name("isPullRequest"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>self_xdsd.slf_invoicedtasks_xdsd</code> table reference
     */
    public SlfInvoicedtasksXdsd() {
        this(DSL.name("slf_invoicedtasks_xdsd"), null);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_invoicedtasks_xdsd</code> table reference
     */
    public SlfInvoicedtasksXdsd(String alias) {
        this(DSL.name(alias), SLF_INVOICEDTASKS_XDSD);
    }

    /**
     * Create an aliased <code>self_xdsd.slf_invoicedtasks_xdsd</code> table reference
     */
    public SlfInvoicedtasksXdsd(Name alias) {
        this(alias, SLF_INVOICEDTASKS_XDSD);
    }

    private SlfInvoicedtasksXdsd(Name alias, Table<SlfInvoicedtasksXdsdRecord> aliased) {
        this(alias, aliased, null);
    }

    private SlfInvoicedtasksXdsd(Name alias, Table<SlfInvoicedtasksXdsdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SlfInvoicedtasksXdsd(Table<O> child, ForeignKey<O, SlfInvoicedtasksXdsdRecord> key) {
        super(child, key, SLF_INVOICEDTASKS_XDSD);
    }

    @Override
    public Schema getSchema() {
        return SelfXdsd.SELF_XDSD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SLF_INVOICEDTASKS_XDSD_INVOICECONTRACTFK_IDX);
    }

    @Override
    public Identity<SlfInvoicedtasksXdsdRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SLF_INVOICEDTASKS_XDSD;
    }

    @Override
    public UniqueKey<SlfInvoicedtasksXdsdRecord> getPrimaryKey() {
        return Keys.KEY_SLF_INVOICEDTASKS_XDSD_PRIMARY;
    }

    @Override
    public List<UniqueKey<SlfInvoicedtasksXdsdRecord>> getKeys() {
        return Arrays.<UniqueKey<SlfInvoicedtasksXdsdRecord>>asList(Keys.KEY_SLF_INVOICEDTASKS_XDSD_PRIMARY);
    }

    @Override
    public SlfInvoicedtasksXdsd as(String alias) {
        return new SlfInvoicedtasksXdsd(DSL.name(alias), this);
    }

    @Override
    public SlfInvoicedtasksXdsd as(Name alias) {
        return new SlfInvoicedtasksXdsd(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfInvoicedtasksXdsd rename(String name) {
        return new SlfInvoicedtasksXdsd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlfInvoicedtasksXdsd rename(Name name) {
        return new SlfInvoicedtasksXdsd(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, String, String, String, String, BigInteger, String, LocalDateTime, LocalDateTime, LocalDateTime, Integer, BigInteger, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
