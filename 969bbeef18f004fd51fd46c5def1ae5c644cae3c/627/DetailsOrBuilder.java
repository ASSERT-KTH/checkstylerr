// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/build/build.proto

package io.grafeas.v1beta1.build;

public interface DetailsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:grafeas.v1beta1.build.Details)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The actual provenance for the build.
   * </pre>
   *
   * <code>.grafeas.v1beta1.provenance.BuildProvenance provenance = 1;</code>
   */
  boolean hasProvenance();
  /**
   *
   *
   * <pre>
   * The actual provenance for the build.
   * </pre>
   *
   * <code>.grafeas.v1beta1.provenance.BuildProvenance provenance = 1;</code>
   */
  io.grafeas.v1beta1.provenance.BuildProvenance getProvenance();
  /**
   *
   *
   * <pre>
   * The actual provenance for the build.
   * </pre>
   *
   * <code>.grafeas.v1beta1.provenance.BuildProvenance provenance = 1;</code>
   */
  io.grafeas.v1beta1.provenance.BuildProvenanceOrBuilder getProvenanceOrBuilder();

  /**
   *
   *
   * <pre>
   * Serialized JSON representation of the provenance, used in generating the
   * `BuildSignature` in the corresponding Result. After verifying the
   * signature, `provenance_bytes` can be unmarshalled and compared to the
   * provenance to confirm that it is unchanged. A base64-encoded string
   * representation of the provenance bytes is used for the signature in order
   * to interoperate with openssl which expects this format for signature
   * verification.
   * The serialized form is captured both to avoid ambiguity in how the
   * provenance is marshalled to json as well to prevent incompatibilities with
   * future changes.
   * </pre>
   *
   * <code>string provenance_bytes = 2;</code>
   */
  java.lang.String getProvenanceBytes();
  /**
   *
   *
   * <pre>
   * Serialized JSON representation of the provenance, used in generating the
   * `BuildSignature` in the corresponding Result. After verifying the
   * signature, `provenance_bytes` can be unmarshalled and compared to the
   * provenance to confirm that it is unchanged. A base64-encoded string
   * representation of the provenance bytes is used for the signature in order
   * to interoperate with openssl which expects this format for signature
   * verification.
   * The serialized form is captured both to avoid ambiguity in how the
   * provenance is marshalled to json as well to prevent incompatibilities with
   * future changes.
   * </pre>
   *
   * <code>string provenance_bytes = 2;</code>
   */
  com.google.protobuf.ByteString getProvenanceBytesBytes();
}
