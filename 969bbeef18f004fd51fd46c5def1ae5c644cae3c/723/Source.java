// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/provenance/provenance.proto

package io.grafeas.v1beta1.provenance;

/**
 *
 *
 * <pre>
 * Source describes the location of the source used for the build.
 * </pre>
 *
 * Protobuf type {@code grafeas.v1beta1.provenance.Source}
 */
public final class Source extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:grafeas.v1beta1.provenance.Source)
    SourceOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Source.newBuilder() to construct.
  private Source(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Source() {
    artifactStorageSourceUri_ = "";
    additionalContexts_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private Source(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              java.lang.String s = input.readStringRequireUtf8();

              artifactStorageSourceUri_ = s;
              break;
            }
          case 18:
            {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                fileHashes_ =
                    com.google.protobuf.MapField.newMapField(
                        FileHashesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<
                      java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
                  fileHashes__ =
                      input.readMessage(
                          FileHashesDefaultEntryHolder.defaultEntry.getParserForType(),
                          extensionRegistry);
              fileHashes_.getMutableMap().put(fileHashes__.getKey(), fileHashes__.getValue());
              break;
            }
          case 26:
            {
              io.grafeas.v1beta1.source.SourceContext.Builder subBuilder = null;
              if (context_ != null) {
                subBuilder = context_.toBuilder();
              }
              context_ =
                  input.readMessage(
                      io.grafeas.v1beta1.source.SourceContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(context_);
                context_ = subBuilder.buildPartial();
              }

              break;
            }
          case 34:
            {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                additionalContexts_ =
                    new java.util.ArrayList<io.grafeas.v1beta1.source.SourceContext>();
                mutable_bitField0_ |= 0x00000008;
              }
              additionalContexts_.add(
                  input.readMessage(
                      io.grafeas.v1beta1.source.SourceContext.parser(), extensionRegistry));
              break;
            }
          default:
            {
              if (!parseUnknownFieldProto3(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        additionalContexts_ = java.util.Collections.unmodifiableList(additionalContexts_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return io.grafeas.v1beta1.provenance.Provenance
        .internal_static_grafeas_v1beta1_provenance_Source_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(int number) {
    switch (number) {
      case 2:
        return internalGetFileHashes();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.grafeas.v1beta1.provenance.Provenance
        .internal_static_grafeas_v1beta1_provenance_Source_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.grafeas.v1beta1.provenance.Source.class,
            io.grafeas.v1beta1.provenance.Source.Builder.class);
  }

  private int bitField0_;
  public static final int ARTIFACT_STORAGE_SOURCE_URI_FIELD_NUMBER = 1;
  private volatile java.lang.Object artifactStorageSourceUri_;
  /**
   *
   *
   * <pre>
   * If provided, the input binary artifacts for the build came from this
   * location.
   * </pre>
   *
   * <code>string artifact_storage_source_uri = 1;</code>
   */
  public java.lang.String getArtifactStorageSourceUri() {
    java.lang.Object ref = artifactStorageSourceUri_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      artifactStorageSourceUri_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * If provided, the input binary artifacts for the build came from this
   * location.
   * </pre>
   *
   * <code>string artifact_storage_source_uri = 1;</code>
   */
  public com.google.protobuf.ByteString getArtifactStorageSourceUriBytes() {
    java.lang.Object ref = artifactStorageSourceUri_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      artifactStorageSourceUri_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FILE_HASHES_FIELD_NUMBER = 2;

  private static final class FileHashesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
            java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>newDefaultInstance(
                    io.grafeas.v1beta1.provenance.Provenance
                        .internal_static_grafeas_v1beta1_provenance_Source_FileHashesEntry_descriptor,
                    com.google.protobuf.WireFormat.FieldType.STRING,
                    "",
                    com.google.protobuf.WireFormat.FieldType.MESSAGE,
                    io.grafeas.v1beta1.provenance.FileHashes.getDefaultInstance());
  }

  private com.google.protobuf.MapField<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
      fileHashes_;

  private com.google.protobuf.MapField<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
      internalGetFileHashes() {
    if (fileHashes_ == null) {
      return com.google.protobuf.MapField.emptyMapField(FileHashesDefaultEntryHolder.defaultEntry);
    }
    return fileHashes_;
  }

  public int getFileHashesCount() {
    return internalGetFileHashes().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
   */
  public boolean containsFileHashes(java.lang.String key) {
    if (key == null) {
      throw new java.lang.NullPointerException();
    }
    return internalGetFileHashes().getMap().containsKey(key);
  }
  /** Use {@link #getFileHashesMap()} instead. */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> getFileHashes() {
    return getFileHashesMap();
  }
  /**
   *
   *
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
   */
  public java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
      getFileHashesMap() {
    return internalGetFileHashes().getMap();
  }
  /**
   *
   *
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
   */
  public io.grafeas.v1beta1.provenance.FileHashes getFileHashesOrDefault(
      java.lang.String key, io.grafeas.v1beta1.provenance.FileHashes defaultValue) {
    if (key == null) {
      throw new java.lang.NullPointerException();
    }
    java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> map =
        internalGetFileHashes().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
   */
  public io.grafeas.v1beta1.provenance.FileHashes getFileHashesOrThrow(java.lang.String key) {
    if (key == null) {
      throw new java.lang.NullPointerException();
    }
    java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> map =
        internalGetFileHashes().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int CONTEXT_FIELD_NUMBER = 3;
  private io.grafeas.v1beta1.source.SourceContext context_;
  /**
   *
   *
   * <pre>
   * If provided, the source code used for the build came from this location.
   * </pre>
   *
   * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
   */
  public boolean hasContext() {
    return context_ != null;
  }
  /**
   *
   *
   * <pre>
   * If provided, the source code used for the build came from this location.
   * </pre>
   *
   * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
   */
  public io.grafeas.v1beta1.source.SourceContext getContext() {
    return context_ == null
        ? io.grafeas.v1beta1.source.SourceContext.getDefaultInstance()
        : context_;
  }
  /**
   *
   *
   * <pre>
   * If provided, the source code used for the build came from this location.
   * </pre>
   *
   * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
   */
  public io.grafeas.v1beta1.source.SourceContextOrBuilder getContextOrBuilder() {
    return getContext();
  }

  public static final int ADDITIONAL_CONTEXTS_FIELD_NUMBER = 4;
  private java.util.List<io.grafeas.v1beta1.source.SourceContext> additionalContexts_;
  /**
   *
   *
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
   */
  public java.util.List<io.grafeas.v1beta1.source.SourceContext> getAdditionalContextsList() {
    return additionalContexts_;
  }
  /**
   *
   *
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
   */
  public java.util.List<? extends io.grafeas.v1beta1.source.SourceContextOrBuilder>
      getAdditionalContextsOrBuilderList() {
    return additionalContexts_;
  }
  /**
   *
   *
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
   */
  public int getAdditionalContextsCount() {
    return additionalContexts_.size();
  }
  /**
   *
   *
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
   */
  public io.grafeas.v1beta1.source.SourceContext getAdditionalContexts(int index) {
    return additionalContexts_.get(index);
  }
  /**
   *
   *
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
   */
  public io.grafeas.v1beta1.source.SourceContextOrBuilder getAdditionalContextsOrBuilder(
      int index) {
    return additionalContexts_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getArtifactStorageSourceUriBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, artifactStorageSourceUri_);
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetFileHashes(), FileHashesDefaultEntryHolder.defaultEntry, 2);
    if (context_ != null) {
      output.writeMessage(3, getContext());
    }
    for (int i = 0; i < additionalContexts_.size(); i++) {
      output.writeMessage(4, additionalContexts_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getArtifactStorageSourceUriBytes().isEmpty()) {
      size +=
          com.google.protobuf.GeneratedMessageV3.computeStringSize(1, artifactStorageSourceUri_);
    }
    for (java.util.Map.Entry<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> entry :
        internalGetFileHashes().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
          fileHashes__ =
              FileHashesDefaultEntryHolder.defaultEntry
                  .newBuilderForType()
                  .setKey(entry.getKey())
                  .setValue(entry.getValue())
                  .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, fileHashes__);
    }
    if (context_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getContext());
    }
    for (int i = 0; i < additionalContexts_.size(); i++) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(4, additionalContexts_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof io.grafeas.v1beta1.provenance.Source)) {
      return super.equals(obj);
    }
    io.grafeas.v1beta1.provenance.Source other = (io.grafeas.v1beta1.provenance.Source) obj;

    boolean result = true;
    result = result && getArtifactStorageSourceUri().equals(other.getArtifactStorageSourceUri());
    result = result && internalGetFileHashes().equals(other.internalGetFileHashes());
    result = result && (hasContext() == other.hasContext());
    if (hasContext()) {
      result = result && getContext().equals(other.getContext());
    }
    result = result && getAdditionalContextsList().equals(other.getAdditionalContextsList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ARTIFACT_STORAGE_SOURCE_URI_FIELD_NUMBER;
    hash = (53 * hash) + getArtifactStorageSourceUri().hashCode();
    if (!internalGetFileHashes().getMap().isEmpty()) {
      hash = (37 * hash) + FILE_HASHES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetFileHashes().hashCode();
    }
    if (hasContext()) {
      hash = (37 * hash) + CONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getContext().hashCode();
    }
    if (getAdditionalContextsCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_CONTEXTS_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalContextsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static io.grafeas.v1beta1.provenance.Source parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static io.grafeas.v1beta1.provenance.Source parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static io.grafeas.v1beta1.provenance.Source parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(io.grafeas.v1beta1.provenance.Source prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Source describes the location of the source used for the build.
   * </pre>
   *
   * Protobuf type {@code grafeas.v1beta1.provenance.Source}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:grafeas.v1beta1.provenance.Source)
      io.grafeas.v1beta1.provenance.SourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return io.grafeas.v1beta1.provenance.Provenance
          .internal_static_grafeas_v1beta1_provenance_Source_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 2:
          return internalGetFileHashes();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
      switch (number) {
        case 2:
          return internalGetMutableFileHashes();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.grafeas.v1beta1.provenance.Provenance
          .internal_static_grafeas_v1beta1_provenance_Source_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.grafeas.v1beta1.provenance.Source.class,
              io.grafeas.v1beta1.provenance.Source.Builder.class);
    }

    // Construct using io.grafeas.v1beta1.provenance.Source.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getAdditionalContextsFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      artifactStorageSourceUri_ = "";

      internalGetMutableFileHashes().clear();
      if (contextBuilder_ == null) {
        context_ = null;
      } else {
        context_ = null;
        contextBuilder_ = null;
      }
      if (additionalContextsBuilder_ == null) {
        additionalContexts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        additionalContextsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return io.grafeas.v1beta1.provenance.Provenance
          .internal_static_grafeas_v1beta1_provenance_Source_descriptor;
    }

    @java.lang.Override
    public io.grafeas.v1beta1.provenance.Source getDefaultInstanceForType() {
      return io.grafeas.v1beta1.provenance.Source.getDefaultInstance();
    }

    @java.lang.Override
    public io.grafeas.v1beta1.provenance.Source build() {
      io.grafeas.v1beta1.provenance.Source result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.grafeas.v1beta1.provenance.Source buildPartial() {
      io.grafeas.v1beta1.provenance.Source result = new io.grafeas.v1beta1.provenance.Source(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.artifactStorageSourceUri_ = artifactStorageSourceUri_;
      result.fileHashes_ = internalGetFileHashes();
      result.fileHashes_.makeImmutable();
      if (contextBuilder_ == null) {
        result.context_ = context_;
      } else {
        result.context_ = contextBuilder_.build();
      }
      if (additionalContextsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          additionalContexts_ = java.util.Collections.unmodifiableList(additionalContexts_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.additionalContexts_ = additionalContexts_;
      } else {
        result.additionalContexts_ = additionalContextsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.grafeas.v1beta1.provenance.Source) {
        return mergeFrom((io.grafeas.v1beta1.provenance.Source) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.grafeas.v1beta1.provenance.Source other) {
      if (other == io.grafeas.v1beta1.provenance.Source.getDefaultInstance()) return this;
      if (!other.getArtifactStorageSourceUri().isEmpty()) {
        artifactStorageSourceUri_ = other.artifactStorageSourceUri_;
        onChanged();
      }
      internalGetMutableFileHashes().mergeFrom(other.internalGetFileHashes());
      if (other.hasContext()) {
        mergeContext(other.getContext());
      }
      if (additionalContextsBuilder_ == null) {
        if (!other.additionalContexts_.isEmpty()) {
          if (additionalContexts_.isEmpty()) {
            additionalContexts_ = other.additionalContexts_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAdditionalContextsIsMutable();
            additionalContexts_.addAll(other.additionalContexts_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalContexts_.isEmpty()) {
          if (additionalContextsBuilder_.isEmpty()) {
            additionalContextsBuilder_.dispose();
            additionalContextsBuilder_ = null;
            additionalContexts_ = other.additionalContexts_;
            bitField0_ = (bitField0_ & ~0x00000008);
            additionalContextsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getAdditionalContextsFieldBuilder()
                    : null;
          } else {
            additionalContextsBuilder_.addAllMessages(other.additionalContexts_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.grafeas.v1beta1.provenance.Source parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.grafeas.v1beta1.provenance.Source) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private java.lang.Object artifactStorageSourceUri_ = "";
    /**
     *
     *
     * <pre>
     * If provided, the input binary artifacts for the build came from this
     * location.
     * </pre>
     *
     * <code>string artifact_storage_source_uri = 1;</code>
     */
    public java.lang.String getArtifactStorageSourceUri() {
      java.lang.Object ref = artifactStorageSourceUri_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        artifactStorageSourceUri_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, the input binary artifacts for the build came from this
     * location.
     * </pre>
     *
     * <code>string artifact_storage_source_uri = 1;</code>
     */
    public com.google.protobuf.ByteString getArtifactStorageSourceUriBytes() {
      java.lang.Object ref = artifactStorageSourceUri_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        artifactStorageSourceUri_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, the input binary artifacts for the build came from this
     * location.
     * </pre>
     *
     * <code>string artifact_storage_source_uri = 1;</code>
     */
    public Builder setArtifactStorageSourceUri(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      artifactStorageSourceUri_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, the input binary artifacts for the build came from this
     * location.
     * </pre>
     *
     * <code>string artifact_storage_source_uri = 1;</code>
     */
    public Builder clearArtifactStorageSourceUri() {

      artifactStorageSourceUri_ = getDefaultInstance().getArtifactStorageSourceUri();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, the input binary artifacts for the build came from this
     * location.
     * </pre>
     *
     * <code>string artifact_storage_source_uri = 1;</code>
     */
    public Builder setArtifactStorageSourceUriBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      artifactStorageSourceUri_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        fileHashes_;

    private com.google.protobuf.MapField<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        internalGetFileHashes() {
      if (fileHashes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            FileHashesDefaultEntryHolder.defaultEntry);
      }
      return fileHashes_;
    }

    private com.google.protobuf.MapField<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        internalGetMutableFileHashes() {
      onChanged();
      ;
      if (fileHashes_ == null) {
        fileHashes_ =
            com.google.protobuf.MapField.newMapField(FileHashesDefaultEntryHolder.defaultEntry);
      }
      if (!fileHashes_.isMutable()) {
        fileHashes_ = fileHashes_.copy();
      }
      return fileHashes_;
    }

    public int getFileHashesCount() {
      return internalGetFileHashes().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public boolean containsFileHashes(java.lang.String key) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      return internalGetFileHashes().getMap().containsKey(key);
    }
    /** Use {@link #getFileHashesMap()} instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        getFileHashes() {
      return getFileHashesMap();
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        getFileHashesMap() {
      return internalGetFileHashes().getMap();
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public io.grafeas.v1beta1.provenance.FileHashes getFileHashesOrDefault(
        java.lang.String key, io.grafeas.v1beta1.provenance.FileHashes defaultValue) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> map =
          internalGetFileHashes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public io.grafeas.v1beta1.provenance.FileHashes getFileHashesOrThrow(java.lang.String key) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> map =
          internalGetFileHashes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearFileHashes() {
      internalGetMutableFileHashes().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public Builder removeFileHashes(java.lang.String key) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      internalGetMutableFileHashes().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes>
        getMutableFileHashes() {
      return internalGetMutableFileHashes().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public Builder putFileHashes(
        java.lang.String key, io.grafeas.v1beta1.provenance.FileHashes value) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      if (value == null) {
        throw new java.lang.NullPointerException();
      }
      internalGetMutableFileHashes().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Hash(es) of the build source, which can be used to verify that the original
     * source integrity was maintained in the build.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (.tar.gz), the FileHash will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .grafeas.v1beta1.provenance.FileHashes&gt; file_hashes = 2;</code>
     */
    public Builder putAllFileHashes(
        java.util.Map<java.lang.String, io.grafeas.v1beta1.provenance.FileHashes> values) {
      internalGetMutableFileHashes().getMutableMap().putAll(values);
      return this;
    }

    private io.grafeas.v1beta1.source.SourceContext context_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
            io.grafeas.v1beta1.source.SourceContext,
            io.grafeas.v1beta1.source.SourceContext.Builder,
            io.grafeas.v1beta1.source.SourceContextOrBuilder>
        contextBuilder_;
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public boolean hasContext() {
      return contextBuilder_ != null || context_ != null;
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public io.grafeas.v1beta1.source.SourceContext getContext() {
      if (contextBuilder_ == null) {
        return context_ == null
            ? io.grafeas.v1beta1.source.SourceContext.getDefaultInstance()
            : context_;
      } else {
        return contextBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public Builder setContext(io.grafeas.v1beta1.source.SourceContext value) {
      if (contextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        context_ = value;
        onChanged();
      } else {
        contextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public Builder setContext(io.grafeas.v1beta1.source.SourceContext.Builder builderForValue) {
      if (contextBuilder_ == null) {
        context_ = builderForValue.build();
        onChanged();
      } else {
        contextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public Builder mergeContext(io.grafeas.v1beta1.source.SourceContext value) {
      if (contextBuilder_ == null) {
        if (context_ != null) {
          context_ =
              io.grafeas.v1beta1.source.SourceContext.newBuilder(context_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          context_ = value;
        }
        onChanged();
      } else {
        contextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public Builder clearContext() {
      if (contextBuilder_ == null) {
        context_ = null;
        onChanged();
      } else {
        context_ = null;
        contextBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public io.grafeas.v1beta1.source.SourceContext.Builder getContextBuilder() {

      onChanged();
      return getContextFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    public io.grafeas.v1beta1.source.SourceContextOrBuilder getContextOrBuilder() {
      if (contextBuilder_ != null) {
        return contextBuilder_.getMessageOrBuilder();
      } else {
        return context_ == null
            ? io.grafeas.v1beta1.source.SourceContext.getDefaultInstance()
            : context_;
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, the source code used for the build came from this location.
     * </pre>
     *
     * <code>.grafeas.v1beta1.source.SourceContext context = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            io.grafeas.v1beta1.source.SourceContext,
            io.grafeas.v1beta1.source.SourceContext.Builder,
            io.grafeas.v1beta1.source.SourceContextOrBuilder>
        getContextFieldBuilder() {
      if (contextBuilder_ == null) {
        contextBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                io.grafeas.v1beta1.source.SourceContext,
                io.grafeas.v1beta1.source.SourceContext.Builder,
                io.grafeas.v1beta1.source.SourceContextOrBuilder>(
                getContext(), getParentForChildren(), isClean());
        context_ = null;
      }
      return contextBuilder_;
    }

    private java.util.List<io.grafeas.v1beta1.source.SourceContext> additionalContexts_ =
        java.util.Collections.emptyList();

    private void ensureAdditionalContextsIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        additionalContexts_ =
            new java.util.ArrayList<io.grafeas.v1beta1.source.SourceContext>(additionalContexts_);
        bitField0_ |= 0x00000008;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            io.grafeas.v1beta1.source.SourceContext,
            io.grafeas.v1beta1.source.SourceContext.Builder,
            io.grafeas.v1beta1.source.SourceContextOrBuilder>
        additionalContextsBuilder_;

    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public java.util.List<io.grafeas.v1beta1.source.SourceContext> getAdditionalContextsList() {
      if (additionalContextsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalContexts_);
      } else {
        return additionalContextsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public int getAdditionalContextsCount() {
      if (additionalContextsBuilder_ == null) {
        return additionalContexts_.size();
      } else {
        return additionalContextsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public io.grafeas.v1beta1.source.SourceContext getAdditionalContexts(int index) {
      if (additionalContextsBuilder_ == null) {
        return additionalContexts_.get(index);
      } else {
        return additionalContextsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder setAdditionalContexts(int index, io.grafeas.v1beta1.source.SourceContext value) {
      if (additionalContextsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalContextsIsMutable();
        additionalContexts_.set(index, value);
        onChanged();
      } else {
        additionalContextsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder setAdditionalContexts(
        int index, io.grafeas.v1beta1.source.SourceContext.Builder builderForValue) {
      if (additionalContextsBuilder_ == null) {
        ensureAdditionalContextsIsMutable();
        additionalContexts_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalContextsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder addAdditionalContexts(io.grafeas.v1beta1.source.SourceContext value) {
      if (additionalContextsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalContextsIsMutable();
        additionalContexts_.add(value);
        onChanged();
      } else {
        additionalContextsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder addAdditionalContexts(int index, io.grafeas.v1beta1.source.SourceContext value) {
      if (additionalContextsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalContextsIsMutable();
        additionalContexts_.add(index, value);
        onChanged();
      } else {
        additionalContextsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder addAdditionalContexts(
        io.grafeas.v1beta1.source.SourceContext.Builder builderForValue) {
      if (additionalContextsBuilder_ == null) {
        ensureAdditionalContextsIsMutable();
        additionalContexts_.add(builderForValue.build());
        onChanged();
      } else {
        additionalContextsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder addAdditionalContexts(
        int index, io.grafeas.v1beta1.source.SourceContext.Builder builderForValue) {
      if (additionalContextsBuilder_ == null) {
        ensureAdditionalContextsIsMutable();
        additionalContexts_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalContextsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder addAllAdditionalContexts(
        java.lang.Iterable<? extends io.grafeas.v1beta1.source.SourceContext> values) {
      if (additionalContextsBuilder_ == null) {
        ensureAdditionalContextsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, additionalContexts_);
        onChanged();
      } else {
        additionalContextsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder clearAdditionalContexts() {
      if (additionalContextsBuilder_ == null) {
        additionalContexts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        additionalContextsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public Builder removeAdditionalContexts(int index) {
      if (additionalContextsBuilder_ == null) {
        ensureAdditionalContextsIsMutable();
        additionalContexts_.remove(index);
        onChanged();
      } else {
        additionalContextsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public io.grafeas.v1beta1.source.SourceContext.Builder getAdditionalContextsBuilder(int index) {
      return getAdditionalContextsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public io.grafeas.v1beta1.source.SourceContextOrBuilder getAdditionalContextsOrBuilder(
        int index) {
      if (additionalContextsBuilder_ == null) {
        return additionalContexts_.get(index);
      } else {
        return additionalContextsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public java.util.List<? extends io.grafeas.v1beta1.source.SourceContextOrBuilder>
        getAdditionalContextsOrBuilderList() {
      if (additionalContextsBuilder_ != null) {
        return additionalContextsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalContexts_);
      }
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public io.grafeas.v1beta1.source.SourceContext.Builder addAdditionalContextsBuilder() {
      return getAdditionalContextsFieldBuilder()
          .addBuilder(io.grafeas.v1beta1.source.SourceContext.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public io.grafeas.v1beta1.source.SourceContext.Builder addAdditionalContextsBuilder(int index) {
      return getAdditionalContextsFieldBuilder()
          .addBuilder(index, io.grafeas.v1beta1.source.SourceContext.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * If provided, some of the source code used for the build may be found in
     * these locations, in the case where the source repository had multiple
     * remotes or submodules. This list will not include the context specified in
     * the context field.
     * </pre>
     *
     * <code>repeated .grafeas.v1beta1.source.SourceContext additional_contexts = 4;</code>
     */
    public java.util.List<io.grafeas.v1beta1.source.SourceContext.Builder>
        getAdditionalContextsBuilderList() {
      return getAdditionalContextsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            io.grafeas.v1beta1.source.SourceContext,
            io.grafeas.v1beta1.source.SourceContext.Builder,
            io.grafeas.v1beta1.source.SourceContextOrBuilder>
        getAdditionalContextsFieldBuilder() {
      if (additionalContextsBuilder_ == null) {
        additionalContextsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                io.grafeas.v1beta1.source.SourceContext,
                io.grafeas.v1beta1.source.SourceContext.Builder,
                io.grafeas.v1beta1.source.SourceContextOrBuilder>(
                additionalContexts_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        additionalContexts_ = null;
      }
      return additionalContextsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:grafeas.v1beta1.provenance.Source)
  }

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.provenance.Source)
  private static final io.grafeas.v1beta1.provenance.Source DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new io.grafeas.v1beta1.provenance.Source();
  }

  public static io.grafeas.v1beta1.provenance.Source getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Source> PARSER =
      new com.google.protobuf.AbstractParser<Source>() {
        @java.lang.Override
        public Source parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Source(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<Source> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Source> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.grafeas.v1beta1.provenance.Source getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
