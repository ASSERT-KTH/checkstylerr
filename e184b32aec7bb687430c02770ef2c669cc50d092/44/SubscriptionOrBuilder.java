// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

package com.google.pubsub.v1;

public interface SubscriptionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.pubsub.v1.Subscription)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The name of the subscription. It must have the format
   * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
   * start with a letter, and contain only letters (`[A-Za-z]`), numbers
   * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
   * plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
   * in length, and it must not start with `"goog"`.
   * </pre>
   */
  java.lang.String getName();
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The name of the subscription. It must have the format
   * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
   * start with a letter, and contain only letters (`[A-Za-z]`), numbers
   * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
   * plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
   * in length, and it must not start with `"goog"`.
   * </pre>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <code>optional string topic = 2;</code>
   *
   * <pre>
   * The name of the topic from which this subscription is receiving messages.
   * The value of this field will be `_deleted-topic_` if the topic has been
   * deleted.
   * </pre>
   */
  java.lang.String getTopic();
  /**
   * <code>optional string topic = 2;</code>
   *
   * <pre>
   * The name of the topic from which this subscription is receiving messages.
   * The value of this field will be `_deleted-topic_` if the topic has been
   * deleted.
   * </pre>
   */
  com.google.protobuf.ByteString
      getTopicBytes();

  /**
   * <code>optional .google.pubsub.v1.PushConfig push_config = 4;</code>
   *
   * <pre>
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   * </pre>
   */
  boolean hasPushConfig();
  /**
   * <code>optional .google.pubsub.v1.PushConfig push_config = 4;</code>
   *
   * <pre>
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   * </pre>
   */
  com.google.pubsub.v1.PushConfig getPushConfig();
  /**
   * <code>optional .google.pubsub.v1.PushConfig push_config = 4;</code>
   *
   * <pre>
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   * </pre>
   */
  com.google.pubsub.v1.PushConfigOrBuilder getPushConfigOrBuilder();

  /**
   * <code>optional int32 ack_deadline_seconds = 5;</code>
   *
   * <pre>
   * This value is the maximum time after a subscriber receives a message
   * before the subscriber should acknowledge the message. After message
   * delivery but before the ack deadline expires and before the message is
   * acknowledged, it is an outstanding message and will not be delivered
   * again during that time (on a best-effort basis).
   * For pull delivery this value is used as the initial value for the ack
   * deadline. To override this value for a given message, call
   * ModifyAckDeadline with the corresponding ack_id.
   * For push delivery, this value is also used to set the request timeout for
   * the call to the push endpoint.
   * If the subscriber never acknowledges the message, the Pub/Sub
   * system will eventually redeliver the message.
   * If this parameter is not set, the default value of 10 seconds is used.
   * </pre>
   */
  int getAckDeadlineSeconds();
}
