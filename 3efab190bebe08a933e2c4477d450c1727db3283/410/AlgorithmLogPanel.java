/* 
 * Copyright 2015 Torridity.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tor.tribes.ui.algo;

import java.awt.Color;
import java.awt.Point;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JViewport;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Torridity
 */
public class AlgorithmLogPanel extends javax.swing.JPanel {

    private SimpleDateFormat dateFormat = null;
    private boolean aborted = false;

    /** Creates new form AlgorithmLogPanel */
    public AlgorithmLogPanel() {
        initComponents();
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();

        // Create a style object and then set the style attributes
        Style defaultStyle = doc.addStyle("Default", null);
        StyleConstants.setItalic(defaultStyle, true);
        StyleConstants.setFontFamily(defaultStyle, "SansSerif");
        Style infoStyle = doc.addStyle("Info", null);
        StyleConstants.setItalic(infoStyle, true);
        StyleConstants.setFontFamily(infoStyle, "SansSerif");
        StyleConstants.setForeground(infoStyle, Color.LIGHT_GRAY);
        Style errorStyle = doc.addStyle("Error", null);
        StyleConstants.setFontFamily(errorStyle, "SansSerif");
        StyleConstants.setForeground(errorStyle, Color.RED);
        dateFormat = new SimpleDateFormat("HH:mm:ss");
    }

    public void setAbortable(boolean pValue) {
        jButton1.setEnabled(pValue);
    }

    public void clear() {
        try {
            jTextPane1.setText("");
            aborted = false;
        } catch (Exception e) {
        }
    }

    public boolean isAborted() {
        return aborted;
    }

    public void addText(String pText) {
        try {
            StyledDocument doc = jTextPane1.getStyledDocument();
            doc.insertString(doc.getLength(), "(" + dateFormat.format(new Date(System.currentTimeMillis())) + ") " + pText + "\n", doc.getStyle("Default"));
            scroll();
        } catch (Throwable e) {
        }
    }

    public void addInfo(String pText) {
        try {
            StyledDocument doc = jTextPane1.getStyledDocument();
            doc.insertString(doc.getLength(), "(" + dateFormat.format(new Date(System.currentTimeMillis())) + ") " + pText + "\n", doc.getStyle("Info"));
            scroll();
        } catch (Throwable e) {
        }
    }

    public void addError(String pText) {
        try {
            StyledDocument doc = jTextPane1.getStyledDocument();
            doc.insertString(doc.getLength(), "(" + dateFormat.format(new Date(System.currentTimeMillis())) + ") " + pText + "\n", doc.getStyle("Error"));
            scroll();
        } catch (Throwable e) {
        }
    }

    private void scroll() {
        try {
            Point point = new Point(0, (int) (jTextPane1.getSize().getHeight()));
            JViewport vp = jScrollPane1.getViewport();
            if ((vp == null) || (point == null)) {
                return;
            }
            vp.setViewPosition(point);
        } catch (Throwable t) {
        }
    }

    public void updateStatus(int pCurrentStatus, int pMaxStatus) {
        try {
            jStatusProgress.setMaximum(pMaxStatus);
            jStatusProgress.setValue(pMaxStatus - pCurrentStatus);
        } catch (Throwable t) {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jStatusProgress = new javax.swing.JProgressBar();

        setMinimumSize(new java.awt.Dimension(200, 300));
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Berechnung abbrechen");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireAbortEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jButton1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jStatusProgress, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fireAbortEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireAbortEvent
        if (!jButton1.isEnabled() || aborted) {
            return;
        }
        addError("Berechnung vom Benutzer abgebrochen.");
        aborted = true;
    }//GEN-LAST:event_fireAbortEvent
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar jStatusProgress;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
