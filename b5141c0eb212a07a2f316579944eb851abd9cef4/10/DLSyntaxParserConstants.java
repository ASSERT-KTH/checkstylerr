/* Generated By:JavaCC: Do not edit this line. DLSyntaxParserConstants.java */
/* This file is part of the OWL API.
 * The contents of this file are subject to the LGPL License, Version 3.0.
 * Copyright 2014, The University of Manchester
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */

package org.semanticweb.owlapi.dlsyntax.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface DLSyntaxParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SUBCLASSOF = 4;
  /** RegularExpression Id. */
  int EQUIVALENTTO = 5;
  /** RegularExpression Id. */
  int NEQ = 6;
  /** RegularExpression Id. */
  int COMPOSE = 7;
  /** RegularExpression Id. */
  int DOT = 8;
  /** RegularExpression Id. */
  int INVERSE = 9;
  /** RegularExpression Id. */
  int OPENPAR = 10;
  /** RegularExpression Id. */
  int CLOSEPAR = 11;
  /** RegularExpression Id. */
  int OPENSQPAR = 12;
  /** RegularExpression Id. */
  int CLOSESQPAR = 13;
  /** RegularExpression Id. */
  int OPENBRACE = 14;
  /** RegularExpression Id. */
  int CLOSEBRACE = 15;
  /** RegularExpression Id. */
  int COLON = 16;
  /** RegularExpression Id. */
  int AND = 17;
  /** RegularExpression Id. */
  int OR = 18;
  /** RegularExpression Id. */
  int NOT = 19;
  /** RegularExpression Id. */
  int SOME = 20;
  /** RegularExpression Id. */
  int ALL = 21;
  /** RegularExpression Id. */
  int MIN = 22;
  /** RegularExpression Id. */
  int MAX = 23;
  /** RegularExpression Id. */
  int EXACT = 24;
  /** RegularExpression Id. */
  int IN = 25;
  /** RegularExpression Id. */
  int TRANSITIVEROLES = 26;
  /** RegularExpression Id. */
  int INT = 27;
  /** RegularExpression Id. */
  int DOUBLE = 28;
  /** RegularExpression Id. */
  int ID = 29;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "<SUBCLASSOF>",
    "<EQUIVALENTTO>",
    "<NEQ>",
    "<COMPOSE>",
    "\".\"",
    "<INVERSE>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<SOME>",
    "<ALL>",
    "<MIN>",
    "<MAX>",
    "<EXACT>",
    "<IN>",
    "<TRANSITIVEROLES>",
    "<INT>",
    "<DOUBLE>",
    "<ID>",
    "\"\\n\"",
    "\",\"",
  };

}
