/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TStepResult implements org.apache.thrift.TBase<TStepResult, TStepResult._Fields>, java.io.Serializable, Cloneable, Comparable<TStepResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStepResult");

  private static final org.apache.thrift.protocol.TField SERIALIZED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("serialized_rows", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EXECUTION_FINISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_finished", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField MERGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SHARDED_FIELD_DESC = new org.apache.thrift.protocol.TField("sharded", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("row_desc", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("node_id", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStepResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStepResultTupleSchemeFactory();

  public com.mapd.thrift.server.TSerializedRows serialized_rows; // required
  public boolean execution_finished; // required
  /**
   * 
   * @see TMergeType
   */
  public TMergeType merge_type; // required
  public boolean sharded; // required
  public java.util.List<TColumnType> row_desc; // required
  public int node_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERIALIZED_ROWS((short)1, "serialized_rows"),
    EXECUTION_FINISHED((short)2, "execution_finished"),
    /**
     * 
     * @see TMergeType
     */
    MERGE_TYPE((short)3, "merge_type"),
    SHARDED((short)4, "sharded"),
    ROW_DESC((short)5, "row_desc"),
    NODE_ID((short)6, "node_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERIALIZED_ROWS
          return SERIALIZED_ROWS;
        case 2: // EXECUTION_FINISHED
          return EXECUTION_FINISHED;
        case 3: // MERGE_TYPE
          return MERGE_TYPE;
        case 4: // SHARDED
          return SHARDED;
        case 5: // ROW_DESC
          return ROW_DESC;
        case 6: // NODE_ID
          return NODE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTION_FINISHED_ISSET_ID = 0;
  private static final int __SHARDED_ISSET_ID = 1;
  private static final int __NODE_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERIALIZED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("serialized_rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mapd.thrift.server.TSerializedRows.class)));
    tmpMap.put(_Fields.EXECUTION_FINISHED, new org.apache.thrift.meta_data.FieldMetaData("execution_finished", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MERGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merge_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TMergeType.class)));
    tmpMap.put(_Fields.SHARDED, new org.apache.thrift.meta_data.FieldMetaData("sharded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROW_DESC, new org.apache.thrift.meta_data.FieldMetaData("row_desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "TRowDescriptor")));
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("node_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStepResult.class, metaDataMap);
  }

  public TStepResult() {
  }

  public TStepResult(
    com.mapd.thrift.server.TSerializedRows serialized_rows,
    boolean execution_finished,
    TMergeType merge_type,
    boolean sharded,
    java.util.List<TColumnType> row_desc,
    int node_id)
  {
    this();
    this.serialized_rows = serialized_rows;
    this.execution_finished = execution_finished;
    setExecution_finishedIsSet(true);
    this.merge_type = merge_type;
    this.sharded = sharded;
    setShardedIsSet(true);
    this.row_desc = row_desc;
    this.node_id = node_id;
    setNode_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStepResult(TStepResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSerialized_rows()) {
      this.serialized_rows = new com.mapd.thrift.server.TSerializedRows(other.serialized_rows);
    }
    this.execution_finished = other.execution_finished;
    if (other.isSetMerge_type()) {
      this.merge_type = other.merge_type;
    }
    this.sharded = other.sharded;
    if (other.isSetRow_desc()) {
      java.util.List<TColumnType> __this__row_desc = new java.util.ArrayList<TColumnType>(other.row_desc.size());
      for (TColumnType other_element : other.row_desc) {
        __this__row_desc.add(new TColumnType(other_element));
      }
      this.row_desc = __this__row_desc;
    }
    this.node_id = other.node_id;
  }

  public TStepResult deepCopy() {
    return new TStepResult(this);
  }

  @Override
  public void clear() {
    this.serialized_rows = null;
    setExecution_finishedIsSet(false);
    this.execution_finished = false;
    this.merge_type = null;
    setShardedIsSet(false);
    this.sharded = false;
    this.row_desc = null;
    setNode_idIsSet(false);
    this.node_id = 0;
  }

  public com.mapd.thrift.server.TSerializedRows getSerialized_rows() {
    return this.serialized_rows;
  }

  public TStepResult setSerialized_rows(com.mapd.thrift.server.TSerializedRows serialized_rows) {
    this.serialized_rows = serialized_rows;
    return this;
  }

  public void unsetSerialized_rows() {
    this.serialized_rows = null;
  }

  /** Returns true if field serialized_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialized_rows() {
    return this.serialized_rows != null;
  }

  public void setSerialized_rowsIsSet(boolean value) {
    if (!value) {
      this.serialized_rows = null;
    }
  }

  public boolean isExecution_finished() {
    return this.execution_finished;
  }

  public TStepResult setExecution_finished(boolean execution_finished) {
    this.execution_finished = execution_finished;
    setExecution_finishedIsSet(true);
    return this;
  }

  public void unsetExecution_finished() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTION_FINISHED_ISSET_ID);
  }

  /** Returns true if field execution_finished is set (has been assigned a value) and false otherwise */
  public boolean isSetExecution_finished() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTION_FINISHED_ISSET_ID);
  }

  public void setExecution_finishedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTION_FINISHED_ISSET_ID, value);
  }

  /**
   * 
   * @see TMergeType
   */
  public TMergeType getMerge_type() {
    return this.merge_type;
  }

  /**
   * 
   * @see TMergeType
   */
  public TStepResult setMerge_type(TMergeType merge_type) {
    this.merge_type = merge_type;
    return this;
  }

  public void unsetMerge_type() {
    this.merge_type = null;
  }

  /** Returns true if field merge_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_type() {
    return this.merge_type != null;
  }

  public void setMerge_typeIsSet(boolean value) {
    if (!value) {
      this.merge_type = null;
    }
  }

  public boolean isSharded() {
    return this.sharded;
  }

  public TStepResult setSharded(boolean sharded) {
    this.sharded = sharded;
    setShardedIsSet(true);
    return this;
  }

  public void unsetSharded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARDED_ISSET_ID);
  }

  /** Returns true if field sharded is set (has been assigned a value) and false otherwise */
  public boolean isSetSharded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARDED_ISSET_ID);
  }

  public void setShardedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARDED_ISSET_ID, value);
  }

  public int getRow_descSize() {
    return (this.row_desc == null) ? 0 : this.row_desc.size();
  }

  public java.util.Iterator<TColumnType> getRow_descIterator() {
    return (this.row_desc == null) ? null : this.row_desc.iterator();
  }

  public void addToRow_desc(TColumnType elem) {
    if (this.row_desc == null) {
      this.row_desc = new java.util.ArrayList<TColumnType>();
    }
    this.row_desc.add(elem);
  }

  public java.util.List<TColumnType> getRow_desc() {
    return this.row_desc;
  }

  public TStepResult setRow_desc(java.util.List<TColumnType> row_desc) {
    this.row_desc = row_desc;
    return this;
  }

  public void unsetRow_desc() {
    this.row_desc = null;
  }

  /** Returns true if field row_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_desc() {
    return this.row_desc != null;
  }

  public void setRow_descIsSet(boolean value) {
    if (!value) {
      this.row_desc = null;
    }
  }

  public int getNode_id() {
    return this.node_id;
  }

  public TStepResult setNode_id(int node_id) {
    this.node_id = node_id;
    setNode_idIsSet(true);
    return this;
  }

  public void unsetNode_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  /** Returns true if field node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  public void setNode_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODE_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SERIALIZED_ROWS:
      if (value == null) {
        unsetSerialized_rows();
      } else {
        setSerialized_rows((com.mapd.thrift.server.TSerializedRows)value);
      }
      break;

    case EXECUTION_FINISHED:
      if (value == null) {
        unsetExecution_finished();
      } else {
        setExecution_finished((java.lang.Boolean)value);
      }
      break;

    case MERGE_TYPE:
      if (value == null) {
        unsetMerge_type();
      } else {
        setMerge_type((TMergeType)value);
      }
      break;

    case SHARDED:
      if (value == null) {
        unsetSharded();
      } else {
        setSharded((java.lang.Boolean)value);
      }
      break;

    case ROW_DESC:
      if (value == null) {
        unsetRow_desc();
      } else {
        setRow_desc((java.util.List<TColumnType>)value);
      }
      break;

    case NODE_ID:
      if (value == null) {
        unsetNode_id();
      } else {
        setNode_id((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERIALIZED_ROWS:
      return getSerialized_rows();

    case EXECUTION_FINISHED:
      return isExecution_finished();

    case MERGE_TYPE:
      return getMerge_type();

    case SHARDED:
      return isSharded();

    case ROW_DESC:
      return getRow_desc();

    case NODE_ID:
      return getNode_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERIALIZED_ROWS:
      return isSetSerialized_rows();
    case EXECUTION_FINISHED:
      return isSetExecution_finished();
    case MERGE_TYPE:
      return isSetMerge_type();
    case SHARDED:
      return isSetSharded();
    case ROW_DESC:
      return isSetRow_desc();
    case NODE_ID:
      return isSetNode_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TStepResult)
      return this.equals((TStepResult)that);
    return false;
  }

  public boolean equals(TStepResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serialized_rows = true && this.isSetSerialized_rows();
    boolean that_present_serialized_rows = true && that.isSetSerialized_rows();
    if (this_present_serialized_rows || that_present_serialized_rows) {
      if (!(this_present_serialized_rows && that_present_serialized_rows))
        return false;
      if (!this.serialized_rows.equals(that.serialized_rows))
        return false;
    }

    boolean this_present_execution_finished = true;
    boolean that_present_execution_finished = true;
    if (this_present_execution_finished || that_present_execution_finished) {
      if (!(this_present_execution_finished && that_present_execution_finished))
        return false;
      if (this.execution_finished != that.execution_finished)
        return false;
    }

    boolean this_present_merge_type = true && this.isSetMerge_type();
    boolean that_present_merge_type = true && that.isSetMerge_type();
    if (this_present_merge_type || that_present_merge_type) {
      if (!(this_present_merge_type && that_present_merge_type))
        return false;
      if (!this.merge_type.equals(that.merge_type))
        return false;
    }

    boolean this_present_sharded = true;
    boolean that_present_sharded = true;
    if (this_present_sharded || that_present_sharded) {
      if (!(this_present_sharded && that_present_sharded))
        return false;
      if (this.sharded != that.sharded)
        return false;
    }

    boolean this_present_row_desc = true && this.isSetRow_desc();
    boolean that_present_row_desc = true && that.isSetRow_desc();
    if (this_present_row_desc || that_present_row_desc) {
      if (!(this_present_row_desc && that_present_row_desc))
        return false;
      if (!this.row_desc.equals(that.row_desc))
        return false;
    }

    boolean this_present_node_id = true;
    boolean that_present_node_id = true;
    if (this_present_node_id || that_present_node_id) {
      if (!(this_present_node_id && that_present_node_id))
        return false;
      if (this.node_id != that.node_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSerialized_rows()) ? 131071 : 524287);
    if (isSetSerialized_rows())
      hashCode = hashCode * 8191 + serialized_rows.hashCode();

    hashCode = hashCode * 8191 + ((execution_finished) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMerge_type()) ? 131071 : 524287);
    if (isSetMerge_type())
      hashCode = hashCode * 8191 + merge_type.getValue();

    hashCode = hashCode * 8191 + ((sharded) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRow_desc()) ? 131071 : 524287);
    if (isSetRow_desc())
      hashCode = hashCode * 8191 + row_desc.hashCode();

    hashCode = hashCode * 8191 + node_id;

    return hashCode;
  }

  @Override
  public int compareTo(TStepResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSerialized_rows()).compareTo(other.isSetSerialized_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialized_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialized_rows, other.serialized_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecution_finished()).compareTo(other.isSetExecution_finished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecution_finished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_finished, other.execution_finished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMerge_type()).compareTo(other.isSetMerge_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_type, other.merge_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSharded()).compareTo(other.isSetSharded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharded, other.sharded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRow_desc()).compareTo(other.isSetRow_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_desc, other.row_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNode_id()).compareTo(other.isSetNode_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_id, other.node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStepResult(");
    boolean first = true;

    sb.append("serialized_rows:");
    if (this.serialized_rows == null) {
      sb.append("null");
    } else {
      sb.append(this.serialized_rows);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execution_finished:");
    sb.append(this.execution_finished);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merge_type:");
    if (this.merge_type == null) {
      sb.append("null");
    } else {
      sb.append(this.merge_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharded:");
    sb.append(this.sharded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_desc:");
    if (this.row_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.row_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("node_id:");
    sb.append(this.node_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (serialized_rows != null) {
      serialized_rows.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStepResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TStepResultStandardScheme getScheme() {
      return new TStepResultStandardScheme();
    }
  }

  private static class TStepResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStepResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERIALIZED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.serialized_rows = new com.mapd.thrift.server.TSerializedRows();
              struct.serialized_rows.read(iprot);
              struct.setSerialized_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXECUTION_FINISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.execution_finished = iprot.readBool();
              struct.setExecution_finishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merge_type = com.mapd.thrift.server.TMergeType.findByValue(iprot.readI32());
              struct.setMerge_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sharded = iprot.readBool();
              struct.setShardedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.row_desc = new java.util.ArrayList<TColumnType>(_list64.size);
                TColumnType _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new TColumnType();
                  _elem65.read(iprot);
                  struct.row_desc.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setRow_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_id = iprot.readI32();
              struct.setNode_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStepResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serialized_rows != null) {
        oprot.writeFieldBegin(SERIALIZED_ROWS_FIELD_DESC);
        struct.serialized_rows.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTION_FINISHED_FIELD_DESC);
      oprot.writeBool(struct.execution_finished);
      oprot.writeFieldEnd();
      if (struct.merge_type != null) {
        oprot.writeFieldBegin(MERGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.merge_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHARDED_FIELD_DESC);
      oprot.writeBool(struct.sharded);
      oprot.writeFieldEnd();
      if (struct.row_desc != null) {
        oprot.writeFieldBegin(ROW_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.row_desc.size()));
          for (TColumnType _iter67 : struct.row_desc)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.node_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStepResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TStepResultTupleScheme getScheme() {
      return new TStepResultTupleScheme();
    }
  }

  private static class TStepResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStepResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSerialized_rows()) {
        optionals.set(0);
      }
      if (struct.isSetExecution_finished()) {
        optionals.set(1);
      }
      if (struct.isSetMerge_type()) {
        optionals.set(2);
      }
      if (struct.isSetSharded()) {
        optionals.set(3);
      }
      if (struct.isSetRow_desc()) {
        optionals.set(4);
      }
      if (struct.isSetNode_id()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSerialized_rows()) {
        struct.serialized_rows.write(oprot);
      }
      if (struct.isSetExecution_finished()) {
        oprot.writeBool(struct.execution_finished);
      }
      if (struct.isSetMerge_type()) {
        oprot.writeI32(struct.merge_type.getValue());
      }
      if (struct.isSetSharded()) {
        oprot.writeBool(struct.sharded);
      }
      if (struct.isSetRow_desc()) {
        {
          oprot.writeI32(struct.row_desc.size());
          for (TColumnType _iter68 : struct.row_desc)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetNode_id()) {
        oprot.writeI32(struct.node_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.serialized_rows = new com.mapd.thrift.server.TSerializedRows();
        struct.serialized_rows.read(iprot);
        struct.setSerialized_rowsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.execution_finished = iprot.readBool();
        struct.setExecution_finishedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merge_type = com.mapd.thrift.server.TMergeType.findByValue(iprot.readI32());
        struct.setMerge_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sharded = iprot.readBool();
        struct.setShardedIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.row_desc = new java.util.ArrayList<TColumnType>(_list69.size);
          TColumnType _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new TColumnType();
            _elem70.read(iprot);
            struct.row_desc.add(_elem70);
          }
        }
        struct.setRow_descIsSet(true);
      }
      if (incoming.get(5)) {
        struct.node_id = iprot.readI32();
        struct.setNode_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

