/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TTableDetails implements org.apache.thrift.TBase<TTableDetails, TTableDetails._Fields>, java.io.Serializable, Cloneable, Comparable<TTableDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableDetails");

  private static final org.apache.thrift.protocol.TField ROW_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("row_desc", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_size", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_rows", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VIEW_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("view_sql", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SHARD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField KEY_METAINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("key_metainfo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_TEMPORARY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_temporary", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PARTITION_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_detail", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableDetailsTupleSchemeFactory();

  public java.util.List<TColumnType> row_desc; // required
  public long fragment_size; // required
  public long page_size; // required
  public long max_rows; // required
  public java.lang.String view_sql; // required
  public long shard_count; // required
  public java.lang.String key_metainfo; // required
  public boolean is_temporary; // required
  /**
   * 
   * @see TPartitionDetail
   */
  public TPartitionDetail partition_detail; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW_DESC((short)1, "row_desc"),
    FRAGMENT_SIZE((short)2, "fragment_size"),
    PAGE_SIZE((short)3, "page_size"),
    MAX_ROWS((short)4, "max_rows"),
    VIEW_SQL((short)5, "view_sql"),
    SHARD_COUNT((short)6, "shard_count"),
    KEY_METAINFO((short)7, "key_metainfo"),
    IS_TEMPORARY((short)8, "is_temporary"),
    /**
     * 
     * @see TPartitionDetail
     */
    PARTITION_DETAIL((short)9, "partition_detail");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW_DESC
          return ROW_DESC;
        case 2: // FRAGMENT_SIZE
          return FRAGMENT_SIZE;
        case 3: // PAGE_SIZE
          return PAGE_SIZE;
        case 4: // MAX_ROWS
          return MAX_ROWS;
        case 5: // VIEW_SQL
          return VIEW_SQL;
        case 6: // SHARD_COUNT
          return SHARD_COUNT;
        case 7: // KEY_METAINFO
          return KEY_METAINFO;
        case 8: // IS_TEMPORARY
          return IS_TEMPORARY;
        case 9: // PARTITION_DETAIL
          return PARTITION_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAGMENT_SIZE_ISSET_ID = 0;
  private static final int __PAGE_SIZE_ISSET_ID = 1;
  private static final int __MAX_ROWS_ISSET_ID = 2;
  private static final int __SHARD_COUNT_ISSET_ID = 3;
  private static final int __IS_TEMPORARY_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW_DESC, new org.apache.thrift.meta_data.FieldMetaData("row_desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "TRowDescriptor")));
    tmpMap.put(_Fields.FRAGMENT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fragment_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_ROWS, new org.apache.thrift.meta_data.FieldMetaData("max_rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIEW_SQL, new org.apache.thrift.meta_data.FieldMetaData("view_sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("shard_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_METAINFO, new org.apache.thrift.meta_data.FieldMetaData("key_metainfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_TEMPORARY, new org.apache.thrift.meta_data.FieldMetaData("is_temporary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("partition_detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPartitionDetail.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableDetails.class, metaDataMap);
  }

  public TTableDetails() {
  }

  public TTableDetails(
    java.util.List<TColumnType> row_desc,
    long fragment_size,
    long page_size,
    long max_rows,
    java.lang.String view_sql,
    long shard_count,
    java.lang.String key_metainfo,
    boolean is_temporary,
    TPartitionDetail partition_detail)
  {
    this();
    this.row_desc = row_desc;
    this.fragment_size = fragment_size;
    setFragment_sizeIsSet(true);
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    this.max_rows = max_rows;
    setMax_rowsIsSet(true);
    this.view_sql = view_sql;
    this.shard_count = shard_count;
    setShard_countIsSet(true);
    this.key_metainfo = key_metainfo;
    this.is_temporary = is_temporary;
    setIs_temporaryIsSet(true);
    this.partition_detail = partition_detail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableDetails(TTableDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRow_desc()) {
      java.util.List<TColumnType> __this__row_desc = new java.util.ArrayList<TColumnType>(other.row_desc.size());
      for (TColumnType other_element : other.row_desc) {
        __this__row_desc.add(new TColumnType(other_element));
      }
      this.row_desc = __this__row_desc;
    }
    this.fragment_size = other.fragment_size;
    this.page_size = other.page_size;
    this.max_rows = other.max_rows;
    if (other.isSetView_sql()) {
      this.view_sql = other.view_sql;
    }
    this.shard_count = other.shard_count;
    if (other.isSetKey_metainfo()) {
      this.key_metainfo = other.key_metainfo;
    }
    this.is_temporary = other.is_temporary;
    if (other.isSetPartition_detail()) {
      this.partition_detail = other.partition_detail;
    }
  }

  public TTableDetails deepCopy() {
    return new TTableDetails(this);
  }

  @Override
  public void clear() {
    this.row_desc = null;
    setFragment_sizeIsSet(false);
    this.fragment_size = 0;
    setPage_sizeIsSet(false);
    this.page_size = 0;
    setMax_rowsIsSet(false);
    this.max_rows = 0;
    this.view_sql = null;
    setShard_countIsSet(false);
    this.shard_count = 0;
    this.key_metainfo = null;
    setIs_temporaryIsSet(false);
    this.is_temporary = false;
    this.partition_detail = null;
  }

  public int getRow_descSize() {
    return (this.row_desc == null) ? 0 : this.row_desc.size();
  }

  public java.util.Iterator<TColumnType> getRow_descIterator() {
    return (this.row_desc == null) ? null : this.row_desc.iterator();
  }

  public void addToRow_desc(TColumnType elem) {
    if (this.row_desc == null) {
      this.row_desc = new java.util.ArrayList<TColumnType>();
    }
    this.row_desc.add(elem);
  }

  public java.util.List<TColumnType> getRow_desc() {
    return this.row_desc;
  }

  public TTableDetails setRow_desc(java.util.List<TColumnType> row_desc) {
    this.row_desc = row_desc;
    return this;
  }

  public void unsetRow_desc() {
    this.row_desc = null;
  }

  /** Returns true if field row_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_desc() {
    return this.row_desc != null;
  }

  public void setRow_descIsSet(boolean value) {
    if (!value) {
      this.row_desc = null;
    }
  }

  public long getFragment_size() {
    return this.fragment_size;
  }

  public TTableDetails setFragment_size(long fragment_size) {
    this.fragment_size = fragment_size;
    setFragment_sizeIsSet(true);
    return this;
  }

  public void unsetFragment_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENT_SIZE_ISSET_ID);
  }

  /** Returns true if field fragment_size is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENT_SIZE_ISSET_ID);
  }

  public void setFragment_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENT_SIZE_ISSET_ID, value);
  }

  public long getPage_size() {
    return this.page_size;
  }

  public TTableDetails setPage_size(long page_size) {
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    return this;
  }

  public void unsetPage_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
  }

  /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
  }

  public void setPage_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
  }

  public long getMax_rows() {
    return this.max_rows;
  }

  public TTableDetails setMax_rows(long max_rows) {
    this.max_rows = max_rows;
    setMax_rowsIsSet(true);
    return this;
  }

  public void unsetMax_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ROWS_ISSET_ID);
  }

  /** Returns true if field max_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ROWS_ISSET_ID);
  }

  public void setMax_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ROWS_ISSET_ID, value);
  }

  public java.lang.String getView_sql() {
    return this.view_sql;
  }

  public TTableDetails setView_sql(java.lang.String view_sql) {
    this.view_sql = view_sql;
    return this;
  }

  public void unsetView_sql() {
    this.view_sql = null;
  }

  /** Returns true if field view_sql is set (has been assigned a value) and false otherwise */
  public boolean isSetView_sql() {
    return this.view_sql != null;
  }

  public void setView_sqlIsSet(boolean value) {
    if (!value) {
      this.view_sql = null;
    }
  }

  public long getShard_count() {
    return this.shard_count;
  }

  public TTableDetails setShard_count(long shard_count) {
    this.shard_count = shard_count;
    setShard_countIsSet(true);
    return this;
  }

  public void unsetShard_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARD_COUNT_ISSET_ID);
  }

  /** Returns true if field shard_count is set (has been assigned a value) and false otherwise */
  public boolean isSetShard_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARD_COUNT_ISSET_ID);
  }

  public void setShard_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARD_COUNT_ISSET_ID, value);
  }

  public java.lang.String getKey_metainfo() {
    return this.key_metainfo;
  }

  public TTableDetails setKey_metainfo(java.lang.String key_metainfo) {
    this.key_metainfo = key_metainfo;
    return this;
  }

  public void unsetKey_metainfo() {
    this.key_metainfo = null;
  }

  /** Returns true if field key_metainfo is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_metainfo() {
    return this.key_metainfo != null;
  }

  public void setKey_metainfoIsSet(boolean value) {
    if (!value) {
      this.key_metainfo = null;
    }
  }

  public boolean isIs_temporary() {
    return this.is_temporary;
  }

  public TTableDetails setIs_temporary(boolean is_temporary) {
    this.is_temporary = is_temporary;
    setIs_temporaryIsSet(true);
    return this;
  }

  public void unsetIs_temporary() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_TEMPORARY_ISSET_ID);
  }

  /** Returns true if field is_temporary is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_temporary() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_TEMPORARY_ISSET_ID);
  }

  public void setIs_temporaryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_TEMPORARY_ISSET_ID, value);
  }

  /**
   * 
   * @see TPartitionDetail
   */
  public TPartitionDetail getPartition_detail() {
    return this.partition_detail;
  }

  /**
   * 
   * @see TPartitionDetail
   */
  public TTableDetails setPartition_detail(TPartitionDetail partition_detail) {
    this.partition_detail = partition_detail;
    return this;
  }

  public void unsetPartition_detail() {
    this.partition_detail = null;
  }

  /** Returns true if field partition_detail is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_detail() {
    return this.partition_detail != null;
  }

  public void setPartition_detailIsSet(boolean value) {
    if (!value) {
      this.partition_detail = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ROW_DESC:
      if (value == null) {
        unsetRow_desc();
      } else {
        setRow_desc((java.util.List<TColumnType>)value);
      }
      break;

    case FRAGMENT_SIZE:
      if (value == null) {
        unsetFragment_size();
      } else {
        setFragment_size((java.lang.Long)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPage_size();
      } else {
        setPage_size((java.lang.Long)value);
      }
      break;

    case MAX_ROWS:
      if (value == null) {
        unsetMax_rows();
      } else {
        setMax_rows((java.lang.Long)value);
      }
      break;

    case VIEW_SQL:
      if (value == null) {
        unsetView_sql();
      } else {
        setView_sql((java.lang.String)value);
      }
      break;

    case SHARD_COUNT:
      if (value == null) {
        unsetShard_count();
      } else {
        setShard_count((java.lang.Long)value);
      }
      break;

    case KEY_METAINFO:
      if (value == null) {
        unsetKey_metainfo();
      } else {
        setKey_metainfo((java.lang.String)value);
      }
      break;

    case IS_TEMPORARY:
      if (value == null) {
        unsetIs_temporary();
      } else {
        setIs_temporary((java.lang.Boolean)value);
      }
      break;

    case PARTITION_DETAIL:
      if (value == null) {
        unsetPartition_detail();
      } else {
        setPartition_detail((TPartitionDetail)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW_DESC:
      return getRow_desc();

    case FRAGMENT_SIZE:
      return getFragment_size();

    case PAGE_SIZE:
      return getPage_size();

    case MAX_ROWS:
      return getMax_rows();

    case VIEW_SQL:
      return getView_sql();

    case SHARD_COUNT:
      return getShard_count();

    case KEY_METAINFO:
      return getKey_metainfo();

    case IS_TEMPORARY:
      return isIs_temporary();

    case PARTITION_DETAIL:
      return getPartition_detail();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROW_DESC:
      return isSetRow_desc();
    case FRAGMENT_SIZE:
      return isSetFragment_size();
    case PAGE_SIZE:
      return isSetPage_size();
    case MAX_ROWS:
      return isSetMax_rows();
    case VIEW_SQL:
      return isSetView_sql();
    case SHARD_COUNT:
      return isSetShard_count();
    case KEY_METAINFO:
      return isSetKey_metainfo();
    case IS_TEMPORARY:
      return isSetIs_temporary();
    case PARTITION_DETAIL:
      return isSetPartition_detail();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableDetails)
      return this.equals((TTableDetails)that);
    return false;
  }

  public boolean equals(TTableDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_row_desc = true && this.isSetRow_desc();
    boolean that_present_row_desc = true && that.isSetRow_desc();
    if (this_present_row_desc || that_present_row_desc) {
      if (!(this_present_row_desc && that_present_row_desc))
        return false;
      if (!this.row_desc.equals(that.row_desc))
        return false;
    }

    boolean this_present_fragment_size = true;
    boolean that_present_fragment_size = true;
    if (this_present_fragment_size || that_present_fragment_size) {
      if (!(this_present_fragment_size && that_present_fragment_size))
        return false;
      if (this.fragment_size != that.fragment_size)
        return false;
    }

    boolean this_present_page_size = true;
    boolean that_present_page_size = true;
    if (this_present_page_size || that_present_page_size) {
      if (!(this_present_page_size && that_present_page_size))
        return false;
      if (this.page_size != that.page_size)
        return false;
    }

    boolean this_present_max_rows = true;
    boolean that_present_max_rows = true;
    if (this_present_max_rows || that_present_max_rows) {
      if (!(this_present_max_rows && that_present_max_rows))
        return false;
      if (this.max_rows != that.max_rows)
        return false;
    }

    boolean this_present_view_sql = true && this.isSetView_sql();
    boolean that_present_view_sql = true && that.isSetView_sql();
    if (this_present_view_sql || that_present_view_sql) {
      if (!(this_present_view_sql && that_present_view_sql))
        return false;
      if (!this.view_sql.equals(that.view_sql))
        return false;
    }

    boolean this_present_shard_count = true;
    boolean that_present_shard_count = true;
    if (this_present_shard_count || that_present_shard_count) {
      if (!(this_present_shard_count && that_present_shard_count))
        return false;
      if (this.shard_count != that.shard_count)
        return false;
    }

    boolean this_present_key_metainfo = true && this.isSetKey_metainfo();
    boolean that_present_key_metainfo = true && that.isSetKey_metainfo();
    if (this_present_key_metainfo || that_present_key_metainfo) {
      if (!(this_present_key_metainfo && that_present_key_metainfo))
        return false;
      if (!this.key_metainfo.equals(that.key_metainfo))
        return false;
    }

    boolean this_present_is_temporary = true;
    boolean that_present_is_temporary = true;
    if (this_present_is_temporary || that_present_is_temporary) {
      if (!(this_present_is_temporary && that_present_is_temporary))
        return false;
      if (this.is_temporary != that.is_temporary)
        return false;
    }

    boolean this_present_partition_detail = true && this.isSetPartition_detail();
    boolean that_present_partition_detail = true && that.isSetPartition_detail();
    if (this_present_partition_detail || that_present_partition_detail) {
      if (!(this_present_partition_detail && that_present_partition_detail))
        return false;
      if (!this.partition_detail.equals(that.partition_detail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRow_desc()) ? 131071 : 524287);
    if (isSetRow_desc())
      hashCode = hashCode * 8191 + row_desc.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fragment_size);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(page_size);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_rows);

    hashCode = hashCode * 8191 + ((isSetView_sql()) ? 131071 : 524287);
    if (isSetView_sql())
      hashCode = hashCode * 8191 + view_sql.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shard_count);

    hashCode = hashCode * 8191 + ((isSetKey_metainfo()) ? 131071 : 524287);
    if (isSetKey_metainfo())
      hashCode = hashCode * 8191 + key_metainfo.hashCode();

    hashCode = hashCode * 8191 + ((is_temporary) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPartition_detail()) ? 131071 : 524287);
    if (isSetPartition_detail())
      hashCode = hashCode * 8191 + partition_detail.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TTableDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRow_desc()).compareTo(other.isSetRow_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_desc, other.row_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFragment_size()).compareTo(other.isSetFragment_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_size, other.fragment_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_rows()).compareTo(other.isSetMax_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_rows, other.max_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetView_sql()).compareTo(other.isSetView_sql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetView_sql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.view_sql, other.view_sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShard_count()).compareTo(other.isSetShard_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShard_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_count, other.shard_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey_metainfo()).compareTo(other.isSetKey_metainfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_metainfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_metainfo, other.key_metainfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_temporary()).compareTo(other.isSetIs_temporary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_temporary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_temporary, other.is_temporary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartition_detail()).compareTo(other.isSetPartition_detail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_detail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_detail, other.partition_detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableDetails(");
    boolean first = true;

    sb.append("row_desc:");
    if (this.row_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.row_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_size:");
    sb.append(this.fragment_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page_size:");
    sb.append(this.page_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_rows:");
    sb.append(this.max_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("view_sql:");
    if (this.view_sql == null) {
      sb.append("null");
    } else {
      sb.append(this.view_sql);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shard_count:");
    sb.append(this.shard_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_metainfo:");
    if (this.key_metainfo == null) {
      sb.append("null");
    } else {
      sb.append(this.key_metainfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_temporary:");
    sb.append(this.is_temporary);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_detail:");
    if (this.partition_detail == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_detail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableDetailsStandardScheme getScheme() {
      return new TTableDetailsStandardScheme();
    }
  }

  private static class TTableDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.row_desc = new java.util.ArrayList<TColumnType>(_list160.size);
                TColumnType _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = new TColumnType();
                  _elem161.read(iprot);
                  struct.row_desc.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setRow_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fragment_size = iprot.readI64();
              struct.setFragment_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.page_size = iprot.readI64();
              struct.setPage_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_rows = iprot.readI64();
              struct.setMax_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIEW_SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.view_sql = iprot.readString();
              struct.setView_sqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHARD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shard_count = iprot.readI64();
              struct.setShard_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEY_METAINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key_metainfo = iprot.readString();
              struct.setKey_metainfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_TEMPORARY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_temporary = iprot.readBool();
              struct.setIs_temporaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARTITION_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_detail = com.mapd.thrift.server.TPartitionDetail.findByValue(iprot.readI32());
              struct.setPartition_detailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.row_desc != null) {
        oprot.writeFieldBegin(ROW_DESC_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.row_desc.size()));
          for (TColumnType _iter163 : struct.row_desc)
          {
            _iter163.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRAGMENT_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fragment_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.page_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ROWS_FIELD_DESC);
      oprot.writeI64(struct.max_rows);
      oprot.writeFieldEnd();
      if (struct.view_sql != null) {
        oprot.writeFieldBegin(VIEW_SQL_FIELD_DESC);
        oprot.writeString(struct.view_sql);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHARD_COUNT_FIELD_DESC);
      oprot.writeI64(struct.shard_count);
      oprot.writeFieldEnd();
      if (struct.key_metainfo != null) {
        oprot.writeFieldBegin(KEY_METAINFO_FIELD_DESC);
        oprot.writeString(struct.key_metainfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TEMPORARY_FIELD_DESC);
      oprot.writeBool(struct.is_temporary);
      oprot.writeFieldEnd();
      if (struct.partition_detail != null) {
        oprot.writeFieldBegin(PARTITION_DETAIL_FIELD_DESC);
        oprot.writeI32(struct.partition_detail.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableDetailsTupleScheme getScheme() {
      return new TTableDetailsTupleScheme();
    }
  }

  private static class TTableDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRow_desc()) {
        optionals.set(0);
      }
      if (struct.isSetFragment_size()) {
        optionals.set(1);
      }
      if (struct.isSetPage_size()) {
        optionals.set(2);
      }
      if (struct.isSetMax_rows()) {
        optionals.set(3);
      }
      if (struct.isSetView_sql()) {
        optionals.set(4);
      }
      if (struct.isSetShard_count()) {
        optionals.set(5);
      }
      if (struct.isSetKey_metainfo()) {
        optionals.set(6);
      }
      if (struct.isSetIs_temporary()) {
        optionals.set(7);
      }
      if (struct.isSetPartition_detail()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRow_desc()) {
        {
          oprot.writeI32(struct.row_desc.size());
          for (TColumnType _iter164 : struct.row_desc)
          {
            _iter164.write(oprot);
          }
        }
      }
      if (struct.isSetFragment_size()) {
        oprot.writeI64(struct.fragment_size);
      }
      if (struct.isSetPage_size()) {
        oprot.writeI64(struct.page_size);
      }
      if (struct.isSetMax_rows()) {
        oprot.writeI64(struct.max_rows);
      }
      if (struct.isSetView_sql()) {
        oprot.writeString(struct.view_sql);
      }
      if (struct.isSetShard_count()) {
        oprot.writeI64(struct.shard_count);
      }
      if (struct.isSetKey_metainfo()) {
        oprot.writeString(struct.key_metainfo);
      }
      if (struct.isSetIs_temporary()) {
        oprot.writeBool(struct.is_temporary);
      }
      if (struct.isSetPartition_detail()) {
        oprot.writeI32(struct.partition_detail.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.row_desc = new java.util.ArrayList<TColumnType>(_list165.size);
          TColumnType _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new TColumnType();
            _elem166.read(iprot);
            struct.row_desc.add(_elem166);
          }
        }
        struct.setRow_descIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fragment_size = iprot.readI64();
        struct.setFragment_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.page_size = iprot.readI64();
        struct.setPage_sizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.max_rows = iprot.readI64();
        struct.setMax_rowsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.view_sql = iprot.readString();
        struct.setView_sqlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shard_count = iprot.readI64();
        struct.setShard_countIsSet(true);
      }
      if (incoming.get(6)) {
        struct.key_metainfo = iprot.readString();
        struct.setKey_metainfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_temporary = iprot.readBool();
        struct.setIs_temporaryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.partition_detail = com.mapd.thrift.server.TPartitionDetail.findByValue(iprot.readI32());
        struct.setPartition_detailIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

