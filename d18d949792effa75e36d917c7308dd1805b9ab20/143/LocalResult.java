/*
 * Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (http://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */
package org.h2.result;

import org.h2.engine.SysProperties;
import org.h2.value.Value;

/**
 * A local result set contains all row data of a result set.
 * The object is generated by {@link LocalResultFactory},
 * and it is also used directly by the ResultSet class in the embedded mode.
 * The memory usage and other policies are defined by implementation.
 */
//<<<<<<< HEAD
////RowList用于执行update、delete时存放先读取出来的记录
////LocalResult用于在server端执行select时存放查询结果
////ResultRemote用于存放client端从server端返回的结果
//public class LocalResult implements ResultInterface, ResultTarget {
//
//    private int maxMemoryRows;
//    private Session session;
//    private int visibleColumnCount;
//    private Expression[] expressions;
//    private int rowId, rowCount;
//    private ArrayList<Value[]> rows;
//    private SortOrder sort;
//    private ValueHashMap<Value[]> distinctRows;
//    private Value[] currentRow;
//    private int offset;
//    private int limit = -1;
//    private ResultExternal external;
//    private int diskOffset;
//    private boolean distinct;
//    private boolean randomAccess;
//    private boolean closed;
//    private boolean containsLobs;
//
//    /**
//     * Construct a local result object.
//     */
//    public LocalResult() {
//        // nothing to do
//    }
//
//=======
public interface LocalResult extends ResultInterface, ResultTarget {
    /**
     * Redefine count of maximum rows holds in memory for the result.
     *
     * @param maxValue Maximum rows count in memory.
     *
     * @see SysProperties#MAX_MEMORY_ROWS
     */
    public void setMaxMemoryRows(int maxValue);

    /**
     * @param sort Sort order.
     */
    public void setSortOrder(SortOrder sort);

    /**
     * Remove duplicate rows.
     */
    public void setDistinct();

    /**
     * Remove rows with duplicates in columns with specified indexes.
     *
     * @param distinctIndexes distinct indexes
     */
    public void setDistinct(int[] distinctIndexes);

    /**
     * Remove the row from the result set if it exists.
     *
     * @param values the row
     */
    public void removeDistinct(Value[] values);

    /**
     * This method is called after all rows have been added.
     */
    public void done();

    /**
     * Set the number of rows that this result will return at the maximum.
     *
     * @param limit the limit (-1 means no limit, 0 means no rows)
     */
//<<<<<<< HEAD
//    @Override
//    public void addRow(Value[] values) {
//    	//distinct和randomAccess(通过ConditionInSelect触发)使用ResultTempTable，其他使用ResultDiskBuffer
//    	//maxMemoryRows、maxMemoryRowsDistinct默认值都是1万
//        cloneLobs(values);
//        if (distinct) {
//            if (distinctRows != null) {
//                ValueArray array = getArrayOfVisible(values);
//                distinctRows.put(array, values); //会触发ValueArray的hashCode方法
//                rowCount = distinctRows.size();
//                if (rowCount > maxMemoryRows) {
//                    external = new ResultTempTable(session, expressions, true, sort);
//                    rowCount = external.addRows(distinctRows.values());
//                    distinctRows = null;
//                }
//            } else {
//                rowCount = external.addRow(values);
//            }
//            return;
//        }
//        rows.add(values);
//        rowCount++;
//        if (rows.size() > maxMemoryRows) {
//            if (external == null) {
//                external = new ResultTempTable(session, expressions, false, sort);
//            }
//            addRowsToDisk();
//        }
//    }
//
//    private void addRowsToDisk() {
//        rowCount = external.addRows(rows);
//        rows.clear();
//    }
//
//    @Override
//    public int getVisibleColumnCount() {
//        return visibleColumnCount;
//    }
//=======
    public void setLimit(int limit);

    /**
     * @param fetchPercent whether limit expression specifies percentage of rows
     */
    public void setFetchPercent(boolean fetchPercent);

    /**
     * @param withTies whether tied rows should be included in result too
     */
    public void setWithTies(boolean withTies);

    /**
     * Set the offset of the first row to return.
     *
     * @param offset the offset
     */
    public void setOffset(int offset);
}
