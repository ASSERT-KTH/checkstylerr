// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/credentials/v1/common.proto

package com.google.cloud.iam.credentials.v1;

/** Protobuf type {@code google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest} */
public final class GenerateIdentityBindingAccessTokenRequest
    extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest)
    GenerateIdentityBindingAccessTokenRequestOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use GenerateIdentityBindingAccessTokenRequest.newBuilder() to construct.
  private GenerateIdentityBindingAccessTokenRequest(
      com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private GenerateIdentityBindingAccessTokenRequest() {
    name_ = "";
    scope_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    jwt_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private GenerateIdentityBindingAccessTokenRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
          case 18:
            {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                scope_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              scope_.add(s);
              break;
            }
          case 26:
            {
              java.lang.String s = input.readStringRequireUtf8();

              jwt_ = s;
              break;
            }
          default:
            {
              if (!parseUnknownFieldProto3(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        scope_ = scope_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.iam.credentials.v1.IAMCredentialsCommonProto
        .internal_static_google_iam_credentials_v1_GenerateIdentityBindingAccessTokenRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.iam.credentials.v1.IAMCredentialsCommonProto
        .internal_static_google_iam_credentials_v1_GenerateIdentityBindingAccessTokenRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest.class,
            com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest.Builder
                .class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   *
   *
   * <pre>
   * The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SCOPE_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList scope_;
  /**
   *
   *
   * <pre>
   * Code to identify the scopes to be included in the OAuth 2.0 access token.
   * See https://developers.google.com/identity/protocols/googlescopes for more
   * information.
   * At least one value required.
   * </pre>
   *
   * <code>repeated string scope = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList getScopeList() {
    return scope_;
  }
  /**
   *
   *
   * <pre>
   * Code to identify the scopes to be included in the OAuth 2.0 access token.
   * See https://developers.google.com/identity/protocols/googlescopes for more
   * information.
   * At least one value required.
   * </pre>
   *
   * <code>repeated string scope = 2;</code>
   */
  public int getScopeCount() {
    return scope_.size();
  }
  /**
   *
   *
   * <pre>
   * Code to identify the scopes to be included in the OAuth 2.0 access token.
   * See https://developers.google.com/identity/protocols/googlescopes for more
   * information.
   * At least one value required.
   * </pre>
   *
   * <code>repeated string scope = 2;</code>
   */
  public java.lang.String getScope(int index) {
    return scope_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Code to identify the scopes to be included in the OAuth 2.0 access token.
   * See https://developers.google.com/identity/protocols/googlescopes for more
   * information.
   * At least one value required.
   * </pre>
   *
   * <code>repeated string scope = 2;</code>
   */
  public com.google.protobuf.ByteString getScopeBytes(int index) {
    return scope_.getByteString(index);
  }

  public static final int JWT_FIELD_NUMBER = 3;
  private volatile java.lang.Object jwt_;
  /**
   *
   *
   * <pre>
   * Required. Input token.
   * Must be in JWT format according to
   * RFC7523 (https://tools.ietf.org/html/rfc7523)
   * and must have 'kid' field in the header.
   * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
   * Mandatory payload fields (along the lines of RFC 7523, section 3):
   * - iss: issuer of the token. Must provide a discovery document at
   *        $iss/.well-known/openid-configuration . The document needs to be
   *        formatted according to section 4.2 of the OpenID Connect Discovery
   *        1.0 specification.
   * - iat: Issue time in seconds since epoch. Must be in the past.
   * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
   *        after iat. We recommend to create tokens that last shorter than 6
   *        hours to improve security unless business reasons mandate longer
   *        expiration times. Shorter token lifetimes are generally more secure
   *        since tokens that have been exfiltrated by attackers can be used for
   *        a shorter time. you can configure the maximum lifetime of the
   *        incoming token in the configuration of the mapper.
   *        The resulting Google token will expire within an hour or at "exp",
   *        whichever is earlier.
   * - sub: JWT subject, identity asserted in the JWT.
   * - aud: Configured in the mapper policy. By default the service account
   *        email.
   * Claims from the incoming token can be transferred into the output token
   * accoding to the mapper configuration. The outgoing claim size is limited.
   * Outgoing claims size must be less than 4kB serialized as JSON without
   * whitespace.
   * Example header:
   * {
   *   "alg": "RS256",
   *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
   * }
   * Example payload:
   * {
   *   "iss": "https://accounts.google.com",
   *   "iat": 1517963104,
   *   "exp": 1517966704,
   *   "aud": "https://iamcredentials.googleapis.com/",
   *   "sub": "113475438248934895348",
   *   "my_claims": {
   *     "additional_claim": "value"
   *   }
   * }
   * </pre>
   *
   * <code>string jwt = 3;</code>
   */
  public java.lang.String getJwt() {
    java.lang.Object ref = jwt_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      jwt_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. Input token.
   * Must be in JWT format according to
   * RFC7523 (https://tools.ietf.org/html/rfc7523)
   * and must have 'kid' field in the header.
   * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
   * Mandatory payload fields (along the lines of RFC 7523, section 3):
   * - iss: issuer of the token. Must provide a discovery document at
   *        $iss/.well-known/openid-configuration . The document needs to be
   *        formatted according to section 4.2 of the OpenID Connect Discovery
   *        1.0 specification.
   * - iat: Issue time in seconds since epoch. Must be in the past.
   * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
   *        after iat. We recommend to create tokens that last shorter than 6
   *        hours to improve security unless business reasons mandate longer
   *        expiration times. Shorter token lifetimes are generally more secure
   *        since tokens that have been exfiltrated by attackers can be used for
   *        a shorter time. you can configure the maximum lifetime of the
   *        incoming token in the configuration of the mapper.
   *        The resulting Google token will expire within an hour or at "exp",
   *        whichever is earlier.
   * - sub: JWT subject, identity asserted in the JWT.
   * - aud: Configured in the mapper policy. By default the service account
   *        email.
   * Claims from the incoming token can be transferred into the output token
   * accoding to the mapper configuration. The outgoing claim size is limited.
   * Outgoing claims size must be less than 4kB serialized as JSON without
   * whitespace.
   * Example header:
   * {
   *   "alg": "RS256",
   *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
   * }
   * Example payload:
   * {
   *   "iss": "https://accounts.google.com",
   *   "iat": 1517963104,
   *   "exp": 1517966704,
   *   "aud": "https://iamcredentials.googleapis.com/",
   *   "sub": "113475438248934895348",
   *   "my_claims": {
   *     "additional_claim": "value"
   *   }
   * }
   * </pre>
   *
   * <code>string jwt = 3;</code>
   */
  public com.google.protobuf.ByteString getJwtBytes() {
    java.lang.Object ref = jwt_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      jwt_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    for (int i = 0; i < scope_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, scope_.getRaw(i));
    }
    if (!getJwtBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, jwt_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < scope_.size(); i++) {
        dataSize += computeStringSizeNoTag(scope_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getScopeList().size();
    }
    if (!getJwtBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, jwt_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj
        instanceof com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest)) {
      return super.equals(obj);
    }
    com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest other =
        (com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest) obj;

    boolean result = true;
    result = result && getName().equals(other.getName());
    result = result && getScopeList().equals(other.getScopeList());
    result = result && getJwt().equals(other.getJwt());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (getScopeCount() > 0) {
      hash = (37 * hash) + SCOPE_FIELD_NUMBER;
      hash = (53 * hash) + getScopeList().hashCode();
    }
    hash = (37 * hash) + JWT_FIELD_NUMBER;
    hash = (53 * hash) + getJwt().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(
          java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseDelimitedFrom(
          java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /** Protobuf type {@code google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest} */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest)
      com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.iam.credentials.v1.IAMCredentialsCommonProto
          .internal_static_google_iam_credentials_v1_GenerateIdentityBindingAccessTokenRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.iam.credentials.v1.IAMCredentialsCommonProto
          .internal_static_google_iam_credentials_v1_GenerateIdentityBindingAccessTokenRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest.class,
              com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest.Builder
                  .class);
    }

    // Construct using
    // com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      scope_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      jwt_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.iam.credentials.v1.IAMCredentialsCommonProto
          .internal_static_google_iam_credentials_v1_GenerateIdentityBindingAccessTokenRequest_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
        getDefaultInstanceForType() {
      return com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
          .getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest build() {
      com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest result =
          buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
        buildPartial() {
      com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest result =
          new com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        scope_ = scope_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.scope_ = scope_;
      result.jwt_ = jwt_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other
          instanceof
          com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest) {
        return mergeFrom(
            (com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(
        com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest other) {
      if (other
          == com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
              .getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.scope_.isEmpty()) {
        if (scope_.isEmpty()) {
          scope_ = other.scope_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureScopeIsMutable();
          scope_.addAll(other.scope_);
        }
        onChanged();
      }
      if (!other.getJwt().isEmpty()) {
        jwt_ = other.jwt_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest parsedMessage =
          null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest)
                e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     *
     *
     * <pre>
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      name_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList scope_ =
        com.google.protobuf.LazyStringArrayList.EMPTY;

    private void ensureScopeIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        scope_ = new com.google.protobuf.LazyStringArrayList(scope_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList getScopeList() {
      return scope_.getUnmodifiableView();
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public int getScopeCount() {
      return scope_.size();
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public java.lang.String getScope(int index) {
      return scope_.get(index);
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public com.google.protobuf.ByteString getScopeBytes(int index) {
      return scope_.getByteString(index);
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public Builder setScope(int index, java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureScopeIsMutable();
      scope_.set(index, value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public Builder addScope(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureScopeIsMutable();
      scope_.add(value);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public Builder addAllScope(java.lang.Iterable<java.lang.String> values) {
      ensureScopeIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(values, scope_);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public Builder clearScope() {
      scope_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     * </pre>
     *
     * <code>repeated string scope = 2;</code>
     */
    public Builder addScopeBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      ensureScopeIsMutable();
      scope_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object jwt_ = "";
    /**
     *
     *
     * <pre>
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     * </pre>
     *
     * <code>string jwt = 3;</code>
     */
    public java.lang.String getJwt() {
      java.lang.Object ref = jwt_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        jwt_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     * </pre>
     *
     * <code>string jwt = 3;</code>
     */
    public com.google.protobuf.ByteString getJwtBytes() {
      java.lang.Object ref = jwt_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        jwt_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     * </pre>
     *
     * <code>string jwt = 3;</code>
     */
    public Builder setJwt(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      jwt_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     * </pre>
     *
     * <code>string jwt = 3;</code>
     */
    public Builder clearJwt() {

      jwt_ = getDefaultInstance().getJwt();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     * </pre>
     *
     * <code>string jwt = 3;</code>
     */
    public Builder setJwtBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      jwt_ = value;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest)
  }

  // @@protoc_insertion_point(class_scope:google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest)
  private static final com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE =
        new com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest();
  }

  public static com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GenerateIdentityBindingAccessTokenRequest>
      PARSER =
          new com.google.protobuf.AbstractParser<GenerateIdentityBindingAccessTokenRequest>() {
            @java.lang.Override
            public GenerateIdentityBindingAccessTokenRequest parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
              return new GenerateIdentityBindingAccessTokenRequest(input, extensionRegistry);
            }
          };

  public static com.google.protobuf.Parser<GenerateIdentityBindingAccessTokenRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GenerateIdentityBindingAccessTokenRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest
      getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
