/* Generated By:JavaCC: Do not edit this line. KRSSParserConstants.java */
package org.semanticweb.owlapi.krss1.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface KRSSParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_START = 5;
  /** RegularExpression Id. */
  int IRI_START = 8;
  /** RegularExpression Id. */
  int IRI_END = 9;
  /** RegularExpression Id. */
  int STRING_LITERAL_START = 11;
  /** RegularExpression Id. */
  int STRINGLITERAL = 13;
  /** RegularExpression Id. */
  int OPENPAR = 15;
  /** RegularExpression Id. */
  int CLOSEPAR = 16;
  /** RegularExpression Id. */
  int ENDTBOX = 17;
  /** RegularExpression Id. */
  int ENDABOX = 18;
  /** RegularExpression Id. */
  int PRIMITIVECONCEPT = 19;
  /** RegularExpression Id. */
  int DEFINEPRIMITIVECONCEPT = 20;
  /** RegularExpression Id. */
  int DEFINECONCEPT = 21;
  /** RegularExpression Id. */
  int DEFINEPRIMITIVEROLE = 22;
  /** RegularExpression Id. */
  int SUBROLE = 23;
  /** RegularExpression Id. */
  int TRANSITIVE = 24;
  /** RegularExpression Id. */
  int ENUM = 25;
  /** RegularExpression Id. */
  int RANGE = 26;
  /** RegularExpression Id. */
  int AND = 27;
  /** RegularExpression Id. */
  int OR = 28;
  /** RegularExpression Id. */
  int NOT = 29;
  /** RegularExpression Id. */
  int ALL = 30;
  /** RegularExpression Id. */
  int SOME = 31;
  /** RegularExpression Id. */
  int NONE = 32;
  /** RegularExpression Id. */
  int ATLEAST = 33;
  /** RegularExpression Id. */
  int ATMOST = 34;
  /** RegularExpression Id. */
  int EXACTLY = 35;
  /** RegularExpression Id. */
  int INSTANCE = 36;
  /** RegularExpression Id. */
  int RELATED = 37;
  /** RegularExpression Id. */
  int EQUAL = 38;
  /** RegularExpression Id. */
  int DISTINCT = 39;
  /** RegularExpression Id. */
  int NAME = 40;
  /** RegularExpression Id. */
  int INT = 41;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_IRI = 2;
  /** Lexical state. */
  int IN_STRING_LITERAL = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "\";\"",
    "\"\\n\"",
    "<token of kind 7>",
    "\"<\"",
    "\">\"",
    "<token of kind 10>",
    "\"\\\"\"",
    "\"\\\\\\\"\"",
    "\"\\\"\"",
    "<token of kind 14>",
    "\"(\"",
    "\")\"",
    "\"end-tbox\"",
    "\"end-abox\"",
    "\"primitive-concept\"",
    "\"define-primitive-concept\"",
    "\"define-concept\"",
    "\"define-primitive-role\"",
    "\"subrole\"",
    "\"transitive\"",
    "\"enum\"",
    "\"range\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"all\"",
    "\"some\"",
    "\"none\"",
    "\"at-least\"",
    "\"at-most\"",
    "\"exactly\"",
    "\"instance\"",
    "\"related\"",
    "\"equal\"",
    "\"distinct\"",
    "<NAME>",
    "<INT>",
    "\":right-identity\"",
  };

}
