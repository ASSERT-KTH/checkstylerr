package nl.tudelft.blockchain.scaleoutdistributedledger;

import nl.tudelft.blockchain.scaleoutdistributedledger.model.Node;
import org.apache.commons.io.IOUtils;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.util.Map;

/**
 * Helper class for interacting with the tracker.
 */
public final class TrackerHelper {
	private TrackerHelper() {
		throw new UnsupportedOperationException();
	}

	/**
	 *
	 * Registers this node with the given public key.
	 * @param publicKey - the public key to register with
	 * @return            the assigned id
	 * @throws IOException - exception while registering node
	 */
	public static int registerNode(byte[] publicKey) throws IOException, NodeRegisterFailedException {
		JSONObject json = new JSONObject();
		json.put("address", Application.TRACKER_SERVER_ADDRESS);
		json.put("port", Application.TRACKER_SERVER_PORT);
		json.put("publicKey", publicKey);
		HttpClient client = HttpClientBuilder.create().build();
		StringEntity requestEntity = new StringEntity(json.toString(), ContentType.APPLICATION_JSON);
		HttpPost request = new HttpPost(String.format("http://%s:%d/register-node", Application.TRACKER_SERVER_ADDRESS, Application.TRACKER_SERVER_PORT));
		request.setEntity(requestEntity);
		JSONObject response = new JSONObject(IOUtils.toString(client.execute(request).getEntity().getContent()));
		if (response.getBoolean("success")) return response.getInt("id");
		throw new NodeRegisterFailedException();
	}

	/**
	 *
	 * Updates the given map of nodes with new information from the tracker.
	 * @param nodes - the map of nodes
	 * @throws IOException - exception while updating nodes
	 */
	public static void updateNodes(Map<Integer, Node> nodes) throws IOException {
		HttpClient client = HttpClientBuilder.create().build();
		HttpGet request = new HttpGet(String.format("http://%s:%d", Application.TRACKER_SERVER_ADDRESS, Application.TRACKER_SERVER_PORT));
		JSONArray nodesArray = (JSONArray) new JSONObject(IOUtils.toString(client.execute(request).getEntity().getContent())).get("nodes");

		for (int i = 0; i < nodesArray.length(); i++) {
			JSONObject object = (JSONObject) nodesArray.get(i);
			byte[] publicKey = jsonArrayToByteArray((JSONArray) object.get("publicKey"));
			String address = object.getString("address");
			int port = object.getInt("port");
			if (nodes.containsKey(i)) {
				Node node = nodes.get(i);
				node.setAddress(address);
				node.setPort(object.getInt("port"));
			} else {
				Node node = new Node(i, publicKey, address, port);
				nodes.put(i, node);
			}
		}
	}

	/**
	 * Converts JSONArray containing ints to byte array.
	 * @param json - the jsonarray to convert.
	 * @return - the generated byte array
	 */
	private static byte[] jsonArrayToByteArray(JSONArray json) {
		byte[] res = new byte[json.length()];
		for (int i = 0; i < json.length(); i++) {
			res[i] = (byte) json.getInt(i);
		}
		return res;
	}
}
