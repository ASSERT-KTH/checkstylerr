// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto

package com.google.spanner.v1;

public interface ExecuteBatchDmlRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.spanner.v1.ExecuteBatchDmlRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. The session in which the DML statements should be performed.
   * </pre>
   *
   * <code>string session = 1;</code>
   */
  java.lang.String getSession();
  /**
   *
   *
   * <pre>
   * Required. The session in which the DML statements should be performed.
   * </pre>
   *
   * <code>string session = 1;</code>
   */
  com.google.protobuf.ByteString getSessionBytes();

  /**
   *
   *
   * <pre>
   * The transaction to use. A ReadWrite transaction is required. Single-use
   * transactions are not supported (to avoid replay).  The caller must either
   * supply an existing transaction ID or begin a new transaction.
   * </pre>
   *
   * <code>.google.spanner.v1.TransactionSelector transaction = 2;</code>
   */
  boolean hasTransaction();
  /**
   *
   *
   * <pre>
   * The transaction to use. A ReadWrite transaction is required. Single-use
   * transactions are not supported (to avoid replay).  The caller must either
   * supply an existing transaction ID or begin a new transaction.
   * </pre>
   *
   * <code>.google.spanner.v1.TransactionSelector transaction = 2;</code>
   */
  com.google.spanner.v1.TransactionSelector getTransaction();
  /**
   *
   *
   * <pre>
   * The transaction to use. A ReadWrite transaction is required. Single-use
   * transactions are not supported (to avoid replay).  The caller must either
   * supply an existing transaction ID or begin a new transaction.
   * </pre>
   *
   * <code>.google.spanner.v1.TransactionSelector transaction = 2;</code>
   */
  com.google.spanner.v1.TransactionSelectorOrBuilder getTransactionOrBuilder();

  /**
   *
   *
   * <pre>
   * The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement i are visible to statement
   * i+1. Each statement must be a DML statement. Execution will stop at the
   * first failed statement; the remaining statements will not run.
   * REQUIRES: statements_size() &gt; 0.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3;</code>
   */
  java.util.List<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement> getStatementsList();
  /**
   *
   *
   * <pre>
   * The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement i are visible to statement
   * i+1. Each statement must be a DML statement. Execution will stop at the
   * first failed statement; the remaining statements will not run.
   * REQUIRES: statements_size() &gt; 0.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3;</code>
   */
  com.google.spanner.v1.ExecuteBatchDmlRequest.Statement getStatements(int index);
  /**
   *
   *
   * <pre>
   * The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement i are visible to statement
   * i+1. Each statement must be a DML statement. Execution will stop at the
   * first failed statement; the remaining statements will not run.
   * REQUIRES: statements_size() &gt; 0.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3;</code>
   */
  int getStatementsCount();
  /**
   *
   *
   * <pre>
   * The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement i are visible to statement
   * i+1. Each statement must be a DML statement. Execution will stop at the
   * first failed statement; the remaining statements will not run.
   * REQUIRES: statements_size() &gt; 0.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3;</code>
   */
  java.util.List<? extends com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder>
      getStatementsOrBuilderList();
  /**
   *
   *
   * <pre>
   * The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement i are visible to statement
   * i+1. Each statement must be a DML statement. Execution will stop at the
   * first failed statement; the remaining statements will not run.
   * REQUIRES: statements_size() &gt; 0.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3;</code>
   */
  com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder getStatementsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * A per-transaction sequence number used to identify this request. This is
   * used in the same space as the seqno in
   * [ExecuteSqlRequest][Spanner.ExecuteSqlRequest]. See more details
   * in [ExecuteSqlRequest][Spanner.ExecuteSqlRequest].
   * </pre>
   *
   * <code>int64 seqno = 4;</code>
   */
  long getSeqno();
}
