// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/metric.proto

package com.google.api;

/**
 * Protobuf type {@code google.api.MetricDescriptor}
 *
 * <pre>
 * A description of a type of metric.
 * </pre>
 */
public  final class MetricDescriptor extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.api.MetricDescriptor)
    MetricDescriptorOrBuilder {
  // Use MetricDescriptor.newBuilder() to construct.
  private MetricDescriptor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private MetricDescriptor() {
    name_ = "";
    labels_ = java.util.Collections.emptyList();
    metricKind_ = 0;
    valueType_ = 0;
    unit_ = "";
    description_ = "";
    displayName_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private MetricDescriptor(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              labels_ = new java.util.ArrayList<com.google.api.LabelDescriptor>();
              mutable_bitField0_ |= 0x00000002;
            }
            labels_.add(input.readMessage(com.google.api.LabelDescriptor.parser(), extensionRegistry));
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            metricKind_ = rawValue;
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            valueType_ = rawValue;
            break;
          }
          case 42: {
            String s = input.readStringRequireUtf8();

            unit_ = s;
            break;
          }
          case 50: {
            String s = input.readStringRequireUtf8();

            description_ = s;
            break;
          }
          case 58: {
            String s = input.readStringRequireUtf8();

            displayName_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        labels_ = java.util.Collections.unmodifiableList(labels_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.api.MetricProto.internal_static_google_api_MetricDescriptor_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.api.MetricProto.internal_static_google_api_MetricDescriptor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.api.MetricDescriptor.class, com.google.api.MetricDescriptor.Builder.class);
  }

  /**
   * Protobuf enum {@code google.api.MetricDescriptor.MetricKind}
   *
   * <pre>
   * The kind of measurement. It describes how the data is reported.
   * </pre>
   */
  public enum MetricKind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>METRIC_KIND_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * An unspecified metric kind. The metric descriptor must specify a value
     * different from `METRIC_KIND_UNSPECIFIED`.
     * </pre>
     */
    METRIC_KIND_UNSPECIFIED(0, 0),
    /**
     * <code>GAUGE = 1;</code>
     *
     * <pre>
     * Instantaneous measurements of a varying quantity.
     * </pre>
     */
    GAUGE(1, 1),
    /**
     * <code>DELTA = 2;</code>
     *
     * <pre>
     * Changes over non-overlapping time intervals.
     * </pre>
     */
    DELTA(2, 2),
    /**
     * <code>CUMULATIVE = 3;</code>
     *
     * <pre>
     * Cumulative value over time intervals that can overlap.
     * The overlapping intervals must have the same start time.
     * </pre>
     */
    CUMULATIVE(3, 3),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>METRIC_KIND_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * An unspecified metric kind. The metric descriptor must specify a value
     * different from `METRIC_KIND_UNSPECIFIED`.
     * </pre>
     */
    public static final int METRIC_KIND_UNSPECIFIED_VALUE = 0;
    /**
     * <code>GAUGE = 1;</code>
     *
     * <pre>
     * Instantaneous measurements of a varying quantity.
     * </pre>
     */
    public static final int GAUGE_VALUE = 1;
    /**
     * <code>DELTA = 2;</code>
     *
     * <pre>
     * Changes over non-overlapping time intervals.
     * </pre>
     */
    public static final int DELTA_VALUE = 2;
    /**
     * <code>CUMULATIVE = 3;</code>
     *
     * <pre>
     * Cumulative value over time intervals that can overlap.
     * The overlapping intervals must have the same start time.
     * </pre>
     */
    public static final int CUMULATIVE_VALUE = 3;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    public static MetricKind valueOf(int value) {
      switch (value) {
        case 0: return METRIC_KIND_UNSPECIFIED;
        case 1: return GAUGE;
        case 2: return DELTA;
        case 3: return CUMULATIVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MetricKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MetricKind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MetricKind>() {
            public MetricKind findValueByNumber(int number) {
              return MetricKind.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.api.MetricDescriptor.getDescriptor().getEnumTypes().get(0);
    }

    private static final MetricKind[] VALUES = values();

    public static MetricKind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MetricKind(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.api.MetricDescriptor.MetricKind)
  }

  /**
   * Protobuf enum {@code google.api.MetricDescriptor.ValueType}
   *
   * <pre>
   * The value type of a metric.
   * </pre>
   */
  public enum ValueType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>VALUE_TYPE_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * An unspecified value type. The metric descriptor must specify a value
     * different from `VALUE_TYPE_UNSPECIFIED`.
     * </pre>
     */
    VALUE_TYPE_UNSPECIFIED(0, 0),
    /**
     * <code>BOOL = 1;</code>
     *
     * <pre>
     * The value is a boolean.
     * This value type can be used only if the metric kind is `GAUGE`.
     * </pre>
     */
    BOOL(1, 1),
    /**
     * <code>INT64 = 2;</code>
     *
     * <pre>
     * The value is a signed 64-bit integer.
     * </pre>
     */
    INT64(2, 2),
    /**
     * <code>DOUBLE = 3;</code>
     *
     * <pre>
     * The value is a double precision floating point number.
     * </pre>
     */
    DOUBLE(3, 3),
    /**
     * <code>STRING = 4;</code>
     *
     * <pre>
     * The value is a text string.
     * This value type can be used only if the metric kind is `GAUGE`.
     * </pre>
     */
    STRING(4, 4),
    /**
     * <code>DISTRIBUTION = 5;</code>
     *
     * <pre>
     * The value is a distribution.
     * </pre>
     */
    DISTRIBUTION(5, 5),
    /**
     * <code>MONEY = 6;</code>
     *
     * <pre>
     * The value is money.
     * </pre>
     */
    MONEY(6, 6),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>VALUE_TYPE_UNSPECIFIED = 0;</code>
     *
     * <pre>
     * An unspecified value type. The metric descriptor must specify a value
     * different from `VALUE_TYPE_UNSPECIFIED`.
     * </pre>
     */
    public static final int VALUE_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>BOOL = 1;</code>
     *
     * <pre>
     * The value is a boolean.
     * This value type can be used only if the metric kind is `GAUGE`.
     * </pre>
     */
    public static final int BOOL_VALUE = 1;
    /**
     * <code>INT64 = 2;</code>
     *
     * <pre>
     * The value is a signed 64-bit integer.
     * </pre>
     */
    public static final int INT64_VALUE = 2;
    /**
     * <code>DOUBLE = 3;</code>
     *
     * <pre>
     * The value is a double precision floating point number.
     * </pre>
     */
    public static final int DOUBLE_VALUE = 3;
    /**
     * <code>STRING = 4;</code>
     *
     * <pre>
     * The value is a text string.
     * This value type can be used only if the metric kind is `GAUGE`.
     * </pre>
     */
    public static final int STRING_VALUE = 4;
    /**
     * <code>DISTRIBUTION = 5;</code>
     *
     * <pre>
     * The value is a distribution.
     * </pre>
     */
    public static final int DISTRIBUTION_VALUE = 5;
    /**
     * <code>MONEY = 6;</code>
     *
     * <pre>
     * The value is money.
     * </pre>
     */
    public static final int MONEY_VALUE = 6;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    public static ValueType valueOf(int value) {
      switch (value) {
        case 0: return VALUE_TYPE_UNSPECIFIED;
        case 1: return BOOL;
        case 2: return INT64;
        case 3: return DOUBLE;
        case 4: return STRING;
        case 5: return DISTRIBUTION;
        case 6: return MONEY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ValueType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ValueType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ValueType>() {
            public ValueType findValueByNumber(int number) {
              return ValueType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.api.MetricDescriptor.getDescriptor().getEnumTypes().get(1);
    }

    private static final ValueType[] VALUES = values();

    public static ValueType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ValueType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.api.MetricDescriptor.ValueType)
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The name of the metric type, including a domain prefix, such as
   * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
   * should use a natural hierarchical grouping such as the following:
   *     compute.googleapis.com/instance/cpu/utilization
   *     compute.googleapis.com/instance/disk/read_ops_count
   *     compute.googleapis.com/instance/network/received_bytes_count
   * Note that if the metric name changes, the monitoring data will be
   * discontinued, and anything depends on it will break, such as monitoring
   * dashborads, alerting rules and quota limits. Therefore, once a metric has
   * been published, its name should be immutable. You can use the display_name
   * field to provide a user-friendly name for the metric.
   * </pre>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <code>optional string name = 1;</code>
   *
   * <pre>
   * The name of the metric type, including a domain prefix, such as
   * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
   * should use a natural hierarchical grouping such as the following:
   *     compute.googleapis.com/instance/cpu/utilization
   *     compute.googleapis.com/instance/disk/read_ops_count
   *     compute.googleapis.com/instance/network/received_bytes_count
   * Note that if the metric name changes, the monitoring data will be
   * discontinued, and anything depends on it will break, such as monitoring
   * dashborads, alerting rules and quota limits. Therefore, once a metric has
   * been published, its name should be immutable. You can use the display_name
   * field to provide a user-friendly name for the metric.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LABELS_FIELD_NUMBER = 2;
  private java.util.List<com.google.api.LabelDescriptor> labels_;
  /**
   * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
   *
   * <pre>
   * The set of labels that can be used to describe a specific instance of this
   * metric type. For example, the
   * `compute.googleapis.com/instance/network/received_bytes_count` metric type
   * has a label, `loadbalanced`, that specifies whether the traffic was
   * received through a load balanced IP address.
   * </pre>
   */
  public java.util.List<com.google.api.LabelDescriptor> getLabelsList() {
    return labels_;
  }
  /**
   * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
   *
   * <pre>
   * The set of labels that can be used to describe a specific instance of this
   * metric type. For example, the
   * `compute.googleapis.com/instance/network/received_bytes_count` metric type
   * has a label, `loadbalanced`, that specifies whether the traffic was
   * received through a load balanced IP address.
   * </pre>
   */
  public java.util.List<? extends com.google.api.LabelDescriptorOrBuilder> 
      getLabelsOrBuilderList() {
    return labels_;
  }
  /**
   * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
   *
   * <pre>
   * The set of labels that can be used to describe a specific instance of this
   * metric type. For example, the
   * `compute.googleapis.com/instance/network/received_bytes_count` metric type
   * has a label, `loadbalanced`, that specifies whether the traffic was
   * received through a load balanced IP address.
   * </pre>
   */
  public int getLabelsCount() {
    return labels_.size();
  }
  /**
   * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
   *
   * <pre>
   * The set of labels that can be used to describe a specific instance of this
   * metric type. For example, the
   * `compute.googleapis.com/instance/network/received_bytes_count` metric type
   * has a label, `loadbalanced`, that specifies whether the traffic was
   * received through a load balanced IP address.
   * </pre>
   */
  public com.google.api.LabelDescriptor getLabels(int index) {
    return labels_.get(index);
  }
  /**
   * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
   *
   * <pre>
   * The set of labels that can be used to describe a specific instance of this
   * metric type. For example, the
   * `compute.googleapis.com/instance/network/received_bytes_count` metric type
   * has a label, `loadbalanced`, that specifies whether the traffic was
   * received through a load balanced IP address.
   * </pre>
   */
  public com.google.api.LabelDescriptorOrBuilder getLabelsOrBuilder(
      int index) {
    return labels_.get(index);
  }

  public static final int METRIC_KIND_FIELD_NUMBER = 3;
  private int metricKind_;
  /**
   * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
   *
   * <pre>
   * Whether the metric records instantaneous values, changes to a value, etc.
   * </pre>
   */
  public int getMetricKindValue() {
    return metricKind_;
  }
  /**
   * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
   *
   * <pre>
   * Whether the metric records instantaneous values, changes to a value, etc.
   * </pre>
   */
  public com.google.api.MetricDescriptor.MetricKind getMetricKind() {
    com.google.api.MetricDescriptor.MetricKind result = com.google.api.MetricDescriptor.MetricKind.valueOf(metricKind_);
    return result == null ? com.google.api.MetricDescriptor.MetricKind.UNRECOGNIZED : result;
  }

  public static final int VALUE_TYPE_FIELD_NUMBER = 4;
  private int valueType_;
  /**
   * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
   *
   * <pre>
   * Whether the measurement is an integer, a floating-point number, etc.
   * </pre>
   */
  public int getValueTypeValue() {
    return valueType_;
  }
  /**
   * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
   *
   * <pre>
   * Whether the measurement is an integer, a floating-point number, etc.
   * </pre>
   */
  public com.google.api.MetricDescriptor.ValueType getValueType() {
    com.google.api.MetricDescriptor.ValueType result = com.google.api.MetricDescriptor.ValueType.valueOf(valueType_);
    return result == null ? com.google.api.MetricDescriptor.ValueType.UNRECOGNIZED : result;
  }

  public static final int UNIT_FIELD_NUMBER = 5;
  private volatile java.lang.Object unit_;
  /**
   * <code>optional string unit = 5;</code>
   *
   * <pre>
   * The unit in which the metric value is reported. It is only applicable
   * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
   * supported units are a subset of [The Unified Code for Units of
   * Measure](http://unitsofmeasure.org/ucum.html) standard:
   * **Basic units (UNIT)**
   * * `bit`   bit
   * * `By`    byte
   * * `s`     second
   * * `min`   minute
   * * `h`     hour
   * * `d`     day
   * **Prefixes (PREFIX)**
   * * `k`     kilo    (10**3)
   * * `M`     mega    (10**6)
   * * `G`     giga    (10**9)
   * * `T`     tera    (10**12)
   * * `P`     peta    (10**15)
   * * `E`     exa     (10**18)
   * * `Z`     zetta   (10**21)
   * * `Y`     yotta   (10**24)
   * * `m`     milli   (10**-3)
   * * `u`     micro   (10**-6)
   * * `n`     nano    (10**-9)
   * * `p`     pico    (10**-12)
   * * `f`     femto   (10**-15)
   * * `a`     atto    (10**-18)
   * * `z`     zepto   (10**-21)
   * * `y`     yocto   (10**-24)
   * * `Ki`    kibi    (2**10)
   * * `Mi`    mebi    (2**20)
   * * `Gi`    gibi    (2**30)
   * * `Ti`    tebi    (2**40)
   * **Grammar**
   * The grammar includes the dimensionless unit `1`, such as `1/s`.
   * The grammar also includes these connectors:
   * * `/`    division (as an infix operator, e.g. `1/s`).
   * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
   * The grammar for a unit is as follows:
   *     Expression = Component { "." Component } { "/" Component } ;
   *     Component = [ PREFIX ] UNIT [ Annotation ]
   *               | Annotation
   *               | "1"
   *               ;
   *     Annotation = "{" NAME "}" ;
   * Notes:
   * * `Annotation` is just a comment if it follows a `UNIT` and is
   *    equivalent to `1` if it is used alone. For examples,
   *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
   * * `NAME` is a sequence of non-blank printable ASCII characters not
   *    containing '{' or '}'.
   * </pre>
   */
  public java.lang.String getUnit() {
    java.lang.Object ref = unit_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      unit_ = s;
      return s;
    }
  }
  /**
   * <code>optional string unit = 5;</code>
   *
   * <pre>
   * The unit in which the metric value is reported. It is only applicable
   * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
   * supported units are a subset of [The Unified Code for Units of
   * Measure](http://unitsofmeasure.org/ucum.html) standard:
   * **Basic units (UNIT)**
   * * `bit`   bit
   * * `By`    byte
   * * `s`     second
   * * `min`   minute
   * * `h`     hour
   * * `d`     day
   * **Prefixes (PREFIX)**
   * * `k`     kilo    (10**3)
   * * `M`     mega    (10**6)
   * * `G`     giga    (10**9)
   * * `T`     tera    (10**12)
   * * `P`     peta    (10**15)
   * * `E`     exa     (10**18)
   * * `Z`     zetta   (10**21)
   * * `Y`     yotta   (10**24)
   * * `m`     milli   (10**-3)
   * * `u`     micro   (10**-6)
   * * `n`     nano    (10**-9)
   * * `p`     pico    (10**-12)
   * * `f`     femto   (10**-15)
   * * `a`     atto    (10**-18)
   * * `z`     zepto   (10**-21)
   * * `y`     yocto   (10**-24)
   * * `Ki`    kibi    (2**10)
   * * `Mi`    mebi    (2**20)
   * * `Gi`    gibi    (2**30)
   * * `Ti`    tebi    (2**40)
   * **Grammar**
   * The grammar includes the dimensionless unit `1`, such as `1/s`.
   * The grammar also includes these connectors:
   * * `/`    division (as an infix operator, e.g. `1/s`).
   * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
   * The grammar for a unit is as follows:
   *     Expression = Component { "." Component } { "/" Component } ;
   *     Component = [ PREFIX ] UNIT [ Annotation ]
   *               | Annotation
   *               | "1"
   *               ;
   *     Annotation = "{" NAME "}" ;
   * Notes:
   * * `Annotation` is just a comment if it follows a `UNIT` and is
   *    equivalent to `1` if it is used alone. For examples,
   *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
   * * `NAME` is a sequence of non-blank printable ASCII characters not
   *    containing '{' or '}'.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getUnitBytes() {
    java.lang.Object ref = unit_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      unit_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 6;
  private volatile java.lang.Object description_;
  /**
   * <code>optional string description = 6;</code>
   *
   * <pre>
   * A detailed description of the monitored resource type, which is used in
   * documentation.
   * </pre>
   */
  public java.lang.String getDescription() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      description_ = s;
      return s;
    }
  }
  /**
   * <code>optional string description = 6;</code>
   *
   * <pre>
   * A detailed description of the monitored resource type, which is used in
   * documentation.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      description_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 7;
  private volatile java.lang.Object displayName_;
  /**
   * <code>optional string display_name = 7;</code>
   *
   * <pre>
   * A concise name for the monitored resource type, which is displayed in user
   * interfaces.
   * </pre>
   */
  public java.lang.String getDisplayName() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      displayName_ = s;
      return s;
    }
  }
  /**
   * <code>optional string display_name = 7;</code>
   *
   * <pre>
   * A concise name for the monitored resource type, which is displayed in user
   * interfaces.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      displayName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
    }
    for (int i = 0; i < labels_.size(); i++) {
      output.writeMessage(2, labels_.get(i));
    }
    if (metricKind_ != com.google.api.MetricDescriptor.MetricKind.METRIC_KIND_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, metricKind_);
    }
    if (valueType_ != com.google.api.MetricDescriptor.ValueType.VALUE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, valueType_);
    }
    if (!getUnitBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 5, unit_);
    }
    if (!getDescriptionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 6, description_);
    }
    if (!getDisplayNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessage.writeString(output, 7, displayName_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
    }
    for (int i = 0; i < labels_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, labels_.get(i));
    }
    if (metricKind_ != com.google.api.MetricDescriptor.MetricKind.METRIC_KIND_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, metricKind_);
    }
    if (valueType_ != com.google.api.MetricDescriptor.ValueType.VALUE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, valueType_);
    }
    if (!getUnitBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(5, unit_);
    }
    if (!getDescriptionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(6, description_);
    }
    if (!getDisplayNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(7, displayName_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.api.MetricDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.MetricDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.MetricDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.MetricDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.MetricDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.api.MetricDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.api.MetricDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.api.MetricDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.api.MetricDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.api.MetricDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.MetricDescriptor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.api.MetricDescriptor}
   *
   * <pre>
   * A description of a type of metric.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.MetricDescriptor)
      com.google.api.MetricDescriptorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.MetricProto.internal_static_google_api_MetricDescriptor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.MetricProto.internal_static_google_api_MetricDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.MetricDescriptor.class, com.google.api.MetricDescriptor.Builder.class);
    }

    // Construct using com.google.api.MetricDescriptor.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getLabelsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      if (labelsBuilder_ == null) {
        labels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        labelsBuilder_.clear();
      }
      metricKind_ = 0;

      valueType_ = 0;

      unit_ = "";

      description_ = "";

      displayName_ = "";

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.api.MetricProto.internal_static_google_api_MetricDescriptor_descriptor;
    }

    public com.google.api.MetricDescriptor getDefaultInstanceForType() {
      return com.google.api.MetricDescriptor.getDefaultInstance();
    }

    public com.google.api.MetricDescriptor build() {
      com.google.api.MetricDescriptor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.api.MetricDescriptor buildPartial() {
      com.google.api.MetricDescriptor result = new com.google.api.MetricDescriptor(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      if (labelsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.labels_ = labels_;
      } else {
        result.labels_ = labelsBuilder_.build();
      }
      result.metricKind_ = metricKind_;
      result.valueType_ = valueType_;
      result.unit_ = unit_;
      result.description_ = description_;
      result.displayName_ = displayName_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.api.MetricDescriptor) {
        return mergeFrom((com.google.api.MetricDescriptor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.api.MetricDescriptor other) {
      if (other == com.google.api.MetricDescriptor.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (labelsBuilder_ == null) {
        if (!other.labels_.isEmpty()) {
          if (labels_.isEmpty()) {
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLabelsIsMutable();
            labels_.addAll(other.labels_);
          }
          onChanged();
        }
      } else {
        if (!other.labels_.isEmpty()) {
          if (labelsBuilder_.isEmpty()) {
            labelsBuilder_.dispose();
            labelsBuilder_ = null;
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000002);
            labelsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getLabelsFieldBuilder() : null;
          } else {
            labelsBuilder_.addAllMessages(other.labels_);
          }
        }
      }
      if (other.metricKind_ != 0) {
        setMetricKindValue(other.getMetricKindValue());
      }
      if (other.valueType_ != 0) {
        setValueTypeValue(other.getValueTypeValue());
      }
      if (!other.getUnit().isEmpty()) {
        unit_ = other.unit_;
        onChanged();
      }
      if (!other.getDescription().isEmpty()) {
        description_ = other.description_;
        onChanged();
      }
      if (!other.getDisplayName().isEmpty()) {
        displayName_ = other.displayName_;
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.api.MetricDescriptor parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.api.MetricDescriptor) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the metric type, including a domain prefix, such as
     * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
     * should use a natural hierarchical grouping such as the following:
     *     compute.googleapis.com/instance/cpu/utilization
     *     compute.googleapis.com/instance/disk/read_ops_count
     *     compute.googleapis.com/instance/network/received_bytes_count
     * Note that if the metric name changes, the monitoring data will be
     * discontinued, and anything depends on it will break, such as monitoring
     * dashborads, alerting rules and quota limits. Therefore, once a metric has
     * been published, its name should be immutable. You can use the display_name
     * field to provide a user-friendly name for the metric.
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the metric type, including a domain prefix, such as
     * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
     * should use a natural hierarchical grouping such as the following:
     *     compute.googleapis.com/instance/cpu/utilization
     *     compute.googleapis.com/instance/disk/read_ops_count
     *     compute.googleapis.com/instance/network/received_bytes_count
     * Note that if the metric name changes, the monitoring data will be
     * discontinued, and anything depends on it will break, such as monitoring
     * dashborads, alerting rules and quota limits. Therefore, once a metric has
     * been published, its name should be immutable. You can use the display_name
     * field to provide a user-friendly name for the metric.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the metric type, including a domain prefix, such as
     * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
     * should use a natural hierarchical grouping such as the following:
     *     compute.googleapis.com/instance/cpu/utilization
     *     compute.googleapis.com/instance/disk/read_ops_count
     *     compute.googleapis.com/instance/network/received_bytes_count
     * Note that if the metric name changes, the monitoring data will be
     * discontinued, and anything depends on it will break, such as monitoring
     * dashborads, alerting rules and quota limits. Therefore, once a metric has
     * been published, its name should be immutable. You can use the display_name
     * field to provide a user-friendly name for the metric.
     * </pre>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the metric type, including a domain prefix, such as
     * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
     * should use a natural hierarchical grouping such as the following:
     *     compute.googleapis.com/instance/cpu/utilization
     *     compute.googleapis.com/instance/disk/read_ops_count
     *     compute.googleapis.com/instance/network/received_bytes_count
     * Note that if the metric name changes, the monitoring data will be
     * discontinued, and anything depends on it will break, such as monitoring
     * dashborads, alerting rules and quota limits. Therefore, once a metric has
     * been published, its name should be immutable. You can use the display_name
     * field to provide a user-friendly name for the metric.
     * </pre>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the metric type, including a domain prefix, such as
     * `"compute.googleapis.com/instance/cpu/utilization"`.  Metric type names
     * should use a natural hierarchical grouping such as the following:
     *     compute.googleapis.com/instance/cpu/utilization
     *     compute.googleapis.com/instance/disk/read_ops_count
     *     compute.googleapis.com/instance/network/received_bytes_count
     * Note that if the metric name changes, the monitoring data will be
     * discontinued, and anything depends on it will break, such as monitoring
     * dashborads, alerting rules and quota limits. Therefore, once a metric has
     * been published, its name should be immutable. You can use the display_name
     * field to provide a user-friendly name for the metric.
     * </pre>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.api.LabelDescriptor> labels_ =
      java.util.Collections.emptyList();
    private void ensureLabelsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        labels_ = new java.util.ArrayList<com.google.api.LabelDescriptor>(labels_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.google.api.LabelDescriptor, com.google.api.LabelDescriptor.Builder, com.google.api.LabelDescriptorOrBuilder> labelsBuilder_;

    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public java.util.List<com.google.api.LabelDescriptor> getLabelsList() {
      if (labelsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(labels_);
      } else {
        return labelsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public int getLabelsCount() {
      if (labelsBuilder_ == null) {
        return labels_.size();
      } else {
        return labelsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public com.google.api.LabelDescriptor getLabels(int index) {
      if (labelsBuilder_ == null) {
        return labels_.get(index);
      } else {
        return labelsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder setLabels(
        int index, com.google.api.LabelDescriptor value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.set(index, value);
        onChanged();
      } else {
        labelsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder setLabels(
        int index, com.google.api.LabelDescriptor.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.set(index, builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder addLabels(com.google.api.LabelDescriptor value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.add(value);
        onChanged();
      } else {
        labelsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder addLabels(
        int index, com.google.api.LabelDescriptor value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.add(index, value);
        onChanged();
      } else {
        labelsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder addLabels(
        com.google.api.LabelDescriptor.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.add(builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder addLabels(
        int index, com.google.api.LabelDescriptor.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.add(index, builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder addAllLabels(
        java.lang.Iterable<? extends com.google.api.LabelDescriptor> values) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, labels_);
        onChanged();
      } else {
        labelsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder clearLabels() {
      if (labelsBuilder_ == null) {
        labels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        labelsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public Builder removeLabels(int index) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.remove(index);
        onChanged();
      } else {
        labelsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public com.google.api.LabelDescriptor.Builder getLabelsBuilder(
        int index) {
      return getLabelsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public com.google.api.LabelDescriptorOrBuilder getLabelsOrBuilder(
        int index) {
      if (labelsBuilder_ == null) {
        return labels_.get(index);  } else {
        return labelsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public java.util.List<? extends com.google.api.LabelDescriptorOrBuilder> 
         getLabelsOrBuilderList() {
      if (labelsBuilder_ != null) {
        return labelsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(labels_);
      }
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public com.google.api.LabelDescriptor.Builder addLabelsBuilder() {
      return getLabelsFieldBuilder().addBuilder(
          com.google.api.LabelDescriptor.getDefaultInstance());
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public com.google.api.LabelDescriptor.Builder addLabelsBuilder(
        int index) {
      return getLabelsFieldBuilder().addBuilder(
          index, com.google.api.LabelDescriptor.getDefaultInstance());
    }
    /**
     * <code>repeated .google.api.LabelDescriptor labels = 2;</code>
     *
     * <pre>
     * The set of labels that can be used to describe a specific instance of this
     * metric type. For example, the
     * `compute.googleapis.com/instance/network/received_bytes_count` metric type
     * has a label, `loadbalanced`, that specifies whether the traffic was
     * received through a load balanced IP address.
     * </pre>
     */
    public java.util.List<com.google.api.LabelDescriptor.Builder> 
         getLabelsBuilderList() {
      return getLabelsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.google.api.LabelDescriptor, com.google.api.LabelDescriptor.Builder, com.google.api.LabelDescriptorOrBuilder> 
        getLabelsFieldBuilder() {
      if (labelsBuilder_ == null) {
        labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.google.api.LabelDescriptor, com.google.api.LabelDescriptor.Builder, com.google.api.LabelDescriptorOrBuilder>(
                labels_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        labels_ = null;
      }
      return labelsBuilder_;
    }

    private int metricKind_ = 0;
    /**
     * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
     *
     * <pre>
     * Whether the metric records instantaneous values, changes to a value, etc.
     * </pre>
     */
    public int getMetricKindValue() {
      return metricKind_;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
     *
     * <pre>
     * Whether the metric records instantaneous values, changes to a value, etc.
     * </pre>
     */
    public Builder setMetricKindValue(int value) {
      metricKind_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
     *
     * <pre>
     * Whether the metric records instantaneous values, changes to a value, etc.
     * </pre>
     */
    public com.google.api.MetricDescriptor.MetricKind getMetricKind() {
      com.google.api.MetricDescriptor.MetricKind result = com.google.api.MetricDescriptor.MetricKind.valueOf(metricKind_);
      return result == null ? com.google.api.MetricDescriptor.MetricKind.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
     *
     * <pre>
     * Whether the metric records instantaneous values, changes to a value, etc.
     * </pre>
     */
    public Builder setMetricKind(com.google.api.MetricDescriptor.MetricKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      metricKind_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.MetricKind metric_kind = 3;</code>
     *
     * <pre>
     * Whether the metric records instantaneous values, changes to a value, etc.
     * </pre>
     */
    public Builder clearMetricKind() {
      
      metricKind_ = 0;
      onChanged();
      return this;
    }

    private int valueType_ = 0;
    /**
     * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
     *
     * <pre>
     * Whether the measurement is an integer, a floating-point number, etc.
     * </pre>
     */
    public int getValueTypeValue() {
      return valueType_;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
     *
     * <pre>
     * Whether the measurement is an integer, a floating-point number, etc.
     * </pre>
     */
    public Builder setValueTypeValue(int value) {
      valueType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
     *
     * <pre>
     * Whether the measurement is an integer, a floating-point number, etc.
     * </pre>
     */
    public com.google.api.MetricDescriptor.ValueType getValueType() {
      com.google.api.MetricDescriptor.ValueType result = com.google.api.MetricDescriptor.ValueType.valueOf(valueType_);
      return result == null ? com.google.api.MetricDescriptor.ValueType.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
     *
     * <pre>
     * Whether the measurement is an integer, a floating-point number, etc.
     * </pre>
     */
    public Builder setValueType(com.google.api.MetricDescriptor.ValueType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      valueType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .google.api.MetricDescriptor.ValueType value_type = 4;</code>
     *
     * <pre>
     * Whether the measurement is an integer, a floating-point number, etc.
     * </pre>
     */
    public Builder clearValueType() {
      
      valueType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object unit_ = "";
    /**
     * <code>optional string unit = 5;</code>
     *
     * <pre>
     * The unit in which the metric value is reported. It is only applicable
     * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
     * supported units are a subset of [The Unified Code for Units of
     * Measure](http://unitsofmeasure.org/ucum.html) standard:
     * **Basic units (UNIT)**
     * * `bit`   bit
     * * `By`    byte
     * * `s`     second
     * * `min`   minute
     * * `h`     hour
     * * `d`     day
     * **Prefixes (PREFIX)**
     * * `k`     kilo    (10**3)
     * * `M`     mega    (10**6)
     * * `G`     giga    (10**9)
     * * `T`     tera    (10**12)
     * * `P`     peta    (10**15)
     * * `E`     exa     (10**18)
     * * `Z`     zetta   (10**21)
     * * `Y`     yotta   (10**24)
     * * `m`     milli   (10**-3)
     * * `u`     micro   (10**-6)
     * * `n`     nano    (10**-9)
     * * `p`     pico    (10**-12)
     * * `f`     femto   (10**-15)
     * * `a`     atto    (10**-18)
     * * `z`     zepto   (10**-21)
     * * `y`     yocto   (10**-24)
     * * `Ki`    kibi    (2**10)
     * * `Mi`    mebi    (2**20)
     * * `Gi`    gibi    (2**30)
     * * `Ti`    tebi    (2**40)
     * **Grammar**
     * The grammar includes the dimensionless unit `1`, such as `1/s`.
     * The grammar also includes these connectors:
     * * `/`    division (as an infix operator, e.g. `1/s`).
     * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
     * The grammar for a unit is as follows:
     *     Expression = Component { "." Component } { "/" Component } ;
     *     Component = [ PREFIX ] UNIT [ Annotation ]
     *               | Annotation
     *               | "1"
     *               ;
     *     Annotation = "{" NAME "}" ;
     * Notes:
     * * `Annotation` is just a comment if it follows a `UNIT` and is
     *    equivalent to `1` if it is used alone. For examples,
     *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
     * * `NAME` is a sequence of non-blank printable ASCII characters not
     *    containing '{' or '}'.
     * </pre>
     */
    public java.lang.String getUnit() {
      java.lang.Object ref = unit_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unit_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string unit = 5;</code>
     *
     * <pre>
     * The unit in which the metric value is reported. It is only applicable
     * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
     * supported units are a subset of [The Unified Code for Units of
     * Measure](http://unitsofmeasure.org/ucum.html) standard:
     * **Basic units (UNIT)**
     * * `bit`   bit
     * * `By`    byte
     * * `s`     second
     * * `min`   minute
     * * `h`     hour
     * * `d`     day
     * **Prefixes (PREFIX)**
     * * `k`     kilo    (10**3)
     * * `M`     mega    (10**6)
     * * `G`     giga    (10**9)
     * * `T`     tera    (10**12)
     * * `P`     peta    (10**15)
     * * `E`     exa     (10**18)
     * * `Z`     zetta   (10**21)
     * * `Y`     yotta   (10**24)
     * * `m`     milli   (10**-3)
     * * `u`     micro   (10**-6)
     * * `n`     nano    (10**-9)
     * * `p`     pico    (10**-12)
     * * `f`     femto   (10**-15)
     * * `a`     atto    (10**-18)
     * * `z`     zepto   (10**-21)
     * * `y`     yocto   (10**-24)
     * * `Ki`    kibi    (2**10)
     * * `Mi`    mebi    (2**20)
     * * `Gi`    gibi    (2**30)
     * * `Ti`    tebi    (2**40)
     * **Grammar**
     * The grammar includes the dimensionless unit `1`, such as `1/s`.
     * The grammar also includes these connectors:
     * * `/`    division (as an infix operator, e.g. `1/s`).
     * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
     * The grammar for a unit is as follows:
     *     Expression = Component { "." Component } { "/" Component } ;
     *     Component = [ PREFIX ] UNIT [ Annotation ]
     *               | Annotation
     *               | "1"
     *               ;
     *     Annotation = "{" NAME "}" ;
     * Notes:
     * * `Annotation` is just a comment if it follows a `UNIT` and is
     *    equivalent to `1` if it is used alone. For examples,
     *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
     * * `NAME` is a sequence of non-blank printable ASCII characters not
     *    containing '{' or '}'.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUnitBytes() {
      java.lang.Object ref = unit_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unit_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string unit = 5;</code>
     *
     * <pre>
     * The unit in which the metric value is reported. It is only applicable
     * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
     * supported units are a subset of [The Unified Code for Units of
     * Measure](http://unitsofmeasure.org/ucum.html) standard:
     * **Basic units (UNIT)**
     * * `bit`   bit
     * * `By`    byte
     * * `s`     second
     * * `min`   minute
     * * `h`     hour
     * * `d`     day
     * **Prefixes (PREFIX)**
     * * `k`     kilo    (10**3)
     * * `M`     mega    (10**6)
     * * `G`     giga    (10**9)
     * * `T`     tera    (10**12)
     * * `P`     peta    (10**15)
     * * `E`     exa     (10**18)
     * * `Z`     zetta   (10**21)
     * * `Y`     yotta   (10**24)
     * * `m`     milli   (10**-3)
     * * `u`     micro   (10**-6)
     * * `n`     nano    (10**-9)
     * * `p`     pico    (10**-12)
     * * `f`     femto   (10**-15)
     * * `a`     atto    (10**-18)
     * * `z`     zepto   (10**-21)
     * * `y`     yocto   (10**-24)
     * * `Ki`    kibi    (2**10)
     * * `Mi`    mebi    (2**20)
     * * `Gi`    gibi    (2**30)
     * * `Ti`    tebi    (2**40)
     * **Grammar**
     * The grammar includes the dimensionless unit `1`, such as `1/s`.
     * The grammar also includes these connectors:
     * * `/`    division (as an infix operator, e.g. `1/s`).
     * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
     * The grammar for a unit is as follows:
     *     Expression = Component { "." Component } { "/" Component } ;
     *     Component = [ PREFIX ] UNIT [ Annotation ]
     *               | Annotation
     *               | "1"
     *               ;
     *     Annotation = "{" NAME "}" ;
     * Notes:
     * * `Annotation` is just a comment if it follows a `UNIT` and is
     *    equivalent to `1` if it is used alone. For examples,
     *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
     * * `NAME` is a sequence of non-blank printable ASCII characters not
     *    containing '{' or '}'.
     * </pre>
     */
    public Builder setUnit(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      unit_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string unit = 5;</code>
     *
     * <pre>
     * The unit in which the metric value is reported. It is only applicable
     * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
     * supported units are a subset of [The Unified Code for Units of
     * Measure](http://unitsofmeasure.org/ucum.html) standard:
     * **Basic units (UNIT)**
     * * `bit`   bit
     * * `By`    byte
     * * `s`     second
     * * `min`   minute
     * * `h`     hour
     * * `d`     day
     * **Prefixes (PREFIX)**
     * * `k`     kilo    (10**3)
     * * `M`     mega    (10**6)
     * * `G`     giga    (10**9)
     * * `T`     tera    (10**12)
     * * `P`     peta    (10**15)
     * * `E`     exa     (10**18)
     * * `Z`     zetta   (10**21)
     * * `Y`     yotta   (10**24)
     * * `m`     milli   (10**-3)
     * * `u`     micro   (10**-6)
     * * `n`     nano    (10**-9)
     * * `p`     pico    (10**-12)
     * * `f`     femto   (10**-15)
     * * `a`     atto    (10**-18)
     * * `z`     zepto   (10**-21)
     * * `y`     yocto   (10**-24)
     * * `Ki`    kibi    (2**10)
     * * `Mi`    mebi    (2**20)
     * * `Gi`    gibi    (2**30)
     * * `Ti`    tebi    (2**40)
     * **Grammar**
     * The grammar includes the dimensionless unit `1`, such as `1/s`.
     * The grammar also includes these connectors:
     * * `/`    division (as an infix operator, e.g. `1/s`).
     * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
     * The grammar for a unit is as follows:
     *     Expression = Component { "." Component } { "/" Component } ;
     *     Component = [ PREFIX ] UNIT [ Annotation ]
     *               | Annotation
     *               | "1"
     *               ;
     *     Annotation = "{" NAME "}" ;
     * Notes:
     * * `Annotation` is just a comment if it follows a `UNIT` and is
     *    equivalent to `1` if it is used alone. For examples,
     *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
     * * `NAME` is a sequence of non-blank printable ASCII characters not
     *    containing '{' or '}'.
     * </pre>
     */
    public Builder clearUnit() {
      
      unit_ = getDefaultInstance().getUnit();
      onChanged();
      return this;
    }
    /**
     * <code>optional string unit = 5;</code>
     *
     * <pre>
     * The unit in which the metric value is reported. It is only applicable
     * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
     * supported units are a subset of [The Unified Code for Units of
     * Measure](http://unitsofmeasure.org/ucum.html) standard:
     * **Basic units (UNIT)**
     * * `bit`   bit
     * * `By`    byte
     * * `s`     second
     * * `min`   minute
     * * `h`     hour
     * * `d`     day
     * **Prefixes (PREFIX)**
     * * `k`     kilo    (10**3)
     * * `M`     mega    (10**6)
     * * `G`     giga    (10**9)
     * * `T`     tera    (10**12)
     * * `P`     peta    (10**15)
     * * `E`     exa     (10**18)
     * * `Z`     zetta   (10**21)
     * * `Y`     yotta   (10**24)
     * * `m`     milli   (10**-3)
     * * `u`     micro   (10**-6)
     * * `n`     nano    (10**-9)
     * * `p`     pico    (10**-12)
     * * `f`     femto   (10**-15)
     * * `a`     atto    (10**-18)
     * * `z`     zepto   (10**-21)
     * * `y`     yocto   (10**-24)
     * * `Ki`    kibi    (2**10)
     * * `Mi`    mebi    (2**20)
     * * `Gi`    gibi    (2**30)
     * * `Ti`    tebi    (2**40)
     * **Grammar**
     * The grammar includes the dimensionless unit `1`, such as `1/s`.
     * The grammar also includes these connectors:
     * * `/`    division (as an infix operator, e.g. `1/s`).
     * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
     * The grammar for a unit is as follows:
     *     Expression = Component { "." Component } { "/" Component } ;
     *     Component = [ PREFIX ] UNIT [ Annotation ]
     *               | Annotation
     *               | "1"
     *               ;
     *     Annotation = "{" NAME "}" ;
     * Notes:
     * * `Annotation` is just a comment if it follows a `UNIT` and is
     *    equivalent to `1` if it is used alone. For examples,
     *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
     * * `NAME` is a sequence of non-blank printable ASCII characters not
     *    containing '{' or '}'.
     * </pre>
     */
    public Builder setUnitBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      unit_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object description_ = "";
    /**
     * <code>optional string description = 6;</code>
     *
     * <pre>
     * A detailed description of the monitored resource type, which is used in
     * documentation.
     * </pre>
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string description = 6;</code>
     *
     * <pre>
     * A detailed description of the monitored resource type, which is used in
     * documentation.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string description = 6;</code>
     *
     * <pre>
     * A detailed description of the monitored resource type, which is used in
     * documentation.
     * </pre>
     */
    public Builder setDescription(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      description_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string description = 6;</code>
     *
     * <pre>
     * A detailed description of the monitored resource type, which is used in
     * documentation.
     * </pre>
     */
    public Builder clearDescription() {
      
      description_ = getDefaultInstance().getDescription();
      onChanged();
      return this;
    }
    /**
     * <code>optional string description = 6;</code>
     *
     * <pre>
     * A detailed description of the monitored resource type, which is used in
     * documentation.
     * </pre>
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      description_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object displayName_ = "";
    /**
     * <code>optional string display_name = 7;</code>
     *
     * <pre>
     * A concise name for the monitored resource type, which is displayed in user
     * interfaces.
     * </pre>
     */
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string display_name = 7;</code>
     *
     * <pre>
     * A concise name for the monitored resource type, which is displayed in user
     * interfaces.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string display_name = 7;</code>
     *
     * <pre>
     * A concise name for the monitored resource type, which is displayed in user
     * interfaces.
     * </pre>
     */
    public Builder setDisplayName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      displayName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string display_name = 7;</code>
     *
     * <pre>
     * A concise name for the monitored resource type, which is displayed in user
     * interfaces.
     * </pre>
     */
    public Builder clearDisplayName() {
      
      displayName_ = getDefaultInstance().getDisplayName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string display_name = 7;</code>
     *
     * <pre>
     * A concise name for the monitored resource type, which is displayed in user
     * interfaces.
     * </pre>
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      displayName_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.api.MetricDescriptor)
  }

  // @@protoc_insertion_point(class_scope:google.api.MetricDescriptor)
  private static final com.google.api.MetricDescriptor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.api.MetricDescriptor();
  }

  public static com.google.api.MetricDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MetricDescriptor>
      PARSER = new com.google.protobuf.AbstractParser<MetricDescriptor>() {
    public MetricDescriptor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new MetricDescriptor(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<MetricDescriptor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MetricDescriptor> getParserForType() {
    return PARSER;
  }

  public com.google.api.MetricDescriptor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

