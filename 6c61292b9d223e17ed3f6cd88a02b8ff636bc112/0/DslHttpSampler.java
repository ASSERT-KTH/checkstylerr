package us.abstracta.jmeter.javadsl.http;

import static us.abstracta.jmeter.javadsl.JmeterDsl.jsr223PreProcessor;

import java.util.ArrayList;
import java.util.function.Function;
import org.apache.jmeter.config.Arguments;
import org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.util.HTTPArgument;
import org.apache.jmeter.testelement.TestElement;
import org.apache.jorphan.collections.HashTree;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.http.MimeTypes;
import us.abstracta.jmeter.javadsl.JmeterDsl;
import us.abstracta.jmeter.javadsl.core.DslSampler;
import us.abstracta.jmeter.javadsl.core.preprocessors.DslJsr223PreProcessor.PreProcessorScript;
import us.abstracta.jmeter.javadsl.core.preprocessors.DslJsr223PreProcessor.PreProcessorVars;

/**
 * Allows to configure a JMeter HTTP sampler to make HTTP requests in a test plan.
 */
public class DslHttpSampler extends DslSampler {

  private final String url;
  private HttpMethod method = HttpMethod.GET;
  private final HttpHeaders headers = new HttpHeaders();
  private String body;

  public DslHttpSampler(String name, String url) {
    super(buildName(name), HttpTestSampleGui.class, new ArrayList<>());
    this.url = url;
  }

  public DslHttpSampler(String name, Function<PreProcessorVars, String> urlSupplier) {
    super(buildName(name), HttpTestSampleGui.class, new ArrayList<>());
    String variableName = "PRE_PROCESSOR_URL";
    this.url = "${" + variableName + "}";
    children(jsr223PreProcessor(s -> s.vars.put(variableName, urlSupplier.apply(s))
    ));
  }

  private static String buildName(String name) {
    return name != null ? name : "HTTP Request";
  }

  /**
   * Specifies that the sampler should send an HTTP POST to defined URL.
   *
   * @param body to include in HTTP POST request body.
   * @param contentType to be sent as Content-Type header in HTTP POST request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler post(String body, MimeTypes.Type contentType) {
    return method(HttpMethod.POST)
        .contentType(contentType)
        .body(body);
  }

  /**
   * Same as {@link #post(String, MimeTypes.Type)} but allowing to use a dynamically calculated body.
   * <p>
   * This method is just an abstraction that uses a JMeter variable as HTTP request body and
   * calculates the variable with a jsr223PreProcessor.
   * <p>
   * <b>WARNING:</b> As this method internally uses
   * {@link JmeterDsl#jsr223PreProcessor(PreProcessorScript)}, same limitations and considerations
   * apply. Check it's documentation. To avoid such limitations you may use {@link #post(String,
   * MimeTypes.Type)} with a JMeter variable instead, and dynamically set the variable with {@link
   * JmeterDsl#jsr223PreProcessor(String)}.
   *
   * @param bodySupplier function to calculate the body on each request.
   * @param contentType to be sent as Content-Type header in HTTP POST request.
   * @return the altered sampler to allow for fluent API usage.
   * @see #body(Function)
   */
  public DslHttpSampler post(Function<PreProcessorVars, String> bodySupplier,
      MimeTypes.Type contentType) {
    return method(HttpMethod.POST)
        .contentType(contentType)
        .body(bodySupplier);
  }

  /**
   * Specifies the HTTP method to be used in the HTTP request generated by the sampler.
   *
   * @param method is the HTTP method to be used by the sampler.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler method(HttpMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Specifies an HTTP header to be sent by the sampler.
   * <p>
   * To specify multiple headers just invoke this method several times with the different header
   * names and values.
   *
   * @param name of the HTTP header.
   * @param value of the HTTP header.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler header(String name, String value) {
    headers.header(name, value);
    return this;
  }

  /**
   * Same as {@link #header(String, String)} but allows to use dynamically calculated HTTP header
   * value.
   * <p>
   * This method is just an abstraction that uses a JMeter variable as HTTP header value and
   * calculates the variable with a jsr223PreProcessor.
   * <p>
   * <b>WARNING:</b> As this method internally uses
   * {@link JmeterDsl#jsr223PreProcessor(PreProcessorScript)}, same limitations and considerations
   * apply. Check it's documentation. To avoid such limitations you may use {@link #header(String,
   * String)} with a JMeter variable instead, and dynamically set the variable with {@link
   * JmeterDsl#jsr223PreProcessor(String)}.
   *
   * @param name of the HTTP header.
   * @param valueSupplier builds the header value.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler header(String name, Function<PreProcessorVars, String> valueSupplier) {
    String variableNamePrefix = "PRE_PROCESSOR_HEADER~";
    headers.header(name, "${" + variableNamePrefix + name + "}");
    return children(
        jsr223PreProcessor(s -> s.vars.put(variableNamePrefix + name, valueSupplier.apply(s)))
    );
  }

  /**
   * Allows to easily specify the Content-Type HTTP header to be used by the sampler.
   *
   * @param contentType value to send as Content-Type header.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler contentType(MimeTypes.Type contentType) {
    headers.contentType(contentType);
    return this;
  }

  /**
   * Specifies the body to be sent in the HTTP request generated by the sampler.
   *
   * @param body to be used as in the body of the HTTP request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Same as {@link #body(String)} but allows to use dynamically calculated HTTP request body.
   * <p>
   * This method is just an abstraction that uses a JMeter variable as HTTP request body and
   * calculates the variable with a jsr223PreProcessor.
   * <p>
   * <b>WARNING:</b> As this method internally uses
   * {@link JmeterDsl#jsr223PreProcessor(PreProcessorScript)}, same limitations and considerations
   * apply. Check it's documentation.  To avoid such limitations you may use {@link #body(String)}
   * with a JMeter variable instead, and dynamically set the variable with {@link
   * JmeterDsl#jsr223PreProcessor(String)}.
   *
   * @param bodySupplier function to calculate the body on each request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler body(Function<PreProcessorVars, String> bodySupplier) {
    String variableName = "PRE_PROCESSOR_REQUEST_BODY";
    this.body = "${" + variableName + "}";
    return children(jsr223PreProcessor(s -> s.vars.put(variableName, bodySupplier.apply(s))));
  }

  /**
   * Allows specifying children test elements for the sampler, which allow for example extracting
   * information from HTTP response, alter HTTP request, assert HTTP response contents, etc.
   *
   * @param children list of test elements to add as children of this sampler.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler children(SamplerChild... children) {
    return (DslHttpSampler) super.children(children);
  }

  @Override
  public TestElement buildTestElement() {
    HTTPSamplerProxy ret = new HTTPSamplerProxy();
    ret.setFollowRedirects(true);
    ret.setUseKeepAlive(true);
    ret.setPath(url);
    ret.setMethod(method.name());
    ret.setArguments(buildArguments());
    return ret;
  }

  private Arguments buildArguments() {
    Arguments args = new Arguments();
    if (body != null) {
      HTTPArgument arg = new HTTPArgument("", body, false);
      arg.setAlwaysEncoded(false);
      args.addArgument(arg);
    }
    return args;
  }

  @Override
  public HashTree buildTreeUnder(HashTree parent) {
    HashTree ret = super.buildTreeUnder(parent);
    if (!headers.isEmpty()) {
      headers.buildTreeUnder(ret);
    }
    return ret;
  }

}
