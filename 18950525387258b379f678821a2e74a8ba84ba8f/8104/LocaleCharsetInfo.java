/*
 * Copyright (c) 1997, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package org.glassfish.web.deployment.runtime;

import com.sun.enterprise.deployment.runtime.RuntimeDescriptor;

/**
* this class contains runtime information for the web bundle
* it was kept to be backward compatible with the schema2beans descriptors
* generated by iAS 7.0 engineering team.
*
* @author Jerome Dochez
*/
public class LocaleCharsetInfo extends RuntimeDescriptor {

    static public final String LOCALE_CHARSET_MAP = "LocaleCharsetMap"; // NOI18N
    static public final String PARAMETER_ENCODING = "ParameterEncoding"; // NOI18N
    static public final String FORM_HINT_FIELD = "FormHintField"; // NOI18N
    static public final String DEFAULT_LOCALE = "DefaultLocale"; // NOI18N
    static public final String DEFAULT_CHARSET = "DefaultCharset";

    // This attribute is an array containing at least one element
    public void setLocaleCharsetMap(int index, LocaleCharsetMap value) {
        this.setValue(LOCALE_CHARSET_MAP, index, value);
    }


    //
    public LocaleCharsetMap getLocaleCharsetMap(int index) {
        return (LocaleCharsetMap) this.getValue(LOCALE_CHARSET_MAP, index);
    }


    // This attribute is an array containing at least one element
    public void setLocaleCharsetMap(LocaleCharsetMap[] value) {
        this.setValue(LOCALE_CHARSET_MAP, value);
    }


    //
    public LocaleCharsetMap[] getLocaleCharsetMap() {
        return (LocaleCharsetMap[]) this.getValues(LOCALE_CHARSET_MAP);
    }


    // Return the number of properties
    public int sizeLocaleCharsetMap() {
        return this.size(LOCALE_CHARSET_MAP);
    }


    // Add a new element returning its index in the list
    public int addLocaleCharsetMap(LocaleCharsetMap value) {
        return this.addValue(LOCALE_CHARSET_MAP, value);
    }


    //
    // Remove an element using its reference
    // Returns the index the element had in the list
    //
    public int removeLocaleCharsetMap(LocaleCharsetMap value) {
        return this.removeValue(LOCALE_CHARSET_MAP, value);
    }


    // This attribute is optional
    public void setParameterEncoding(boolean value) {
        this.setValue(PARAMETER_ENCODING, Boolean.valueOf(value));
    }


    //
    public boolean isParameterEncoding() {
        Boolean ret = (Boolean) this.getValue(PARAMETER_ENCODING);
        if (ret == null) {
            return false;
        }
        return ret.booleanValue();
    }


    // This method verifies that the mandatory properties are set
    public boolean verify() {
        return true;
    }
}
