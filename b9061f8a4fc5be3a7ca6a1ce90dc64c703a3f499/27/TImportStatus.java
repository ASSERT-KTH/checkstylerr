/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TImportStatus implements org.apache.thrift.TBase<TImportStatus, TImportStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TImportStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TImportStatus");

  private static final org.apache.thrift.protocol.TField ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("elapsed", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("rows_completed", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ROWS_ESTIMATED_FIELD_DESC = new org.apache.thrift.protocol.TField("rows_estimated", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ROWS_REJECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("rows_rejected", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TImportStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TImportStatusTupleSchemeFactory();

  public long elapsed; // required
  public long rows_completed; // required
  public long rows_estimated; // required
  public long rows_rejected; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ELAPSED((short)1, "elapsed"),
    ROWS_COMPLETED((short)2, "rows_completed"),
    ROWS_ESTIMATED((short)3, "rows_estimated"),
    ROWS_REJECTED((short)4, "rows_rejected");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ELAPSED
          return ELAPSED;
        case 2: // ROWS_COMPLETED
          return ROWS_COMPLETED;
        case 3: // ROWS_ESTIMATED
          return ROWS_ESTIMATED;
        case 4: // ROWS_REJECTED
          return ROWS_REJECTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ELAPSED_ISSET_ID = 0;
  private static final int __ROWS_COMPLETED_ISSET_ID = 1;
  private static final int __ROWS_ESTIMATED_ISSET_ID = 2;
  private static final int __ROWS_REJECTED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("elapsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROWS_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("rows_completed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROWS_ESTIMATED, new org.apache.thrift.meta_data.FieldMetaData("rows_estimated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROWS_REJECTED, new org.apache.thrift.meta_data.FieldMetaData("rows_rejected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TImportStatus.class, metaDataMap);
  }

  public TImportStatus() {
  }

  public TImportStatus(
    long elapsed,
    long rows_completed,
    long rows_estimated,
    long rows_rejected)
  {
    this();
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    this.rows_completed = rows_completed;
    setRows_completedIsSet(true);
    this.rows_estimated = rows_estimated;
    setRows_estimatedIsSet(true);
    this.rows_rejected = rows_rejected;
    setRows_rejectedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TImportStatus(TImportStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.elapsed = other.elapsed;
    this.rows_completed = other.rows_completed;
    this.rows_estimated = other.rows_estimated;
    this.rows_rejected = other.rows_rejected;
  }

  public TImportStatus deepCopy() {
    return new TImportStatus(this);
  }

  @Override
  public void clear() {
    setElapsedIsSet(false);
    this.elapsed = 0;
    setRows_completedIsSet(false);
    this.rows_completed = 0;
    setRows_estimatedIsSet(false);
    this.rows_estimated = 0;
    setRows_rejectedIsSet(false);
    this.rows_rejected = 0;
  }

  public long getElapsed() {
    return this.elapsed;
  }

  public TImportStatus setElapsed(long elapsed) {
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    return this;
  }

  public void unsetElapsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ELAPSED_ISSET_ID);
  }

  /** Returns true if field elapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetElapsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ELAPSED_ISSET_ID);
  }

  public void setElapsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ELAPSED_ISSET_ID, value);
  }

  public long getRows_completed() {
    return this.rows_completed;
  }

  public TImportStatus setRows_completed(long rows_completed) {
    this.rows_completed = rows_completed;
    setRows_completedIsSet(true);
    return this;
  }

  public void unsetRows_completed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWS_COMPLETED_ISSET_ID);
  }

  /** Returns true if field rows_completed is set (has been assigned a value) and false otherwise */
  public boolean isSetRows_completed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWS_COMPLETED_ISSET_ID);
  }

  public void setRows_completedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWS_COMPLETED_ISSET_ID, value);
  }

  public long getRows_estimated() {
    return this.rows_estimated;
  }

  public TImportStatus setRows_estimated(long rows_estimated) {
    this.rows_estimated = rows_estimated;
    setRows_estimatedIsSet(true);
    return this;
  }

  public void unsetRows_estimated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWS_ESTIMATED_ISSET_ID);
  }

  /** Returns true if field rows_estimated is set (has been assigned a value) and false otherwise */
  public boolean isSetRows_estimated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWS_ESTIMATED_ISSET_ID);
  }

  public void setRows_estimatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWS_ESTIMATED_ISSET_ID, value);
  }

  public long getRows_rejected() {
    return this.rows_rejected;
  }

  public TImportStatus setRows_rejected(long rows_rejected) {
    this.rows_rejected = rows_rejected;
    setRows_rejectedIsSet(true);
    return this;
  }

  public void unsetRows_rejected() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWS_REJECTED_ISSET_ID);
  }

  /** Returns true if field rows_rejected is set (has been assigned a value) and false otherwise */
  public boolean isSetRows_rejected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWS_REJECTED_ISSET_ID);
  }

  public void setRows_rejectedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWS_REJECTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ELAPSED:
      if (value == null) {
        unsetElapsed();
      } else {
        setElapsed((java.lang.Long)value);
      }
      break;

    case ROWS_COMPLETED:
      if (value == null) {
        unsetRows_completed();
      } else {
        setRows_completed((java.lang.Long)value);
      }
      break;

    case ROWS_ESTIMATED:
      if (value == null) {
        unsetRows_estimated();
      } else {
        setRows_estimated((java.lang.Long)value);
      }
      break;

    case ROWS_REJECTED:
      if (value == null) {
        unsetRows_rejected();
      } else {
        setRows_rejected((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ELAPSED:
      return getElapsed();

    case ROWS_COMPLETED:
      return getRows_completed();

    case ROWS_ESTIMATED:
      return getRows_estimated();

    case ROWS_REJECTED:
      return getRows_rejected();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ELAPSED:
      return isSetElapsed();
    case ROWS_COMPLETED:
      return isSetRows_completed();
    case ROWS_ESTIMATED:
      return isSetRows_estimated();
    case ROWS_REJECTED:
      return isSetRows_rejected();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TImportStatus)
      return this.equals((TImportStatus)that);
    return false;
  }

  public boolean equals(TImportStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_elapsed = true;
    boolean that_present_elapsed = true;
    if (this_present_elapsed || that_present_elapsed) {
      if (!(this_present_elapsed && that_present_elapsed))
        return false;
      if (this.elapsed != that.elapsed)
        return false;
    }

    boolean this_present_rows_completed = true;
    boolean that_present_rows_completed = true;
    if (this_present_rows_completed || that_present_rows_completed) {
      if (!(this_present_rows_completed && that_present_rows_completed))
        return false;
      if (this.rows_completed != that.rows_completed)
        return false;
    }

    boolean this_present_rows_estimated = true;
    boolean that_present_rows_estimated = true;
    if (this_present_rows_estimated || that_present_rows_estimated) {
      if (!(this_present_rows_estimated && that_present_rows_estimated))
        return false;
      if (this.rows_estimated != that.rows_estimated)
        return false;
    }

    boolean this_present_rows_rejected = true;
    boolean that_present_rows_rejected = true;
    if (this_present_rows_rejected || that_present_rows_rejected) {
      if (!(this_present_rows_rejected && that_present_rows_rejected))
        return false;
      if (this.rows_rejected != that.rows_rejected)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(elapsed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rows_completed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rows_estimated);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rows_rejected);

    return hashCode;
  }

  @Override
  public int compareTo(TImportStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetElapsed()).compareTo(other.isSetElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elapsed, other.elapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRows_completed()).compareTo(other.isSetRows_completed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows_completed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows_completed, other.rows_completed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRows_estimated()).compareTo(other.isSetRows_estimated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows_estimated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows_estimated, other.rows_estimated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRows_rejected()).compareTo(other.isSetRows_rejected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows_rejected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows_rejected, other.rows_rejected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TImportStatus(");
    boolean first = true;

    sb.append("elapsed:");
    sb.append(this.elapsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows_completed:");
    sb.append(this.rows_completed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows_estimated:");
    sb.append(this.rows_estimated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows_rejected:");
    sb.append(this.rows_rejected);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TImportStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TImportStatusStandardScheme getScheme() {
      return new TImportStatusStandardScheme();
    }
  }

  private static class TImportStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<TImportStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TImportStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ELAPSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.elapsed = iprot.readI64();
              struct.setElapsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rows_completed = iprot.readI64();
              struct.setRows_completedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROWS_ESTIMATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rows_estimated = iprot.readI64();
              struct.setRows_estimatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROWS_REJECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rows_rejected = iprot.readI64();
              struct.setRows_rejectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TImportStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ELAPSED_FIELD_DESC);
      oprot.writeI64(struct.elapsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_COMPLETED_FIELD_DESC);
      oprot.writeI64(struct.rows_completed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_ESTIMATED_FIELD_DESC);
      oprot.writeI64(struct.rows_estimated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_REJECTED_FIELD_DESC);
      oprot.writeI64(struct.rows_rejected);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TImportStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TImportStatusTupleScheme getScheme() {
      return new TImportStatusTupleScheme();
    }
  }

  private static class TImportStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<TImportStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TImportStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetElapsed()) {
        optionals.set(0);
      }
      if (struct.isSetRows_completed()) {
        optionals.set(1);
      }
      if (struct.isSetRows_estimated()) {
        optionals.set(2);
      }
      if (struct.isSetRows_rejected()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetElapsed()) {
        oprot.writeI64(struct.elapsed);
      }
      if (struct.isSetRows_completed()) {
        oprot.writeI64(struct.rows_completed);
      }
      if (struct.isSetRows_estimated()) {
        oprot.writeI64(struct.rows_estimated);
      }
      if (struct.isSetRows_rejected()) {
        oprot.writeI64(struct.rows_rejected);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TImportStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.elapsed = iprot.readI64();
        struct.setElapsedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows_completed = iprot.readI64();
        struct.setRows_completedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rows_estimated = iprot.readI64();
        struct.setRows_estimatedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rows_rejected = iprot.readI64();
        struct.setRows_rejectedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

