/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TSerializedRows implements org.apache.thrift.TBase<TSerializedRows, TSerializedRows._Fields>, java.io.Serializable, Cloneable, Comparable<TSerializedRows> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSerializedRows");

  private static final org.apache.thrift.protocol.TField BUFFERS_FIELD_DESC = new org.apache.thrift.protocol.TField("buffers", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BUFFER_LENGTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer_lengths", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BUFFERS_TOTAL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("buffers_total_size", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_COMPRESSION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_compression_time_ms", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("descriptor", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TARGET_INIT_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("target_init_vals", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField VARLEN_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("varlen_buffer", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField COUNT_DISTINCT_SETS_FIELD_DESC = new org.apache.thrift.protocol.TField("count_distinct_sets", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField EXPLANATION_FIELD_DESC = new org.apache.thrift.protocol.TField("explanation", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSerializedRowsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSerializedRowsTupleSchemeFactory();

  public java.util.List<java.nio.ByteBuffer> buffers; // required
  public java.util.List<java.lang.Long> buffer_lengths; // required
  public long buffers_total_size; // required
  public int total_compression_time_ms; // required
  public TResultSetBufferDescriptor descriptor; // required
  public java.util.List<TTargetInfo> targets; // required
  public java.util.List<java.lang.Long> target_init_vals; // required
  public java.util.List<java.nio.ByteBuffer> varlen_buffer; // required
  public java.util.List<TCountDistinctSet> count_distinct_sets; // required
  public java.lang.String explanation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUFFERS((short)1, "buffers"),
    BUFFER_LENGTHS((short)2, "buffer_lengths"),
    BUFFERS_TOTAL_SIZE((short)3, "buffers_total_size"),
    TOTAL_COMPRESSION_TIME_MS((short)4, "total_compression_time_ms"),
    DESCRIPTOR((short)5, "descriptor"),
    TARGETS((short)6, "targets"),
    TARGET_INIT_VALS((short)7, "target_init_vals"),
    VARLEN_BUFFER((short)8, "varlen_buffer"),
    COUNT_DISTINCT_SETS((short)9, "count_distinct_sets"),
    EXPLANATION((short)10, "explanation");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUFFERS
          return BUFFERS;
        case 2: // BUFFER_LENGTHS
          return BUFFER_LENGTHS;
        case 3: // BUFFERS_TOTAL_SIZE
          return BUFFERS_TOTAL_SIZE;
        case 4: // TOTAL_COMPRESSION_TIME_MS
          return TOTAL_COMPRESSION_TIME_MS;
        case 5: // DESCRIPTOR
          return DESCRIPTOR;
        case 6: // TARGETS
          return TARGETS;
        case 7: // TARGET_INIT_VALS
          return TARGET_INIT_VALS;
        case 8: // VARLEN_BUFFER
          return VARLEN_BUFFER;
        case 9: // COUNT_DISTINCT_SETS
          return COUNT_DISTINCT_SETS;
        case 10: // EXPLANATION
          return EXPLANATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUFFERS_TOTAL_SIZE_ISSET_ID = 0;
  private static final int __TOTAL_COMPRESSION_TIME_MS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUFFERS, new org.apache.thrift.meta_data.FieldMetaData("buffers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BUFFER_LENGTHS, new org.apache.thrift.meta_data.FieldMetaData("buffer_lengths", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BUFFERS_TOTAL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("buffers_total_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_COMPRESSION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("total_compression_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("descriptor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSetBufferDescriptor.class)));
    tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTargetInfo.class))));
    tmpMap.put(_Fields.TARGET_INIT_VALS, new org.apache.thrift.meta_data.FieldMetaData("target_init_vals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VARLEN_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("varlen_buffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.COUNT_DISTINCT_SETS, new org.apache.thrift.meta_data.FieldMetaData("count_distinct_sets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCountDistinctSet.class))));
    tmpMap.put(_Fields.EXPLANATION, new org.apache.thrift.meta_data.FieldMetaData("explanation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSerializedRows.class, metaDataMap);
  }

  public TSerializedRows() {
  }

  public TSerializedRows(
    java.util.List<java.nio.ByteBuffer> buffers,
    java.util.List<java.lang.Long> buffer_lengths,
    long buffers_total_size,
    int total_compression_time_ms,
    TResultSetBufferDescriptor descriptor,
    java.util.List<TTargetInfo> targets,
    java.util.List<java.lang.Long> target_init_vals,
    java.util.List<java.nio.ByteBuffer> varlen_buffer,
    java.util.List<TCountDistinctSet> count_distinct_sets,
    java.lang.String explanation)
  {
    this();
    this.buffers = buffers;
    this.buffer_lengths = buffer_lengths;
    this.buffers_total_size = buffers_total_size;
    setBuffers_total_sizeIsSet(true);
    this.total_compression_time_ms = total_compression_time_ms;
    setTotal_compression_time_msIsSet(true);
    this.descriptor = descriptor;
    this.targets = targets;
    this.target_init_vals = target_init_vals;
    this.varlen_buffer = varlen_buffer;
    this.count_distinct_sets = count_distinct_sets;
    this.explanation = explanation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSerializedRows(TSerializedRows other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBuffers()) {
      java.util.List<java.nio.ByteBuffer> __this__buffers = new java.util.ArrayList<java.nio.ByteBuffer>(other.buffers);
      this.buffers = __this__buffers;
    }
    if (other.isSetBuffer_lengths()) {
      java.util.List<java.lang.Long> __this__buffer_lengths = new java.util.ArrayList<java.lang.Long>(other.buffer_lengths);
      this.buffer_lengths = __this__buffer_lengths;
    }
    this.buffers_total_size = other.buffers_total_size;
    this.total_compression_time_ms = other.total_compression_time_ms;
    if (other.isSetDescriptor()) {
      this.descriptor = new TResultSetBufferDescriptor(other.descriptor);
    }
    if (other.isSetTargets()) {
      java.util.List<TTargetInfo> __this__targets = new java.util.ArrayList<TTargetInfo>(other.targets.size());
      for (TTargetInfo other_element : other.targets) {
        __this__targets.add(new TTargetInfo(other_element));
      }
      this.targets = __this__targets;
    }
    if (other.isSetTarget_init_vals()) {
      java.util.List<java.lang.Long> __this__target_init_vals = new java.util.ArrayList<java.lang.Long>(other.target_init_vals);
      this.target_init_vals = __this__target_init_vals;
    }
    if (other.isSetVarlen_buffer()) {
      java.util.List<java.nio.ByteBuffer> __this__varlen_buffer = new java.util.ArrayList<java.nio.ByteBuffer>(other.varlen_buffer);
      this.varlen_buffer = __this__varlen_buffer;
    }
    if (other.isSetCount_distinct_sets()) {
      java.util.List<TCountDistinctSet> __this__count_distinct_sets = new java.util.ArrayList<TCountDistinctSet>(other.count_distinct_sets.size());
      for (TCountDistinctSet other_element : other.count_distinct_sets) {
        __this__count_distinct_sets.add(new TCountDistinctSet(other_element));
      }
      this.count_distinct_sets = __this__count_distinct_sets;
    }
    if (other.isSetExplanation()) {
      this.explanation = other.explanation;
    }
  }

  public TSerializedRows deepCopy() {
    return new TSerializedRows(this);
  }

  @Override
  public void clear() {
    this.buffers = null;
    this.buffer_lengths = null;
    setBuffers_total_sizeIsSet(false);
    this.buffers_total_size = 0;
    setTotal_compression_time_msIsSet(false);
    this.total_compression_time_ms = 0;
    this.descriptor = null;
    this.targets = null;
    this.target_init_vals = null;
    this.varlen_buffer = null;
    this.count_distinct_sets = null;
    this.explanation = null;
  }

  public int getBuffersSize() {
    return (this.buffers == null) ? 0 : this.buffers.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getBuffersIterator() {
    return (this.buffers == null) ? null : this.buffers.iterator();
  }

  public void addToBuffers(java.nio.ByteBuffer elem) {
    if (this.buffers == null) {
      this.buffers = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.buffers.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getBuffers() {
    return this.buffers;
  }

  public TSerializedRows setBuffers(java.util.List<java.nio.ByteBuffer> buffers) {
    this.buffers = buffers;
    return this;
  }

  public void unsetBuffers() {
    this.buffers = null;
  }

  /** Returns true if field buffers is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffers() {
    return this.buffers != null;
  }

  public void setBuffersIsSet(boolean value) {
    if (!value) {
      this.buffers = null;
    }
  }

  public int getBuffer_lengthsSize() {
    return (this.buffer_lengths == null) ? 0 : this.buffer_lengths.size();
  }

  public java.util.Iterator<java.lang.Long> getBuffer_lengthsIterator() {
    return (this.buffer_lengths == null) ? null : this.buffer_lengths.iterator();
  }

  public void addToBuffer_lengths(long elem) {
    if (this.buffer_lengths == null) {
      this.buffer_lengths = new java.util.ArrayList<java.lang.Long>();
    }
    this.buffer_lengths.add(elem);
  }

  public java.util.List<java.lang.Long> getBuffer_lengths() {
    return this.buffer_lengths;
  }

  public TSerializedRows setBuffer_lengths(java.util.List<java.lang.Long> buffer_lengths) {
    this.buffer_lengths = buffer_lengths;
    return this;
  }

  public void unsetBuffer_lengths() {
    this.buffer_lengths = null;
  }

  /** Returns true if field buffer_lengths is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffer_lengths() {
    return this.buffer_lengths != null;
  }

  public void setBuffer_lengthsIsSet(boolean value) {
    if (!value) {
      this.buffer_lengths = null;
    }
  }

  public long getBuffers_total_size() {
    return this.buffers_total_size;
  }

  public TSerializedRows setBuffers_total_size(long buffers_total_size) {
    this.buffers_total_size = buffers_total_size;
    setBuffers_total_sizeIsSet(true);
    return this;
  }

  public void unsetBuffers_total_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFERS_TOTAL_SIZE_ISSET_ID);
  }

  /** Returns true if field buffers_total_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffers_total_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFERS_TOTAL_SIZE_ISSET_ID);
  }

  public void setBuffers_total_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFERS_TOTAL_SIZE_ISSET_ID, value);
  }

  public int getTotal_compression_time_ms() {
    return this.total_compression_time_ms;
  }

  public TSerializedRows setTotal_compression_time_ms(int total_compression_time_ms) {
    this.total_compression_time_ms = total_compression_time_ms;
    setTotal_compression_time_msIsSet(true);
    return this;
  }

  public void unsetTotal_compression_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_COMPRESSION_TIME_MS_ISSET_ID);
  }

  /** Returns true if field total_compression_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_compression_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_COMPRESSION_TIME_MS_ISSET_ID);
  }

  public void setTotal_compression_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_COMPRESSION_TIME_MS_ISSET_ID, value);
  }

  public TResultSetBufferDescriptor getDescriptor() {
    return this.descriptor;
  }

  public TSerializedRows setDescriptor(TResultSetBufferDescriptor descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  public void unsetDescriptor() {
    this.descriptor = null;
  }

  /** Returns true if field descriptor is set (has been assigned a value) and false otherwise */
  public boolean isSetDescriptor() {
    return this.descriptor != null;
  }

  public void setDescriptorIsSet(boolean value) {
    if (!value) {
      this.descriptor = null;
    }
  }

  public int getTargetsSize() {
    return (this.targets == null) ? 0 : this.targets.size();
  }

  public java.util.Iterator<TTargetInfo> getTargetsIterator() {
    return (this.targets == null) ? null : this.targets.iterator();
  }

  public void addToTargets(TTargetInfo elem) {
    if (this.targets == null) {
      this.targets = new java.util.ArrayList<TTargetInfo>();
    }
    this.targets.add(elem);
  }

  public java.util.List<TTargetInfo> getTargets() {
    return this.targets;
  }

  public TSerializedRows setTargets(java.util.List<TTargetInfo> targets) {
    this.targets = targets;
    return this;
  }

  public void unsetTargets() {
    this.targets = null;
  }

  /** Returns true if field targets is set (has been assigned a value) and false otherwise */
  public boolean isSetTargets() {
    return this.targets != null;
  }

  public void setTargetsIsSet(boolean value) {
    if (!value) {
      this.targets = null;
    }
  }

  public int getTarget_init_valsSize() {
    return (this.target_init_vals == null) ? 0 : this.target_init_vals.size();
  }

  public java.util.Iterator<java.lang.Long> getTarget_init_valsIterator() {
    return (this.target_init_vals == null) ? null : this.target_init_vals.iterator();
  }

  public void addToTarget_init_vals(long elem) {
    if (this.target_init_vals == null) {
      this.target_init_vals = new java.util.ArrayList<java.lang.Long>();
    }
    this.target_init_vals.add(elem);
  }

  public java.util.List<java.lang.Long> getTarget_init_vals() {
    return this.target_init_vals;
  }

  public TSerializedRows setTarget_init_vals(java.util.List<java.lang.Long> target_init_vals) {
    this.target_init_vals = target_init_vals;
    return this;
  }

  public void unsetTarget_init_vals() {
    this.target_init_vals = null;
  }

  /** Returns true if field target_init_vals is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_init_vals() {
    return this.target_init_vals != null;
  }

  public void setTarget_init_valsIsSet(boolean value) {
    if (!value) {
      this.target_init_vals = null;
    }
  }

  public int getVarlen_bufferSize() {
    return (this.varlen_buffer == null) ? 0 : this.varlen_buffer.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getVarlen_bufferIterator() {
    return (this.varlen_buffer == null) ? null : this.varlen_buffer.iterator();
  }

  public void addToVarlen_buffer(java.nio.ByteBuffer elem) {
    if (this.varlen_buffer == null) {
      this.varlen_buffer = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.varlen_buffer.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getVarlen_buffer() {
    return this.varlen_buffer;
  }

  public TSerializedRows setVarlen_buffer(java.util.List<java.nio.ByteBuffer> varlen_buffer) {
    this.varlen_buffer = varlen_buffer;
    return this;
  }

  public void unsetVarlen_buffer() {
    this.varlen_buffer = null;
  }

  /** Returns true if field varlen_buffer is set (has been assigned a value) and false otherwise */
  public boolean isSetVarlen_buffer() {
    return this.varlen_buffer != null;
  }

  public void setVarlen_bufferIsSet(boolean value) {
    if (!value) {
      this.varlen_buffer = null;
    }
  }

  public int getCount_distinct_setsSize() {
    return (this.count_distinct_sets == null) ? 0 : this.count_distinct_sets.size();
  }

  public java.util.Iterator<TCountDistinctSet> getCount_distinct_setsIterator() {
    return (this.count_distinct_sets == null) ? null : this.count_distinct_sets.iterator();
  }

  public void addToCount_distinct_sets(TCountDistinctSet elem) {
    if (this.count_distinct_sets == null) {
      this.count_distinct_sets = new java.util.ArrayList<TCountDistinctSet>();
    }
    this.count_distinct_sets.add(elem);
  }

  public java.util.List<TCountDistinctSet> getCount_distinct_sets() {
    return this.count_distinct_sets;
  }

  public TSerializedRows setCount_distinct_sets(java.util.List<TCountDistinctSet> count_distinct_sets) {
    this.count_distinct_sets = count_distinct_sets;
    return this;
  }

  public void unsetCount_distinct_sets() {
    this.count_distinct_sets = null;
  }

  /** Returns true if field count_distinct_sets is set (has been assigned a value) and false otherwise */
  public boolean isSetCount_distinct_sets() {
    return this.count_distinct_sets != null;
  }

  public void setCount_distinct_setsIsSet(boolean value) {
    if (!value) {
      this.count_distinct_sets = null;
    }
  }

  public java.lang.String getExplanation() {
    return this.explanation;
  }

  public TSerializedRows setExplanation(java.lang.String explanation) {
    this.explanation = explanation;
    return this;
  }

  public void unsetExplanation() {
    this.explanation = null;
  }

  /** Returns true if field explanation is set (has been assigned a value) and false otherwise */
  public boolean isSetExplanation() {
    return this.explanation != null;
  }

  public void setExplanationIsSet(boolean value) {
    if (!value) {
      this.explanation = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BUFFERS:
      if (value == null) {
        unsetBuffers();
      } else {
        setBuffers((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case BUFFER_LENGTHS:
      if (value == null) {
        unsetBuffer_lengths();
      } else {
        setBuffer_lengths((java.util.List<java.lang.Long>)value);
      }
      break;

    case BUFFERS_TOTAL_SIZE:
      if (value == null) {
        unsetBuffers_total_size();
      } else {
        setBuffers_total_size((java.lang.Long)value);
      }
      break;

    case TOTAL_COMPRESSION_TIME_MS:
      if (value == null) {
        unsetTotal_compression_time_ms();
      } else {
        setTotal_compression_time_ms((java.lang.Integer)value);
      }
      break;

    case DESCRIPTOR:
      if (value == null) {
        unsetDescriptor();
      } else {
        setDescriptor((TResultSetBufferDescriptor)value);
      }
      break;

    case TARGETS:
      if (value == null) {
        unsetTargets();
      } else {
        setTargets((java.util.List<TTargetInfo>)value);
      }
      break;

    case TARGET_INIT_VALS:
      if (value == null) {
        unsetTarget_init_vals();
      } else {
        setTarget_init_vals((java.util.List<java.lang.Long>)value);
      }
      break;

    case VARLEN_BUFFER:
      if (value == null) {
        unsetVarlen_buffer();
      } else {
        setVarlen_buffer((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case COUNT_DISTINCT_SETS:
      if (value == null) {
        unsetCount_distinct_sets();
      } else {
        setCount_distinct_sets((java.util.List<TCountDistinctSet>)value);
      }
      break;

    case EXPLANATION:
      if (value == null) {
        unsetExplanation();
      } else {
        setExplanation((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BUFFERS:
      return getBuffers();

    case BUFFER_LENGTHS:
      return getBuffer_lengths();

    case BUFFERS_TOTAL_SIZE:
      return getBuffers_total_size();

    case TOTAL_COMPRESSION_TIME_MS:
      return getTotal_compression_time_ms();

    case DESCRIPTOR:
      return getDescriptor();

    case TARGETS:
      return getTargets();

    case TARGET_INIT_VALS:
      return getTarget_init_vals();

    case VARLEN_BUFFER:
      return getVarlen_buffer();

    case COUNT_DISTINCT_SETS:
      return getCount_distinct_sets();

    case EXPLANATION:
      return getExplanation();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BUFFERS:
      return isSetBuffers();
    case BUFFER_LENGTHS:
      return isSetBuffer_lengths();
    case BUFFERS_TOTAL_SIZE:
      return isSetBuffers_total_size();
    case TOTAL_COMPRESSION_TIME_MS:
      return isSetTotal_compression_time_ms();
    case DESCRIPTOR:
      return isSetDescriptor();
    case TARGETS:
      return isSetTargets();
    case TARGET_INIT_VALS:
      return isSetTarget_init_vals();
    case VARLEN_BUFFER:
      return isSetVarlen_buffer();
    case COUNT_DISTINCT_SETS:
      return isSetCount_distinct_sets();
    case EXPLANATION:
      return isSetExplanation();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TSerializedRows)
      return this.equals((TSerializedRows)that);
    return false;
  }

  public boolean equals(TSerializedRows that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_buffers = true && this.isSetBuffers();
    boolean that_present_buffers = true && that.isSetBuffers();
    if (this_present_buffers || that_present_buffers) {
      if (!(this_present_buffers && that_present_buffers))
        return false;
      if (!this.buffers.equals(that.buffers))
        return false;
    }

    boolean this_present_buffer_lengths = true && this.isSetBuffer_lengths();
    boolean that_present_buffer_lengths = true && that.isSetBuffer_lengths();
    if (this_present_buffer_lengths || that_present_buffer_lengths) {
      if (!(this_present_buffer_lengths && that_present_buffer_lengths))
        return false;
      if (!this.buffer_lengths.equals(that.buffer_lengths))
        return false;
    }

    boolean this_present_buffers_total_size = true;
    boolean that_present_buffers_total_size = true;
    if (this_present_buffers_total_size || that_present_buffers_total_size) {
      if (!(this_present_buffers_total_size && that_present_buffers_total_size))
        return false;
      if (this.buffers_total_size != that.buffers_total_size)
        return false;
    }

    boolean this_present_total_compression_time_ms = true;
    boolean that_present_total_compression_time_ms = true;
    if (this_present_total_compression_time_ms || that_present_total_compression_time_ms) {
      if (!(this_present_total_compression_time_ms && that_present_total_compression_time_ms))
        return false;
      if (this.total_compression_time_ms != that.total_compression_time_ms)
        return false;
    }

    boolean this_present_descriptor = true && this.isSetDescriptor();
    boolean that_present_descriptor = true && that.isSetDescriptor();
    if (this_present_descriptor || that_present_descriptor) {
      if (!(this_present_descriptor && that_present_descriptor))
        return false;
      if (!this.descriptor.equals(that.descriptor))
        return false;
    }

    boolean this_present_targets = true && this.isSetTargets();
    boolean that_present_targets = true && that.isSetTargets();
    if (this_present_targets || that_present_targets) {
      if (!(this_present_targets && that_present_targets))
        return false;
      if (!this.targets.equals(that.targets))
        return false;
    }

    boolean this_present_target_init_vals = true && this.isSetTarget_init_vals();
    boolean that_present_target_init_vals = true && that.isSetTarget_init_vals();
    if (this_present_target_init_vals || that_present_target_init_vals) {
      if (!(this_present_target_init_vals && that_present_target_init_vals))
        return false;
      if (!this.target_init_vals.equals(that.target_init_vals))
        return false;
    }

    boolean this_present_varlen_buffer = true && this.isSetVarlen_buffer();
    boolean that_present_varlen_buffer = true && that.isSetVarlen_buffer();
    if (this_present_varlen_buffer || that_present_varlen_buffer) {
      if (!(this_present_varlen_buffer && that_present_varlen_buffer))
        return false;
      if (!this.varlen_buffer.equals(that.varlen_buffer))
        return false;
    }

    boolean this_present_count_distinct_sets = true && this.isSetCount_distinct_sets();
    boolean that_present_count_distinct_sets = true && that.isSetCount_distinct_sets();
    if (this_present_count_distinct_sets || that_present_count_distinct_sets) {
      if (!(this_present_count_distinct_sets && that_present_count_distinct_sets))
        return false;
      if (!this.count_distinct_sets.equals(that.count_distinct_sets))
        return false;
    }

    boolean this_present_explanation = true && this.isSetExplanation();
    boolean that_present_explanation = true && that.isSetExplanation();
    if (this_present_explanation || that_present_explanation) {
      if (!(this_present_explanation && that_present_explanation))
        return false;
      if (!this.explanation.equals(that.explanation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBuffers()) ? 131071 : 524287);
    if (isSetBuffers())
      hashCode = hashCode * 8191 + buffers.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuffer_lengths()) ? 131071 : 524287);
    if (isSetBuffer_lengths())
      hashCode = hashCode * 8191 + buffer_lengths.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(buffers_total_size);

    hashCode = hashCode * 8191 + total_compression_time_ms;

    hashCode = hashCode * 8191 + ((isSetDescriptor()) ? 131071 : 524287);
    if (isSetDescriptor())
      hashCode = hashCode * 8191 + descriptor.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargets()) ? 131071 : 524287);
    if (isSetTargets())
      hashCode = hashCode * 8191 + targets.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget_init_vals()) ? 131071 : 524287);
    if (isSetTarget_init_vals())
      hashCode = hashCode * 8191 + target_init_vals.hashCode();

    hashCode = hashCode * 8191 + ((isSetVarlen_buffer()) ? 131071 : 524287);
    if (isSetVarlen_buffer())
      hashCode = hashCode * 8191 + varlen_buffer.hashCode();

    hashCode = hashCode * 8191 + ((isSetCount_distinct_sets()) ? 131071 : 524287);
    if (isSetCount_distinct_sets())
      hashCode = hashCode * 8191 + count_distinct_sets.hashCode();

    hashCode = hashCode * 8191 + ((isSetExplanation()) ? 131071 : 524287);
    if (isSetExplanation())
      hashCode = hashCode * 8191 + explanation.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSerializedRows other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBuffers()).compareTo(other.isSetBuffers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffers, other.buffers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuffer_lengths()).compareTo(other.isSetBuffer_lengths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffer_lengths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer_lengths, other.buffer_lengths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuffers_total_size()).compareTo(other.isSetBuffers_total_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffers_total_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffers_total_size, other.buffers_total_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_compression_time_ms()).compareTo(other.isSetTotal_compression_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_compression_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_compression_time_ms, other.total_compression_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescriptor()).compareTo(other.isSetDescriptor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescriptor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descriptor, other.descriptor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTargets()).compareTo(other.isSetTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targets, other.targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget_init_vals()).compareTo(other.isSetTarget_init_vals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_init_vals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_init_vals, other.target_init_vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVarlen_buffer()).compareTo(other.isSetVarlen_buffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarlen_buffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varlen_buffer, other.varlen_buffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount_distinct_sets()).compareTo(other.isSetCount_distinct_sets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount_distinct_sets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count_distinct_sets, other.count_distinct_sets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExplanation()).compareTo(other.isSetExplanation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplanation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explanation, other.explanation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSerializedRows(");
    boolean first = true;

    sb.append("buffers:");
    if (this.buffers == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.buffers, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buffer_lengths:");
    if (this.buffer_lengths == null) {
      sb.append("null");
    } else {
      sb.append(this.buffer_lengths);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buffers_total_size:");
    sb.append(this.buffers_total_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_compression_time_ms:");
    sb.append(this.total_compression_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("descriptor:");
    if (this.descriptor == null) {
      sb.append("null");
    } else {
      sb.append(this.descriptor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targets:");
    if (this.targets == null) {
      sb.append("null");
    } else {
      sb.append(this.targets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_init_vals:");
    if (this.target_init_vals == null) {
      sb.append("null");
    } else {
      sb.append(this.target_init_vals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("varlen_buffer:");
    if (this.varlen_buffer == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.varlen_buffer, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count_distinct_sets:");
    if (this.count_distinct_sets == null) {
      sb.append("null");
    } else {
      sb.append(this.count_distinct_sets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("explanation:");
    if (this.explanation == null) {
      sb.append("null");
    } else {
      sb.append(this.explanation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (descriptor != null) {
      descriptor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSerializedRowsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSerializedRowsStandardScheme getScheme() {
      return new TSerializedRowsStandardScheme();
    }
  }

  private static class TSerializedRowsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSerializedRows> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSerializedRows struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUFFERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.buffers = new java.util.ArrayList<java.nio.ByteBuffer>(_list56.size);
                java.nio.ByteBuffer _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readBinary();
                  struct.buffers.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setBuffersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUFFER_LENGTHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.buffer_lengths = new java.util.ArrayList<java.lang.Long>(_list59.size);
                long _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = iprot.readI64();
                  struct.buffer_lengths.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setBuffer_lengthsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUFFERS_TOTAL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.buffers_total_size = iprot.readI64();
              struct.setBuffers_total_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_COMPRESSION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total_compression_time_ms = iprot.readI32();
              struct.setTotal_compression_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.descriptor = new TResultSetBufferDescriptor();
              struct.descriptor.read(iprot);
              struct.setDescriptorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.targets = new java.util.ArrayList<TTargetInfo>(_list62.size);
                TTargetInfo _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = new TTargetInfo();
                  _elem63.read(iprot);
                  struct.targets.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TARGET_INIT_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
                struct.target_init_vals = new java.util.ArrayList<java.lang.Long>(_list65.size);
                long _elem66;
                for (int _i67 = 0; _i67 < _list65.size; ++_i67)
                {
                  _elem66 = iprot.readI64();
                  struct.target_init_vals.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setTarget_init_valsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VARLEN_BUFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.varlen_buffer = new java.util.ArrayList<java.nio.ByteBuffer>(_list68.size);
                java.nio.ByteBuffer _elem69;
                for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                {
                  _elem69 = iprot.readBinary();
                  struct.varlen_buffer.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setVarlen_bufferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COUNT_DISTINCT_SETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                struct.count_distinct_sets = new java.util.ArrayList<TCountDistinctSet>(_list71.size);
                TCountDistinctSet _elem72;
                for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                {
                  _elem72 = new TCountDistinctSet();
                  _elem72.read(iprot);
                  struct.count_distinct_sets.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setCount_distinct_setsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXPLANATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.explanation = iprot.readString();
              struct.setExplanationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSerializedRows struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.buffers != null) {
        oprot.writeFieldBegin(BUFFERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.buffers.size()));
          for (java.nio.ByteBuffer _iter74 : struct.buffers)
          {
            oprot.writeBinary(_iter74);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.buffer_lengths != null) {
        oprot.writeFieldBegin(BUFFER_LENGTHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.buffer_lengths.size()));
          for (long _iter75 : struct.buffer_lengths)
          {
            oprot.writeI64(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUFFERS_TOTAL_SIZE_FIELD_DESC);
      oprot.writeI64(struct.buffers_total_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COMPRESSION_TIME_MS_FIELD_DESC);
      oprot.writeI32(struct.total_compression_time_ms);
      oprot.writeFieldEnd();
      if (struct.descriptor != null) {
        oprot.writeFieldBegin(DESCRIPTOR_FIELD_DESC);
        struct.descriptor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.targets != null) {
        oprot.writeFieldBegin(TARGETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.targets.size()));
          for (TTargetInfo _iter76 : struct.targets)
          {
            _iter76.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.target_init_vals != null) {
        oprot.writeFieldBegin(TARGET_INIT_VALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.target_init_vals.size()));
          for (long _iter77 : struct.target_init_vals)
          {
            oprot.writeI64(_iter77);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.varlen_buffer != null) {
        oprot.writeFieldBegin(VARLEN_BUFFER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.varlen_buffer.size()));
          for (java.nio.ByteBuffer _iter78 : struct.varlen_buffer)
          {
            oprot.writeBinary(_iter78);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.count_distinct_sets != null) {
        oprot.writeFieldBegin(COUNT_DISTINCT_SETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.count_distinct_sets.size()));
          for (TCountDistinctSet _iter79 : struct.count_distinct_sets)
          {
            _iter79.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.explanation != null) {
        oprot.writeFieldBegin(EXPLANATION_FIELD_DESC);
        oprot.writeString(struct.explanation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSerializedRowsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSerializedRowsTupleScheme getScheme() {
      return new TSerializedRowsTupleScheme();
    }
  }

  private static class TSerializedRowsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSerializedRows> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSerializedRows struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBuffers()) {
        optionals.set(0);
      }
      if (struct.isSetBuffer_lengths()) {
        optionals.set(1);
      }
      if (struct.isSetBuffers_total_size()) {
        optionals.set(2);
      }
      if (struct.isSetTotal_compression_time_ms()) {
        optionals.set(3);
      }
      if (struct.isSetDescriptor()) {
        optionals.set(4);
      }
      if (struct.isSetTargets()) {
        optionals.set(5);
      }
      if (struct.isSetTarget_init_vals()) {
        optionals.set(6);
      }
      if (struct.isSetVarlen_buffer()) {
        optionals.set(7);
      }
      if (struct.isSetCount_distinct_sets()) {
        optionals.set(8);
      }
      if (struct.isSetExplanation()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBuffers()) {
        {
          oprot.writeI32(struct.buffers.size());
          for (java.nio.ByteBuffer _iter80 : struct.buffers)
          {
            oprot.writeBinary(_iter80);
          }
        }
      }
      if (struct.isSetBuffer_lengths()) {
        {
          oprot.writeI32(struct.buffer_lengths.size());
          for (long _iter81 : struct.buffer_lengths)
          {
            oprot.writeI64(_iter81);
          }
        }
      }
      if (struct.isSetBuffers_total_size()) {
        oprot.writeI64(struct.buffers_total_size);
      }
      if (struct.isSetTotal_compression_time_ms()) {
        oprot.writeI32(struct.total_compression_time_ms);
      }
      if (struct.isSetDescriptor()) {
        struct.descriptor.write(oprot);
      }
      if (struct.isSetTargets()) {
        {
          oprot.writeI32(struct.targets.size());
          for (TTargetInfo _iter82 : struct.targets)
          {
            _iter82.write(oprot);
          }
        }
      }
      if (struct.isSetTarget_init_vals()) {
        {
          oprot.writeI32(struct.target_init_vals.size());
          for (long _iter83 : struct.target_init_vals)
          {
            oprot.writeI64(_iter83);
          }
        }
      }
      if (struct.isSetVarlen_buffer()) {
        {
          oprot.writeI32(struct.varlen_buffer.size());
          for (java.nio.ByteBuffer _iter84 : struct.varlen_buffer)
          {
            oprot.writeBinary(_iter84);
          }
        }
      }
      if (struct.isSetCount_distinct_sets()) {
        {
          oprot.writeI32(struct.count_distinct_sets.size());
          for (TCountDistinctSet _iter85 : struct.count_distinct_sets)
          {
            _iter85.write(oprot);
          }
        }
      }
      if (struct.isSetExplanation()) {
        oprot.writeString(struct.explanation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSerializedRows struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.buffers = new java.util.ArrayList<java.nio.ByteBuffer>(_list86.size);
          java.nio.ByteBuffer _elem87;
          for (int _i88 = 0; _i88 < _list86.size; ++_i88)
          {
            _elem87 = iprot.readBinary();
            struct.buffers.add(_elem87);
          }
        }
        struct.setBuffersIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.buffer_lengths = new java.util.ArrayList<java.lang.Long>(_list89.size);
          long _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readI64();
            struct.buffer_lengths.add(_elem90);
          }
        }
        struct.setBuffer_lengthsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.buffers_total_size = iprot.readI64();
        struct.setBuffers_total_sizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.total_compression_time_ms = iprot.readI32();
        struct.setTotal_compression_time_msIsSet(true);
      }
      if (incoming.get(4)) {
        struct.descriptor = new TResultSetBufferDescriptor();
        struct.descriptor.read(iprot);
        struct.setDescriptorIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.targets = new java.util.ArrayList<TTargetInfo>(_list92.size);
          TTargetInfo _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = new TTargetInfo();
            _elem93.read(iprot);
            struct.targets.add(_elem93);
          }
        }
        struct.setTargetsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.target_init_vals = new java.util.ArrayList<java.lang.Long>(_list95.size);
          long _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = iprot.readI64();
            struct.target_init_vals.add(_elem96);
          }
        }
        struct.setTarget_init_valsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.varlen_buffer = new java.util.ArrayList<java.nio.ByteBuffer>(_list98.size);
          java.nio.ByteBuffer _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = iprot.readBinary();
            struct.varlen_buffer.add(_elem99);
          }
        }
        struct.setVarlen_bufferIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.count_distinct_sets = new java.util.ArrayList<TCountDistinctSet>(_list101.size);
          TCountDistinctSet _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = new TCountDistinctSet();
            _elem102.read(iprot);
            struct.count_distinct_sets.add(_elem102);
          }
        }
        struct.setCount_distinct_setsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.explanation = iprot.readString();
        struct.setExplanationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

