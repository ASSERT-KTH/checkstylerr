/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TResultSetBufferDescriptor implements org.apache.thrift.TBase<TResultSetBufferDescriptor, TResultSetBufferDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TResultSetBufferDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultSetBufferDescriptor");

  private static final org.apache.thrift.protocol.TField LAYOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("layout", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEYLESS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyless", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IDX_TARGET_AS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("idx_target_as_key", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("min_val", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("max_val", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField GROUP_COL_WIDTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("group_col_widths", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField KEY_BYTEWIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("key_bytewidth", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField COL_SLOT_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("col_slot_context", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TARGET_GROUPBY_INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("target_groupby_indices", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField COUNT_DISTINCT_DESCRIPTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("count_distinct_descriptors", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField FORCE_4BYTE_FLOAT_FIELD_DESC = new org.apache.thrift.protocol.TField("force_4byte_float", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResultSetBufferDescriptorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResultSetBufferDescriptorTupleSchemeFactory();

  /**
   * 
   * @see TResultSetLayout
   */
  public TResultSetLayout layout; // required
  public boolean keyless; // required
  public int entry_count; // required
  public int idx_target_as_key; // required
  public long min_val; // required
  public long max_val; // required
  public long bucket; // required
  public java.util.List<java.lang.Short> group_col_widths; // required
  public short key_bytewidth; // required
  public TColSlotContext col_slot_context; // required
  public java.util.List<java.lang.Integer> target_groupby_indices; // required
  public java.util.List<TCountDistinctDescriptor> count_distinct_descriptors; // required
  public boolean force_4byte_float; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TResultSetLayout
     */
    LAYOUT((short)1, "layout"),
    KEYLESS((short)2, "keyless"),
    ENTRY_COUNT((short)3, "entry_count"),
    IDX_TARGET_AS_KEY((short)4, "idx_target_as_key"),
    MIN_VAL((short)5, "min_val"),
    MAX_VAL((short)6, "max_val"),
    BUCKET((short)7, "bucket"),
    GROUP_COL_WIDTHS((short)8, "group_col_widths"),
    KEY_BYTEWIDTH((short)9, "key_bytewidth"),
    COL_SLOT_CONTEXT((short)10, "col_slot_context"),
    TARGET_GROUPBY_INDICES((short)11, "target_groupby_indices"),
    COUNT_DISTINCT_DESCRIPTORS((short)12, "count_distinct_descriptors"),
    FORCE_4BYTE_FLOAT((short)13, "force_4byte_float");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAYOUT
          return LAYOUT;
        case 2: // KEYLESS
          return KEYLESS;
        case 3: // ENTRY_COUNT
          return ENTRY_COUNT;
        case 4: // IDX_TARGET_AS_KEY
          return IDX_TARGET_AS_KEY;
        case 5: // MIN_VAL
          return MIN_VAL;
        case 6: // MAX_VAL
          return MAX_VAL;
        case 7: // BUCKET
          return BUCKET;
        case 8: // GROUP_COL_WIDTHS
          return GROUP_COL_WIDTHS;
        case 9: // KEY_BYTEWIDTH
          return KEY_BYTEWIDTH;
        case 10: // COL_SLOT_CONTEXT
          return COL_SLOT_CONTEXT;
        case 11: // TARGET_GROUPBY_INDICES
          return TARGET_GROUPBY_INDICES;
        case 12: // COUNT_DISTINCT_DESCRIPTORS
          return COUNT_DISTINCT_DESCRIPTORS;
        case 13: // FORCE_4BYTE_FLOAT
          return FORCE_4BYTE_FLOAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEYLESS_ISSET_ID = 0;
  private static final int __ENTRY_COUNT_ISSET_ID = 1;
  private static final int __IDX_TARGET_AS_KEY_ISSET_ID = 2;
  private static final int __MIN_VAL_ISSET_ID = 3;
  private static final int __MAX_VAL_ISSET_ID = 4;
  private static final int __BUCKET_ISSET_ID = 5;
  private static final int __KEY_BYTEWIDTH_ISSET_ID = 6;
  private static final int __FORCE_4BYTE_FLOAT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAYOUT, new org.apache.thrift.meta_data.FieldMetaData("layout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResultSetLayout.class)));
    tmpMap.put(_Fields.KEYLESS, new org.apache.thrift.meta_data.FieldMetaData("keyless", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("entry_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDX_TARGET_AS_KEY, new org.apache.thrift.meta_data.FieldMetaData("idx_target_as_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_VAL, new org.apache.thrift.meta_data.FieldMetaData("min_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_VAL, new org.apache.thrift.meta_data.FieldMetaData("max_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUCKET, new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_COL_WIDTHS, new org.apache.thrift.meta_data.FieldMetaData("group_col_widths", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.KEY_BYTEWIDTH, new org.apache.thrift.meta_data.FieldMetaData("key_bytewidth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.COL_SLOT_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("col_slot_context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColSlotContext.class)));
    tmpMap.put(_Fields.TARGET_GROUPBY_INDICES, new org.apache.thrift.meta_data.FieldMetaData("target_groupby_indices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COUNT_DISTINCT_DESCRIPTORS, new org.apache.thrift.meta_data.FieldMetaData("count_distinct_descriptors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "TCountDistinctDescriptors")));
    tmpMap.put(_Fields.FORCE_4BYTE_FLOAT, new org.apache.thrift.meta_data.FieldMetaData("force_4byte_float", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultSetBufferDescriptor.class, metaDataMap);
  }

  public TResultSetBufferDescriptor() {
  }

  public TResultSetBufferDescriptor(
    TResultSetLayout layout,
    boolean keyless,
    int entry_count,
    int idx_target_as_key,
    long min_val,
    long max_val,
    long bucket,
    java.util.List<java.lang.Short> group_col_widths,
    short key_bytewidth,
    TColSlotContext col_slot_context,
    java.util.List<java.lang.Integer> target_groupby_indices,
    java.util.List<TCountDistinctDescriptor> count_distinct_descriptors,
    boolean force_4byte_float)
  {
    this();
    this.layout = layout;
    this.keyless = keyless;
    setKeylessIsSet(true);
    this.entry_count = entry_count;
    setEntry_countIsSet(true);
    this.idx_target_as_key = idx_target_as_key;
    setIdx_target_as_keyIsSet(true);
    this.min_val = min_val;
    setMin_valIsSet(true);
    this.max_val = max_val;
    setMax_valIsSet(true);
    this.bucket = bucket;
    setBucketIsSet(true);
    this.group_col_widths = group_col_widths;
    this.key_bytewidth = key_bytewidth;
    setKey_bytewidthIsSet(true);
    this.col_slot_context = col_slot_context;
    this.target_groupby_indices = target_groupby_indices;
    this.count_distinct_descriptors = count_distinct_descriptors;
    this.force_4byte_float = force_4byte_float;
    setForce_4byte_floatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultSetBufferDescriptor(TResultSetBufferDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLayout()) {
      this.layout = other.layout;
    }
    this.keyless = other.keyless;
    this.entry_count = other.entry_count;
    this.idx_target_as_key = other.idx_target_as_key;
    this.min_val = other.min_val;
    this.max_val = other.max_val;
    this.bucket = other.bucket;
    if (other.isSetGroup_col_widths()) {
      java.util.List<java.lang.Short> __this__group_col_widths = new java.util.ArrayList<java.lang.Short>(other.group_col_widths);
      this.group_col_widths = __this__group_col_widths;
    }
    this.key_bytewidth = other.key_bytewidth;
    if (other.isSetCol_slot_context()) {
      this.col_slot_context = new TColSlotContext(other.col_slot_context);
    }
    if (other.isSetTarget_groupby_indices()) {
      java.util.List<java.lang.Integer> __this__target_groupby_indices = new java.util.ArrayList<java.lang.Integer>(other.target_groupby_indices);
      this.target_groupby_indices = __this__target_groupby_indices;
    }
    if (other.isSetCount_distinct_descriptors()) {
      java.util.List<TCountDistinctDescriptor> __this__count_distinct_descriptors = new java.util.ArrayList<TCountDistinctDescriptor>(other.count_distinct_descriptors.size());
      for (TCountDistinctDescriptor other_element : other.count_distinct_descriptors) {
        __this__count_distinct_descriptors.add(new TCountDistinctDescriptor(other_element));
      }
      this.count_distinct_descriptors = __this__count_distinct_descriptors;
    }
    this.force_4byte_float = other.force_4byte_float;
  }

  public TResultSetBufferDescriptor deepCopy() {
    return new TResultSetBufferDescriptor(this);
  }

  @Override
  public void clear() {
    this.layout = null;
    setKeylessIsSet(false);
    this.keyless = false;
    setEntry_countIsSet(false);
    this.entry_count = 0;
    setIdx_target_as_keyIsSet(false);
    this.idx_target_as_key = 0;
    setMin_valIsSet(false);
    this.min_val = 0;
    setMax_valIsSet(false);
    this.max_val = 0;
    setBucketIsSet(false);
    this.bucket = 0;
    this.group_col_widths = null;
    setKey_bytewidthIsSet(false);
    this.key_bytewidth = 0;
    this.col_slot_context = null;
    this.target_groupby_indices = null;
    this.count_distinct_descriptors = null;
    setForce_4byte_floatIsSet(false);
    this.force_4byte_float = false;
  }

  /**
   * 
   * @see TResultSetLayout
   */
  public TResultSetLayout getLayout() {
    return this.layout;
  }

  /**
   * 
   * @see TResultSetLayout
   */
  public TResultSetBufferDescriptor setLayout(TResultSetLayout layout) {
    this.layout = layout;
    return this;
  }

  public void unsetLayout() {
    this.layout = null;
  }

  /** Returns true if field layout is set (has been assigned a value) and false otherwise */
  public boolean isSetLayout() {
    return this.layout != null;
  }

  public void setLayoutIsSet(boolean value) {
    if (!value) {
      this.layout = null;
    }
  }

  public boolean isKeyless() {
    return this.keyless;
  }

  public TResultSetBufferDescriptor setKeyless(boolean keyless) {
    this.keyless = keyless;
    setKeylessIsSet(true);
    return this;
  }

  public void unsetKeyless() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEYLESS_ISSET_ID);
  }

  /** Returns true if field keyless is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyless() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEYLESS_ISSET_ID);
  }

  public void setKeylessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEYLESS_ISSET_ID, value);
  }

  public int getEntry_count() {
    return this.entry_count;
  }

  public TResultSetBufferDescriptor setEntry_count(int entry_count) {
    this.entry_count = entry_count;
    setEntry_countIsSet(true);
    return this;
  }

  public void unsetEntry_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRY_COUNT_ISSET_ID);
  }

  /** Returns true if field entry_count is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRY_COUNT_ISSET_ID);
  }

  public void setEntry_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRY_COUNT_ISSET_ID, value);
  }

  public int getIdx_target_as_key() {
    return this.idx_target_as_key;
  }

  public TResultSetBufferDescriptor setIdx_target_as_key(int idx_target_as_key) {
    this.idx_target_as_key = idx_target_as_key;
    setIdx_target_as_keyIsSet(true);
    return this;
  }

  public void unsetIdx_target_as_key() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDX_TARGET_AS_KEY_ISSET_ID);
  }

  /** Returns true if field idx_target_as_key is set (has been assigned a value) and false otherwise */
  public boolean isSetIdx_target_as_key() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDX_TARGET_AS_KEY_ISSET_ID);
  }

  public void setIdx_target_as_keyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDX_TARGET_AS_KEY_ISSET_ID, value);
  }

  public long getMin_val() {
    return this.min_val;
  }

  public TResultSetBufferDescriptor setMin_val(long min_val) {
    this.min_val = min_val;
    setMin_valIsSet(true);
    return this;
  }

  public void unsetMin_val() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_VAL_ISSET_ID);
  }

  /** Returns true if field min_val is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_val() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_VAL_ISSET_ID);
  }

  public void setMin_valIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_VAL_ISSET_ID, value);
  }

  public long getMax_val() {
    return this.max_val;
  }

  public TResultSetBufferDescriptor setMax_val(long max_val) {
    this.max_val = max_val;
    setMax_valIsSet(true);
    return this;
  }

  public void unsetMax_val() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_VAL_ISSET_ID);
  }

  /** Returns true if field max_val is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_val() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_VAL_ISSET_ID);
  }

  public void setMax_valIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_VAL_ISSET_ID, value);
  }

  public long getBucket() {
    return this.bucket;
  }

  public TResultSetBufferDescriptor setBucket(long bucket) {
    this.bucket = bucket;
    setBucketIsSet(true);
    return this;
  }

  public void unsetBucket() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUCKET_ISSET_ID);
  }

  /** Returns true if field bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUCKET_ISSET_ID);
  }

  public void setBucketIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUCKET_ISSET_ID, value);
  }

  public int getGroup_col_widthsSize() {
    return (this.group_col_widths == null) ? 0 : this.group_col_widths.size();
  }

  public java.util.Iterator<java.lang.Short> getGroup_col_widthsIterator() {
    return (this.group_col_widths == null) ? null : this.group_col_widths.iterator();
  }

  public void addToGroup_col_widths(short elem) {
    if (this.group_col_widths == null) {
      this.group_col_widths = new java.util.ArrayList<java.lang.Short>();
    }
    this.group_col_widths.add(elem);
  }

  public java.util.List<java.lang.Short> getGroup_col_widths() {
    return this.group_col_widths;
  }

  public TResultSetBufferDescriptor setGroup_col_widths(java.util.List<java.lang.Short> group_col_widths) {
    this.group_col_widths = group_col_widths;
    return this;
  }

  public void unsetGroup_col_widths() {
    this.group_col_widths = null;
  }

  /** Returns true if field group_col_widths is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_col_widths() {
    return this.group_col_widths != null;
  }

  public void setGroup_col_widthsIsSet(boolean value) {
    if (!value) {
      this.group_col_widths = null;
    }
  }

  public short getKey_bytewidth() {
    return this.key_bytewidth;
  }

  public TResultSetBufferDescriptor setKey_bytewidth(short key_bytewidth) {
    this.key_bytewidth = key_bytewidth;
    setKey_bytewidthIsSet(true);
    return this;
  }

  public void unsetKey_bytewidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_BYTEWIDTH_ISSET_ID);
  }

  /** Returns true if field key_bytewidth is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_bytewidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_BYTEWIDTH_ISSET_ID);
  }

  public void setKey_bytewidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_BYTEWIDTH_ISSET_ID, value);
  }

  public TColSlotContext getCol_slot_context() {
    return this.col_slot_context;
  }

  public TResultSetBufferDescriptor setCol_slot_context(TColSlotContext col_slot_context) {
    this.col_slot_context = col_slot_context;
    return this;
  }

  public void unsetCol_slot_context() {
    this.col_slot_context = null;
  }

  /** Returns true if field col_slot_context is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_slot_context() {
    return this.col_slot_context != null;
  }

  public void setCol_slot_contextIsSet(boolean value) {
    if (!value) {
      this.col_slot_context = null;
    }
  }

  public int getTarget_groupby_indicesSize() {
    return (this.target_groupby_indices == null) ? 0 : this.target_groupby_indices.size();
  }

  public java.util.Iterator<java.lang.Integer> getTarget_groupby_indicesIterator() {
    return (this.target_groupby_indices == null) ? null : this.target_groupby_indices.iterator();
  }

  public void addToTarget_groupby_indices(int elem) {
    if (this.target_groupby_indices == null) {
      this.target_groupby_indices = new java.util.ArrayList<java.lang.Integer>();
    }
    this.target_groupby_indices.add(elem);
  }

  public java.util.List<java.lang.Integer> getTarget_groupby_indices() {
    return this.target_groupby_indices;
  }

  public TResultSetBufferDescriptor setTarget_groupby_indices(java.util.List<java.lang.Integer> target_groupby_indices) {
    this.target_groupby_indices = target_groupby_indices;
    return this;
  }

  public void unsetTarget_groupby_indices() {
    this.target_groupby_indices = null;
  }

  /** Returns true if field target_groupby_indices is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_groupby_indices() {
    return this.target_groupby_indices != null;
  }

  public void setTarget_groupby_indicesIsSet(boolean value) {
    if (!value) {
      this.target_groupby_indices = null;
    }
  }

  public int getCount_distinct_descriptorsSize() {
    return (this.count_distinct_descriptors == null) ? 0 : this.count_distinct_descriptors.size();
  }

  public java.util.Iterator<TCountDistinctDescriptor> getCount_distinct_descriptorsIterator() {
    return (this.count_distinct_descriptors == null) ? null : this.count_distinct_descriptors.iterator();
  }

  public void addToCount_distinct_descriptors(TCountDistinctDescriptor elem) {
    if (this.count_distinct_descriptors == null) {
      this.count_distinct_descriptors = new java.util.ArrayList<TCountDistinctDescriptor>();
    }
    this.count_distinct_descriptors.add(elem);
  }

  public java.util.List<TCountDistinctDescriptor> getCount_distinct_descriptors() {
    return this.count_distinct_descriptors;
  }

  public TResultSetBufferDescriptor setCount_distinct_descriptors(java.util.List<TCountDistinctDescriptor> count_distinct_descriptors) {
    this.count_distinct_descriptors = count_distinct_descriptors;
    return this;
  }

  public void unsetCount_distinct_descriptors() {
    this.count_distinct_descriptors = null;
  }

  /** Returns true if field count_distinct_descriptors is set (has been assigned a value) and false otherwise */
  public boolean isSetCount_distinct_descriptors() {
    return this.count_distinct_descriptors != null;
  }

  public void setCount_distinct_descriptorsIsSet(boolean value) {
    if (!value) {
      this.count_distinct_descriptors = null;
    }
  }

  public boolean isForce_4byte_float() {
    return this.force_4byte_float;
  }

  public TResultSetBufferDescriptor setForce_4byte_float(boolean force_4byte_float) {
    this.force_4byte_float = force_4byte_float;
    setForce_4byte_floatIsSet(true);
    return this;
  }

  public void unsetForce_4byte_float() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORCE_4BYTE_FLOAT_ISSET_ID);
  }

  /** Returns true if field force_4byte_float is set (has been assigned a value) and false otherwise */
  public boolean isSetForce_4byte_float() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORCE_4BYTE_FLOAT_ISSET_ID);
  }

  public void setForce_4byte_floatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORCE_4BYTE_FLOAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LAYOUT:
      if (value == null) {
        unsetLayout();
      } else {
        setLayout((TResultSetLayout)value);
      }
      break;

    case KEYLESS:
      if (value == null) {
        unsetKeyless();
      } else {
        setKeyless((java.lang.Boolean)value);
      }
      break;

    case ENTRY_COUNT:
      if (value == null) {
        unsetEntry_count();
      } else {
        setEntry_count((java.lang.Integer)value);
      }
      break;

    case IDX_TARGET_AS_KEY:
      if (value == null) {
        unsetIdx_target_as_key();
      } else {
        setIdx_target_as_key((java.lang.Integer)value);
      }
      break;

    case MIN_VAL:
      if (value == null) {
        unsetMin_val();
      } else {
        setMin_val((java.lang.Long)value);
      }
      break;

    case MAX_VAL:
      if (value == null) {
        unsetMax_val();
      } else {
        setMax_val((java.lang.Long)value);
      }
      break;

    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((java.lang.Long)value);
      }
      break;

    case GROUP_COL_WIDTHS:
      if (value == null) {
        unsetGroup_col_widths();
      } else {
        setGroup_col_widths((java.util.List<java.lang.Short>)value);
      }
      break;

    case KEY_BYTEWIDTH:
      if (value == null) {
        unsetKey_bytewidth();
      } else {
        setKey_bytewidth((java.lang.Short)value);
      }
      break;

    case COL_SLOT_CONTEXT:
      if (value == null) {
        unsetCol_slot_context();
      } else {
        setCol_slot_context((TColSlotContext)value);
      }
      break;

    case TARGET_GROUPBY_INDICES:
      if (value == null) {
        unsetTarget_groupby_indices();
      } else {
        setTarget_groupby_indices((java.util.List<java.lang.Integer>)value);
      }
      break;

    case COUNT_DISTINCT_DESCRIPTORS:
      if (value == null) {
        unsetCount_distinct_descriptors();
      } else {
        setCount_distinct_descriptors((java.util.List<TCountDistinctDescriptor>)value);
      }
      break;

    case FORCE_4BYTE_FLOAT:
      if (value == null) {
        unsetForce_4byte_float();
      } else {
        setForce_4byte_float((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LAYOUT:
      return getLayout();

    case KEYLESS:
      return isKeyless();

    case ENTRY_COUNT:
      return getEntry_count();

    case IDX_TARGET_AS_KEY:
      return getIdx_target_as_key();

    case MIN_VAL:
      return getMin_val();

    case MAX_VAL:
      return getMax_val();

    case BUCKET:
      return getBucket();

    case GROUP_COL_WIDTHS:
      return getGroup_col_widths();

    case KEY_BYTEWIDTH:
      return getKey_bytewidth();

    case COL_SLOT_CONTEXT:
      return getCol_slot_context();

    case TARGET_GROUPBY_INDICES:
      return getTarget_groupby_indices();

    case COUNT_DISTINCT_DESCRIPTORS:
      return getCount_distinct_descriptors();

    case FORCE_4BYTE_FLOAT:
      return isForce_4byte_float();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LAYOUT:
      return isSetLayout();
    case KEYLESS:
      return isSetKeyless();
    case ENTRY_COUNT:
      return isSetEntry_count();
    case IDX_TARGET_AS_KEY:
      return isSetIdx_target_as_key();
    case MIN_VAL:
      return isSetMin_val();
    case MAX_VAL:
      return isSetMax_val();
    case BUCKET:
      return isSetBucket();
    case GROUP_COL_WIDTHS:
      return isSetGroup_col_widths();
    case KEY_BYTEWIDTH:
      return isSetKey_bytewidth();
    case COL_SLOT_CONTEXT:
      return isSetCol_slot_context();
    case TARGET_GROUPBY_INDICES:
      return isSetTarget_groupby_indices();
    case COUNT_DISTINCT_DESCRIPTORS:
      return isSetCount_distinct_descriptors();
    case FORCE_4BYTE_FLOAT:
      return isSetForce_4byte_float();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TResultSetBufferDescriptor)
      return this.equals((TResultSetBufferDescriptor)that);
    return false;
  }

  public boolean equals(TResultSetBufferDescriptor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_layout = true && this.isSetLayout();
    boolean that_present_layout = true && that.isSetLayout();
    if (this_present_layout || that_present_layout) {
      if (!(this_present_layout && that_present_layout))
        return false;
      if (!this.layout.equals(that.layout))
        return false;
    }

    boolean this_present_keyless = true;
    boolean that_present_keyless = true;
    if (this_present_keyless || that_present_keyless) {
      if (!(this_present_keyless && that_present_keyless))
        return false;
      if (this.keyless != that.keyless)
        return false;
    }

    boolean this_present_entry_count = true;
    boolean that_present_entry_count = true;
    if (this_present_entry_count || that_present_entry_count) {
      if (!(this_present_entry_count && that_present_entry_count))
        return false;
      if (this.entry_count != that.entry_count)
        return false;
    }

    boolean this_present_idx_target_as_key = true;
    boolean that_present_idx_target_as_key = true;
    if (this_present_idx_target_as_key || that_present_idx_target_as_key) {
      if (!(this_present_idx_target_as_key && that_present_idx_target_as_key))
        return false;
      if (this.idx_target_as_key != that.idx_target_as_key)
        return false;
    }

    boolean this_present_min_val = true;
    boolean that_present_min_val = true;
    if (this_present_min_val || that_present_min_val) {
      if (!(this_present_min_val && that_present_min_val))
        return false;
      if (this.min_val != that.min_val)
        return false;
    }

    boolean this_present_max_val = true;
    boolean that_present_max_val = true;
    if (this_present_max_val || that_present_max_val) {
      if (!(this_present_max_val && that_present_max_val))
        return false;
      if (this.max_val != that.max_val)
        return false;
    }

    boolean this_present_bucket = true;
    boolean that_present_bucket = true;
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (this.bucket != that.bucket)
        return false;
    }

    boolean this_present_group_col_widths = true && this.isSetGroup_col_widths();
    boolean that_present_group_col_widths = true && that.isSetGroup_col_widths();
    if (this_present_group_col_widths || that_present_group_col_widths) {
      if (!(this_present_group_col_widths && that_present_group_col_widths))
        return false;
      if (!this.group_col_widths.equals(that.group_col_widths))
        return false;
    }

    boolean this_present_key_bytewidth = true;
    boolean that_present_key_bytewidth = true;
    if (this_present_key_bytewidth || that_present_key_bytewidth) {
      if (!(this_present_key_bytewidth && that_present_key_bytewidth))
        return false;
      if (this.key_bytewidth != that.key_bytewidth)
        return false;
    }

    boolean this_present_col_slot_context = true && this.isSetCol_slot_context();
    boolean that_present_col_slot_context = true && that.isSetCol_slot_context();
    if (this_present_col_slot_context || that_present_col_slot_context) {
      if (!(this_present_col_slot_context && that_present_col_slot_context))
        return false;
      if (!this.col_slot_context.equals(that.col_slot_context))
        return false;
    }

    boolean this_present_target_groupby_indices = true && this.isSetTarget_groupby_indices();
    boolean that_present_target_groupby_indices = true && that.isSetTarget_groupby_indices();
    if (this_present_target_groupby_indices || that_present_target_groupby_indices) {
      if (!(this_present_target_groupby_indices && that_present_target_groupby_indices))
        return false;
      if (!this.target_groupby_indices.equals(that.target_groupby_indices))
        return false;
    }

    boolean this_present_count_distinct_descriptors = true && this.isSetCount_distinct_descriptors();
    boolean that_present_count_distinct_descriptors = true && that.isSetCount_distinct_descriptors();
    if (this_present_count_distinct_descriptors || that_present_count_distinct_descriptors) {
      if (!(this_present_count_distinct_descriptors && that_present_count_distinct_descriptors))
        return false;
      if (!this.count_distinct_descriptors.equals(that.count_distinct_descriptors))
        return false;
    }

    boolean this_present_force_4byte_float = true;
    boolean that_present_force_4byte_float = true;
    if (this_present_force_4byte_float || that_present_force_4byte_float) {
      if (!(this_present_force_4byte_float && that_present_force_4byte_float))
        return false;
      if (this.force_4byte_float != that.force_4byte_float)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLayout()) ? 131071 : 524287);
    if (isSetLayout())
      hashCode = hashCode * 8191 + layout.getValue();

    hashCode = hashCode * 8191 + ((keyless) ? 131071 : 524287);

    hashCode = hashCode * 8191 + entry_count;

    hashCode = hashCode * 8191 + idx_target_as_key;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_val);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_val);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bucket);

    hashCode = hashCode * 8191 + ((isSetGroup_col_widths()) ? 131071 : 524287);
    if (isSetGroup_col_widths())
      hashCode = hashCode * 8191 + group_col_widths.hashCode();

    hashCode = hashCode * 8191 + key_bytewidth;

    hashCode = hashCode * 8191 + ((isSetCol_slot_context()) ? 131071 : 524287);
    if (isSetCol_slot_context())
      hashCode = hashCode * 8191 + col_slot_context.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget_groupby_indices()) ? 131071 : 524287);
    if (isSetTarget_groupby_indices())
      hashCode = hashCode * 8191 + target_groupby_indices.hashCode();

    hashCode = hashCode * 8191 + ((isSetCount_distinct_descriptors()) ? 131071 : 524287);
    if (isSetCount_distinct_descriptors())
      hashCode = hashCode * 8191 + count_distinct_descriptors.hashCode();

    hashCode = hashCode * 8191 + ((force_4byte_float) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TResultSetBufferDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLayout()).compareTo(other.isSetLayout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layout, other.layout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyless()).compareTo(other.isSetKeyless());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyless()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyless, other.keyless);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntry_count()).compareTo(other.isSetEntry_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_count, other.entry_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdx_target_as_key()).compareTo(other.isSetIdx_target_as_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdx_target_as_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idx_target_as_key, other.idx_target_as_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_val()).compareTo(other.isSetMin_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_val, other.min_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_val()).compareTo(other.isSetMax_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_val, other.max_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBucket()).compareTo(other.isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroup_col_widths()).compareTo(other.isSetGroup_col_widths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_col_widths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_col_widths, other.group_col_widths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey_bytewidth()).compareTo(other.isSetKey_bytewidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_bytewidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_bytewidth, other.key_bytewidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCol_slot_context()).compareTo(other.isSetCol_slot_context());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_slot_context()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_slot_context, other.col_slot_context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget_groupby_indices()).compareTo(other.isSetTarget_groupby_indices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_groupby_indices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_groupby_indices, other.target_groupby_indices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount_distinct_descriptors()).compareTo(other.isSetCount_distinct_descriptors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount_distinct_descriptors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count_distinct_descriptors, other.count_distinct_descriptors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetForce_4byte_float()).compareTo(other.isSetForce_4byte_float());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForce_4byte_float()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force_4byte_float, other.force_4byte_float);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TResultSetBufferDescriptor(");
    boolean first = true;

    sb.append("layout:");
    if (this.layout == null) {
      sb.append("null");
    } else {
      sb.append(this.layout);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyless:");
    sb.append(this.keyless);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entry_count:");
    sb.append(this.entry_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idx_target_as_key:");
    sb.append(this.idx_target_as_key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_val:");
    sb.append(this.min_val);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_val:");
    sb.append(this.max_val);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucket:");
    sb.append(this.bucket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("group_col_widths:");
    if (this.group_col_widths == null) {
      sb.append("null");
    } else {
      sb.append(this.group_col_widths);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_bytewidth:");
    sb.append(this.key_bytewidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("col_slot_context:");
    if (this.col_slot_context == null) {
      sb.append("null");
    } else {
      sb.append(this.col_slot_context);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_groupby_indices:");
    if (this.target_groupby_indices == null) {
      sb.append("null");
    } else {
      sb.append(this.target_groupby_indices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count_distinct_descriptors:");
    if (this.count_distinct_descriptors == null) {
      sb.append("null");
    } else {
      sb.append(this.count_distinct_descriptors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("force_4byte_float:");
    sb.append(this.force_4byte_float);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (col_slot_context != null) {
      col_slot_context.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultSetBufferDescriptorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TResultSetBufferDescriptorStandardScheme getScheme() {
      return new TResultSetBufferDescriptorStandardScheme();
    }
  }

  private static class TResultSetBufferDescriptorStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResultSetBufferDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultSetBufferDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAYOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.layout = com.mapd.thrift.server.TResultSetLayout.findByValue(iprot.readI32());
              struct.setLayoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEYLESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.keyless = iprot.readBool();
              struct.setKeylessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entry_count = iprot.readI32();
              struct.setEntry_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDX_TARGET_AS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idx_target_as_key = iprot.readI32();
              struct.setIdx_target_as_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_val = iprot.readI64();
              struct.setMin_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_val = iprot.readI64();
              struct.setMax_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bucket = iprot.readI64();
              struct.setBucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GROUP_COL_WIDTHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.group_col_widths = new java.util.ArrayList<java.lang.Short>(_list24.size);
                short _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI16();
                  struct.group_col_widths.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setGroup_col_widthsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEY_BYTEWIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.key_bytewidth = iprot.readI16();
              struct.setKey_bytewidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COL_SLOT_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.col_slot_context = new TColSlotContext();
              struct.col_slot_context.read(iprot);
              struct.setCol_slot_contextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TARGET_GROUPBY_INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.target_groupby_indices = new java.util.ArrayList<java.lang.Integer>(_list27.size);
                int _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readI32();
                  struct.target_groupby_indices.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setTarget_groupby_indicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COUNT_DISTINCT_DESCRIPTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.count_distinct_descriptors = new java.util.ArrayList<TCountDistinctDescriptor>(_list30.size);
                TCountDistinctDescriptor _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = new TCountDistinctDescriptor();
                  _elem31.read(iprot);
                  struct.count_distinct_descriptors.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setCount_distinct_descriptorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FORCE_4BYTE_FLOAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.force_4byte_float = iprot.readBool();
              struct.setForce_4byte_floatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultSetBufferDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.layout != null) {
        oprot.writeFieldBegin(LAYOUT_FIELD_DESC);
        oprot.writeI32(struct.layout.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEYLESS_FIELD_DESC);
      oprot.writeBool(struct.keyless);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.entry_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IDX_TARGET_AS_KEY_FIELD_DESC);
      oprot.writeI32(struct.idx_target_as_key);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_VAL_FIELD_DESC);
      oprot.writeI64(struct.min_val);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_VAL_FIELD_DESC);
      oprot.writeI64(struct.max_val);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUCKET_FIELD_DESC);
      oprot.writeI64(struct.bucket);
      oprot.writeFieldEnd();
      if (struct.group_col_widths != null) {
        oprot.writeFieldBegin(GROUP_COL_WIDTHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.group_col_widths.size()));
          for (short _iter33 : struct.group_col_widths)
          {
            oprot.writeI16(_iter33);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_BYTEWIDTH_FIELD_DESC);
      oprot.writeI16(struct.key_bytewidth);
      oprot.writeFieldEnd();
      if (struct.col_slot_context != null) {
        oprot.writeFieldBegin(COL_SLOT_CONTEXT_FIELD_DESC);
        struct.col_slot_context.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.target_groupby_indices != null) {
        oprot.writeFieldBegin(TARGET_GROUPBY_INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.target_groupby_indices.size()));
          for (int _iter34 : struct.target_groupby_indices)
          {
            oprot.writeI32(_iter34);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.count_distinct_descriptors != null) {
        oprot.writeFieldBegin(COUNT_DISTINCT_DESCRIPTORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.count_distinct_descriptors.size()));
          for (TCountDistinctDescriptor _iter35 : struct.count_distinct_descriptors)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORCE_4BYTE_FLOAT_FIELD_DESC);
      oprot.writeBool(struct.force_4byte_float);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultSetBufferDescriptorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TResultSetBufferDescriptorTupleScheme getScheme() {
      return new TResultSetBufferDescriptorTupleScheme();
    }
  }

  private static class TResultSetBufferDescriptorTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResultSetBufferDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultSetBufferDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLayout()) {
        optionals.set(0);
      }
      if (struct.isSetKeyless()) {
        optionals.set(1);
      }
      if (struct.isSetEntry_count()) {
        optionals.set(2);
      }
      if (struct.isSetIdx_target_as_key()) {
        optionals.set(3);
      }
      if (struct.isSetMin_val()) {
        optionals.set(4);
      }
      if (struct.isSetMax_val()) {
        optionals.set(5);
      }
      if (struct.isSetBucket()) {
        optionals.set(6);
      }
      if (struct.isSetGroup_col_widths()) {
        optionals.set(7);
      }
      if (struct.isSetKey_bytewidth()) {
        optionals.set(8);
      }
      if (struct.isSetCol_slot_context()) {
        optionals.set(9);
      }
      if (struct.isSetTarget_groupby_indices()) {
        optionals.set(10);
      }
      if (struct.isSetCount_distinct_descriptors()) {
        optionals.set(11);
      }
      if (struct.isSetForce_4byte_float()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetLayout()) {
        oprot.writeI32(struct.layout.getValue());
      }
      if (struct.isSetKeyless()) {
        oprot.writeBool(struct.keyless);
      }
      if (struct.isSetEntry_count()) {
        oprot.writeI32(struct.entry_count);
      }
      if (struct.isSetIdx_target_as_key()) {
        oprot.writeI32(struct.idx_target_as_key);
      }
      if (struct.isSetMin_val()) {
        oprot.writeI64(struct.min_val);
      }
      if (struct.isSetMax_val()) {
        oprot.writeI64(struct.max_val);
      }
      if (struct.isSetBucket()) {
        oprot.writeI64(struct.bucket);
      }
      if (struct.isSetGroup_col_widths()) {
        {
          oprot.writeI32(struct.group_col_widths.size());
          for (short _iter36 : struct.group_col_widths)
          {
            oprot.writeI16(_iter36);
          }
        }
      }
      if (struct.isSetKey_bytewidth()) {
        oprot.writeI16(struct.key_bytewidth);
      }
      if (struct.isSetCol_slot_context()) {
        struct.col_slot_context.write(oprot);
      }
      if (struct.isSetTarget_groupby_indices()) {
        {
          oprot.writeI32(struct.target_groupby_indices.size());
          for (int _iter37 : struct.target_groupby_indices)
          {
            oprot.writeI32(_iter37);
          }
        }
      }
      if (struct.isSetCount_distinct_descriptors()) {
        {
          oprot.writeI32(struct.count_distinct_descriptors.size());
          for (TCountDistinctDescriptor _iter38 : struct.count_distinct_descriptors)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetForce_4byte_float()) {
        oprot.writeBool(struct.force_4byte_float);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultSetBufferDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.layout = com.mapd.thrift.server.TResultSetLayout.findByValue(iprot.readI32());
        struct.setLayoutIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keyless = iprot.readBool();
        struct.setKeylessIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entry_count = iprot.readI32();
        struct.setEntry_countIsSet(true);
      }
      if (incoming.get(3)) {
        struct.idx_target_as_key = iprot.readI32();
        struct.setIdx_target_as_keyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.min_val = iprot.readI64();
        struct.setMin_valIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_val = iprot.readI64();
        struct.setMax_valIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bucket = iprot.readI64();
        struct.setBucketIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.group_col_widths = new java.util.ArrayList<java.lang.Short>(_list39.size);
          short _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readI16();
            struct.group_col_widths.add(_elem40);
          }
        }
        struct.setGroup_col_widthsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.key_bytewidth = iprot.readI16();
        struct.setKey_bytewidthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.col_slot_context = new TColSlotContext();
        struct.col_slot_context.read(iprot);
        struct.setCol_slot_contextIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.target_groupby_indices = new java.util.ArrayList<java.lang.Integer>(_list42.size);
          int _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readI32();
            struct.target_groupby_indices.add(_elem43);
          }
        }
        struct.setTarget_groupby_indicesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.count_distinct_descriptors = new java.util.ArrayList<TCountDistinctDescriptor>(_list45.size);
          TCountDistinctDescriptor _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TCountDistinctDescriptor();
            _elem46.read(iprot);
            struct.count_distinct_descriptors.add(_elem46);
          }
        }
        struct.setCount_distinct_descriptorsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.force_4byte_float = iprot.readBool();
        struct.setForce_4byte_floatIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

