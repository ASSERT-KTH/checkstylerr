/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TTableMeta implements org.apache.thrift.TBase<TTableMeta, TTableMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TTableMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableMeta");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_cols", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COL_DATUM_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("col_datum_types", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("is_view", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_REPLICATED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_replicated", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField SHARD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shard_count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_rows", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("max_table_id", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableMetaTupleSchemeFactory();

  public java.lang.String table_name; // required
  public long num_cols; // required
  public java.util.List<com.mapd.thrift.server.TDatumType> col_datum_types; // required
  public boolean is_view; // required
  public boolean is_replicated; // required
  public long shard_count; // required
  public long max_rows; // required
  public long table_id; // required
  public long max_table_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    NUM_COLS((short)2, "num_cols"),
    COL_DATUM_TYPES((short)3, "col_datum_types"),
    IS_VIEW((short)4, "is_view"),
    IS_REPLICATED((short)5, "is_replicated"),
    SHARD_COUNT((short)6, "shard_count"),
    MAX_ROWS((short)7, "max_rows"),
    TABLE_ID((short)8, "table_id"),
    MAX_TABLE_ID((short)9, "max_table_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // NUM_COLS
          return NUM_COLS;
        case 3: // COL_DATUM_TYPES
          return COL_DATUM_TYPES;
        case 4: // IS_VIEW
          return IS_VIEW;
        case 5: // IS_REPLICATED
          return IS_REPLICATED;
        case 6: // SHARD_COUNT
          return SHARD_COUNT;
        case 7: // MAX_ROWS
          return MAX_ROWS;
        case 8: // TABLE_ID
          return TABLE_ID;
        case 9: // MAX_TABLE_ID
          return MAX_TABLE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_COLS_ISSET_ID = 0;
  private static final int __IS_VIEW_ISSET_ID = 1;
  private static final int __IS_REPLICATED_ISSET_ID = 2;
  private static final int __SHARD_COUNT_ISSET_ID = 3;
  private static final int __MAX_ROWS_ISSET_ID = 4;
  private static final int __TABLE_ID_ISSET_ID = 5;
  private static final int __MAX_TABLE_ID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_COLS, new org.apache.thrift.meta_data.FieldMetaData("num_cols", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COL_DATUM_TYPES, new org.apache.thrift.meta_data.FieldMetaData("col_datum_types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.mapd.thrift.server.TDatumType.class))));
    tmpMap.put(_Fields.IS_VIEW, new org.apache.thrift.meta_data.FieldMetaData("is_view", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_REPLICATED, new org.apache.thrift.meta_data.FieldMetaData("is_replicated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHARD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("shard_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_ROWS, new org.apache.thrift.meta_data.FieldMetaData("max_rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("max_table_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableMeta.class, metaDataMap);
  }

  public TTableMeta() {
  }

  public TTableMeta(
    java.lang.String table_name,
    long num_cols,
    java.util.List<com.mapd.thrift.server.TDatumType> col_datum_types,
    boolean is_view,
    boolean is_replicated,
    long shard_count,
    long max_rows,
    long table_id,
    long max_table_id)
  {
    this();
    this.table_name = table_name;
    this.num_cols = num_cols;
    setNum_colsIsSet(true);
    this.col_datum_types = col_datum_types;
    this.is_view = is_view;
    setIs_viewIsSet(true);
    this.is_replicated = is_replicated;
    setIs_replicatedIsSet(true);
    this.shard_count = shard_count;
    setShard_countIsSet(true);
    this.max_rows = max_rows;
    setMax_rowsIsSet(true);
    this.table_id = table_id;
    setTable_idIsSet(true);
    this.max_table_id = max_table_id;
    setMax_table_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableMeta(TTableMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    this.num_cols = other.num_cols;
    if (other.isSetCol_datum_types()) {
      java.util.List<com.mapd.thrift.server.TDatumType> __this__col_datum_types = new java.util.ArrayList<com.mapd.thrift.server.TDatumType>(other.col_datum_types.size());
      for (com.mapd.thrift.server.TDatumType other_element : other.col_datum_types) {
        __this__col_datum_types.add(other_element);
      }
      this.col_datum_types = __this__col_datum_types;
    }
    this.is_view = other.is_view;
    this.is_replicated = other.is_replicated;
    this.shard_count = other.shard_count;
    this.max_rows = other.max_rows;
    this.table_id = other.table_id;
    this.max_table_id = other.max_table_id;
  }

  public TTableMeta deepCopy() {
    return new TTableMeta(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    setNum_colsIsSet(false);
    this.num_cols = 0;
    this.col_datum_types = null;
    setIs_viewIsSet(false);
    this.is_view = false;
    setIs_replicatedIsSet(false);
    this.is_replicated = false;
    setShard_countIsSet(false);
    this.shard_count = 0;
    setMax_rowsIsSet(false);
    this.max_rows = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setMax_table_idIsSet(false);
    this.max_table_id = 0;
  }

  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TTableMeta setTable_name(java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public long getNum_cols() {
    return this.num_cols;
  }

  public TTableMeta setNum_cols(long num_cols) {
    this.num_cols = num_cols;
    setNum_colsIsSet(true);
    return this;
  }

  public void unsetNum_cols() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_COLS_ISSET_ID);
  }

  /** Returns true if field num_cols is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_cols() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_COLS_ISSET_ID);
  }

  public void setNum_colsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_COLS_ISSET_ID, value);
  }

  public int getCol_datum_typesSize() {
    return (this.col_datum_types == null) ? 0 : this.col_datum_types.size();
  }

  public java.util.Iterator<com.mapd.thrift.server.TDatumType> getCol_datum_typesIterator() {
    return (this.col_datum_types == null) ? null : this.col_datum_types.iterator();
  }

  public void addToCol_datum_types(com.mapd.thrift.server.TDatumType elem) {
    if (this.col_datum_types == null) {
      this.col_datum_types = new java.util.ArrayList<com.mapd.thrift.server.TDatumType>();
    }
    this.col_datum_types.add(elem);
  }

  public java.util.List<com.mapd.thrift.server.TDatumType> getCol_datum_types() {
    return this.col_datum_types;
  }

  public TTableMeta setCol_datum_types(java.util.List<com.mapd.thrift.server.TDatumType> col_datum_types) {
    this.col_datum_types = col_datum_types;
    return this;
  }

  public void unsetCol_datum_types() {
    this.col_datum_types = null;
  }

  /** Returns true if field col_datum_types is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_datum_types() {
    return this.col_datum_types != null;
  }

  public void setCol_datum_typesIsSet(boolean value) {
    if (!value) {
      this.col_datum_types = null;
    }
  }

  public boolean isIs_view() {
    return this.is_view;
  }

  public TTableMeta setIs_view(boolean is_view) {
    this.is_view = is_view;
    setIs_viewIsSet(true);
    return this;
  }

  public void unsetIs_view() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_VIEW_ISSET_ID);
  }

  /** Returns true if field is_view is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_view() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_VIEW_ISSET_ID);
  }

  public void setIs_viewIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_VIEW_ISSET_ID, value);
  }

  public boolean isIs_replicated() {
    return this.is_replicated;
  }

  public TTableMeta setIs_replicated(boolean is_replicated) {
    this.is_replicated = is_replicated;
    setIs_replicatedIsSet(true);
    return this;
  }

  public void unsetIs_replicated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_REPLICATED_ISSET_ID);
  }

  /** Returns true if field is_replicated is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_replicated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_REPLICATED_ISSET_ID);
  }

  public void setIs_replicatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_REPLICATED_ISSET_ID, value);
  }

  public long getShard_count() {
    return this.shard_count;
  }

  public TTableMeta setShard_count(long shard_count) {
    this.shard_count = shard_count;
    setShard_countIsSet(true);
    return this;
  }

  public void unsetShard_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARD_COUNT_ISSET_ID);
  }

  /** Returns true if field shard_count is set (has been assigned a value) and false otherwise */
  public boolean isSetShard_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARD_COUNT_ISSET_ID);
  }

  public void setShard_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARD_COUNT_ISSET_ID, value);
  }

  public long getMax_rows() {
    return this.max_rows;
  }

  public TTableMeta setMax_rows(long max_rows) {
    this.max_rows = max_rows;
    setMax_rowsIsSet(true);
    return this;
  }

  public void unsetMax_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ROWS_ISSET_ID);
  }

  /** Returns true if field max_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ROWS_ISSET_ID);
  }

  public void setMax_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ROWS_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TTableMeta setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getMax_table_id() {
    return this.max_table_id;
  }

  public TTableMeta setMax_table_id(long max_table_id) {
    this.max_table_id = max_table_id;
    setMax_table_idIsSet(true);
    return this;
  }

  public void unsetMax_table_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_TABLE_ID_ISSET_ID);
  }

  /** Returns true if field max_table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_table_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_TABLE_ID_ISSET_ID);
  }

  public void setMax_table_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_TABLE_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case NUM_COLS:
      if (value == null) {
        unsetNum_cols();
      } else {
        setNum_cols((java.lang.Long)value);
      }
      break;

    case COL_DATUM_TYPES:
      if (value == null) {
        unsetCol_datum_types();
      } else {
        setCol_datum_types((java.util.List<com.mapd.thrift.server.TDatumType>)value);
      }
      break;

    case IS_VIEW:
      if (value == null) {
        unsetIs_view();
      } else {
        setIs_view((java.lang.Boolean)value);
      }
      break;

    case IS_REPLICATED:
      if (value == null) {
        unsetIs_replicated();
      } else {
        setIs_replicated((java.lang.Boolean)value);
      }
      break;

    case SHARD_COUNT:
      if (value == null) {
        unsetShard_count();
      } else {
        setShard_count((java.lang.Long)value);
      }
      break;

    case MAX_ROWS:
      if (value == null) {
        unsetMax_rows();
      } else {
        setMax_rows((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case MAX_TABLE_ID:
      if (value == null) {
        unsetMax_table_id();
      } else {
        setMax_table_id((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case NUM_COLS:
      return getNum_cols();

    case COL_DATUM_TYPES:
      return getCol_datum_types();

    case IS_VIEW:
      return isIs_view();

    case IS_REPLICATED:
      return isIs_replicated();

    case SHARD_COUNT:
      return getShard_count();

    case MAX_ROWS:
      return getMax_rows();

    case TABLE_ID:
      return getTable_id();

    case MAX_TABLE_ID:
      return getMax_table_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case NUM_COLS:
      return isSetNum_cols();
    case COL_DATUM_TYPES:
      return isSetCol_datum_types();
    case IS_VIEW:
      return isSetIs_view();
    case IS_REPLICATED:
      return isSetIs_replicated();
    case SHARD_COUNT:
      return isSetShard_count();
    case MAX_ROWS:
      return isSetMax_rows();
    case TABLE_ID:
      return isSetTable_id();
    case MAX_TABLE_ID:
      return isSetMax_table_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableMeta)
      return this.equals((TTableMeta)that);
    return false;
  }

  public boolean equals(TTableMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_num_cols = true;
    boolean that_present_num_cols = true;
    if (this_present_num_cols || that_present_num_cols) {
      if (!(this_present_num_cols && that_present_num_cols))
        return false;
      if (this.num_cols != that.num_cols)
        return false;
    }

    boolean this_present_col_datum_types = true && this.isSetCol_datum_types();
    boolean that_present_col_datum_types = true && that.isSetCol_datum_types();
    if (this_present_col_datum_types || that_present_col_datum_types) {
      if (!(this_present_col_datum_types && that_present_col_datum_types))
        return false;
      if (!this.col_datum_types.equals(that.col_datum_types))
        return false;
    }

    boolean this_present_is_view = true;
    boolean that_present_is_view = true;
    if (this_present_is_view || that_present_is_view) {
      if (!(this_present_is_view && that_present_is_view))
        return false;
      if (this.is_view != that.is_view)
        return false;
    }

    boolean this_present_is_replicated = true;
    boolean that_present_is_replicated = true;
    if (this_present_is_replicated || that_present_is_replicated) {
      if (!(this_present_is_replicated && that_present_is_replicated))
        return false;
      if (this.is_replicated != that.is_replicated)
        return false;
    }

    boolean this_present_shard_count = true;
    boolean that_present_shard_count = true;
    if (this_present_shard_count || that_present_shard_count) {
      if (!(this_present_shard_count && that_present_shard_count))
        return false;
      if (this.shard_count != that.shard_count)
        return false;
    }

    boolean this_present_max_rows = true;
    boolean that_present_max_rows = true;
    if (this_present_max_rows || that_present_max_rows) {
      if (!(this_present_max_rows && that_present_max_rows))
        return false;
      if (this.max_rows != that.max_rows)
        return false;
    }

    boolean this_present_table_id = true;
    boolean that_present_table_id = true;
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_max_table_id = true;
    boolean that_present_max_table_id = true;
    if (this_present_max_table_id || that_present_max_table_id) {
      if (!(this_present_max_table_id && that_present_max_table_id))
        return false;
      if (this.max_table_id != that.max_table_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_cols);

    hashCode = hashCode * 8191 + ((isSetCol_datum_types()) ? 131071 : 524287);
    if (isSetCol_datum_types())
      hashCode = hashCode * 8191 + col_datum_types.hashCode();

    hashCode = hashCode * 8191 + ((is_view) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_replicated) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shard_count);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_rows);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_table_id);

    return hashCode;
  }

  @Override
  public int compareTo(TTableMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_cols()).compareTo(other.isSetNum_cols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_cols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_cols, other.num_cols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCol_datum_types()).compareTo(other.isSetCol_datum_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_datum_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_datum_types, other.col_datum_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_view()).compareTo(other.isSetIs_view());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_view()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_view, other.is_view);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_replicated()).compareTo(other.isSetIs_replicated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_replicated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_replicated, other.is_replicated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShard_count()).compareTo(other.isSetShard_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShard_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard_count, other.shard_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_rows()).compareTo(other.isSetMax_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_rows, other.max_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTable_id()).compareTo(other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_table_id()).compareTo(other.isSetMax_table_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_table_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_table_id, other.max_table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableMeta(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_cols:");
    sb.append(this.num_cols);
    first = false;
    if (!first) sb.append(", ");
    sb.append("col_datum_types:");
    if (this.col_datum_types == null) {
      sb.append("null");
    } else {
      sb.append(this.col_datum_types);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_view:");
    sb.append(this.is_view);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_replicated:");
    sb.append(this.is_replicated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shard_count:");
    sb.append(this.shard_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_rows:");
    sb.append(this.max_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_id:");
    sb.append(this.table_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_table_id:");
    sb.append(this.max_table_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableMetaStandardScheme getScheme() {
      return new TTableMetaStandardScheme();
    }
  }

  private static class TTableMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_cols = iprot.readI64();
              struct.setNum_colsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COL_DATUM_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.col_datum_types = new java.util.ArrayList<com.mapd.thrift.server.TDatumType>(_list144.size);
                com.mapd.thrift.server.TDatumType _elem145;
                for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                {
                  _elem145 = com.mapd.thrift.server.TDatumType.findByValue(iprot.readI32());
                  if (_elem145 != null)
                  {
                    struct.col_datum_types.add(_elem145);
                  }
                }
                iprot.readListEnd();
              }
              struct.setCol_datum_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_VIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_view = iprot.readBool();
              struct.setIs_viewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_REPLICATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_replicated = iprot.readBool();
              struct.setIs_replicatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHARD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shard_count = iprot.readI64();
              struct.setShard_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_rows = iprot.readI64();
              struct.setMax_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_table_id = iprot.readI64();
              struct.setMax_table_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_COLS_FIELD_DESC);
      oprot.writeI64(struct.num_cols);
      oprot.writeFieldEnd();
      if (struct.col_datum_types != null) {
        oprot.writeFieldBegin(COL_DATUM_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.col_datum_types.size()));
          for (com.mapd.thrift.server.TDatumType _iter147 : struct.col_datum_types)
          {
            oprot.writeI32(_iter147.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_VIEW_FIELD_DESC);
      oprot.writeBool(struct.is_view);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REPLICATED_FIELD_DESC);
      oprot.writeBool(struct.is_replicated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARD_COUNT_FIELD_DESC);
      oprot.writeI64(struct.shard_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ROWS_FIELD_DESC);
      oprot.writeI64(struct.max_rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI64(struct.table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_TABLE_ID_FIELD_DESC);
      oprot.writeI64(struct.max_table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableMetaTupleScheme getScheme() {
      return new TTableMetaTupleScheme();
    }
  }

  private static class TTableMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_name()) {
        optionals.set(0);
      }
      if (struct.isSetNum_cols()) {
        optionals.set(1);
      }
      if (struct.isSetCol_datum_types()) {
        optionals.set(2);
      }
      if (struct.isSetIs_view()) {
        optionals.set(3);
      }
      if (struct.isSetIs_replicated()) {
        optionals.set(4);
      }
      if (struct.isSetShard_count()) {
        optionals.set(5);
      }
      if (struct.isSetMax_rows()) {
        optionals.set(6);
      }
      if (struct.isSetTable_id()) {
        optionals.set(7);
      }
      if (struct.isSetMax_table_id()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetNum_cols()) {
        oprot.writeI64(struct.num_cols);
      }
      if (struct.isSetCol_datum_types()) {
        {
          oprot.writeI32(struct.col_datum_types.size());
          for (com.mapd.thrift.server.TDatumType _iter148 : struct.col_datum_types)
          {
            oprot.writeI32(_iter148.getValue());
          }
        }
      }
      if (struct.isSetIs_view()) {
        oprot.writeBool(struct.is_view);
      }
      if (struct.isSetIs_replicated()) {
        oprot.writeBool(struct.is_replicated);
      }
      if (struct.isSetShard_count()) {
        oprot.writeI64(struct.shard_count);
      }
      if (struct.isSetMax_rows()) {
        oprot.writeI64(struct.max_rows);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetMax_table_id()) {
        oprot.writeI64(struct.max_table_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num_cols = iprot.readI64();
        struct.setNum_colsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.col_datum_types = new java.util.ArrayList<com.mapd.thrift.server.TDatumType>(_list149.size);
          com.mapd.thrift.server.TDatumType _elem150;
          for (int _i151 = 0; _i151 < _list149.size; ++_i151)
          {
            _elem150 = com.mapd.thrift.server.TDatumType.findByValue(iprot.readI32());
            if (_elem150 != null)
            {
              struct.col_datum_types.add(_elem150);
            }
          }
        }
        struct.setCol_datum_typesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_view = iprot.readBool();
        struct.setIs_viewIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_replicated = iprot.readBool();
        struct.setIs_replicatedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shard_count = iprot.readI64();
        struct.setShard_countIsSet(true);
      }
      if (incoming.get(6)) {
        struct.max_rows = iprot.readI64();
        struct.setMax_rowsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.max_table_id = iprot.readI64();
        struct.setMax_table_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

