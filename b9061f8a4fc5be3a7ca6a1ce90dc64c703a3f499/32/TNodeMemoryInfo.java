/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TNodeMemoryInfo implements org.apache.thrift.TBase<TNodeMemoryInfo, TNodeMemoryInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TNodeMemoryInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNodeMemoryInfo");

  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("host_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_NUM_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_num_pages", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_PAGES_ALLOCATED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_pages_allocated", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ALLOCATION_CAPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_allocation_capped", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_MEMORY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("node_memory_data", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNodeMemoryInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNodeMemoryInfoTupleSchemeFactory();

  public java.lang.String host_name; // required
  public long page_size; // required
  public long max_num_pages; // required
  public long num_pages_allocated; // required
  public boolean is_allocation_capped; // required
  public java.util.List<TMemoryData> node_memory_data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAME((short)1, "host_name"),
    PAGE_SIZE((short)2, "page_size"),
    MAX_NUM_PAGES((short)3, "max_num_pages"),
    NUM_PAGES_ALLOCATED((short)4, "num_pages_allocated"),
    IS_ALLOCATION_CAPPED((short)5, "is_allocation_capped"),
    NODE_MEMORY_DATA((short)6, "node_memory_data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAME
          return HOST_NAME;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // MAX_NUM_PAGES
          return MAX_NUM_PAGES;
        case 4: // NUM_PAGES_ALLOCATED
          return NUM_PAGES_ALLOCATED;
        case 5: // IS_ALLOCATION_CAPPED
          return IS_ALLOCATION_CAPPED;
        case 6: // NODE_MEMORY_DATA
          return NODE_MEMORY_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_SIZE_ISSET_ID = 0;
  private static final int __MAX_NUM_PAGES_ISSET_ID = 1;
  private static final int __NUM_PAGES_ALLOCATED_ISSET_ID = 2;
  private static final int __IS_ALLOCATION_CAPPED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("host_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_NUM_PAGES, new org.apache.thrift.meta_data.FieldMetaData("max_num_pages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_PAGES_ALLOCATED, new org.apache.thrift.meta_data.FieldMetaData("num_pages_allocated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_ALLOCATION_CAPPED, new org.apache.thrift.meta_data.FieldMetaData("is_allocation_capped", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NODE_MEMORY_DATA, new org.apache.thrift.meta_data.FieldMetaData("node_memory_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMemoryData.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNodeMemoryInfo.class, metaDataMap);
  }

  public TNodeMemoryInfo() {
  }

  public TNodeMemoryInfo(
    java.lang.String host_name,
    long page_size,
    long max_num_pages,
    long num_pages_allocated,
    boolean is_allocation_capped,
    java.util.List<TMemoryData> node_memory_data)
  {
    this();
    this.host_name = host_name;
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    this.max_num_pages = max_num_pages;
    setMax_num_pagesIsSet(true);
    this.num_pages_allocated = num_pages_allocated;
    setNum_pages_allocatedIsSet(true);
    this.is_allocation_capped = is_allocation_capped;
    setIs_allocation_cappedIsSet(true);
    this.node_memory_data = node_memory_data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNodeMemoryInfo(TNodeMemoryInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHost_name()) {
      this.host_name = other.host_name;
    }
    this.page_size = other.page_size;
    this.max_num_pages = other.max_num_pages;
    this.num_pages_allocated = other.num_pages_allocated;
    this.is_allocation_capped = other.is_allocation_capped;
    if (other.isSetNode_memory_data()) {
      java.util.List<TMemoryData> __this__node_memory_data = new java.util.ArrayList<TMemoryData>(other.node_memory_data.size());
      for (TMemoryData other_element : other.node_memory_data) {
        __this__node_memory_data.add(new TMemoryData(other_element));
      }
      this.node_memory_data = __this__node_memory_data;
    }
  }

  public TNodeMemoryInfo deepCopy() {
    return new TNodeMemoryInfo(this);
  }

  @Override
  public void clear() {
    this.host_name = null;
    setPage_sizeIsSet(false);
    this.page_size = 0;
    setMax_num_pagesIsSet(false);
    this.max_num_pages = 0;
    setNum_pages_allocatedIsSet(false);
    this.num_pages_allocated = 0;
    setIs_allocation_cappedIsSet(false);
    this.is_allocation_capped = false;
    this.node_memory_data = null;
  }

  public java.lang.String getHost_name() {
    return this.host_name;
  }

  public TNodeMemoryInfo setHost_name(java.lang.String host_name) {
    this.host_name = host_name;
    return this;
  }

  public void unsetHost_name() {
    this.host_name = null;
  }

  /** Returns true if field host_name is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_name() {
    return this.host_name != null;
  }

  public void setHost_nameIsSet(boolean value) {
    if (!value) {
      this.host_name = null;
    }
  }

  public long getPage_size() {
    return this.page_size;
  }

  public TNodeMemoryInfo setPage_size(long page_size) {
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    return this;
  }

  public void unsetPage_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
  }

  /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
  }

  public void setPage_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
  }

  public long getMax_num_pages() {
    return this.max_num_pages;
  }

  public TNodeMemoryInfo setMax_num_pages(long max_num_pages) {
    this.max_num_pages = max_num_pages;
    setMax_num_pagesIsSet(true);
    return this;
  }

  public void unsetMax_num_pages() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_NUM_PAGES_ISSET_ID);
  }

  /** Returns true if field max_num_pages is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_num_pages() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_NUM_PAGES_ISSET_ID);
  }

  public void setMax_num_pagesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_NUM_PAGES_ISSET_ID, value);
  }

  public long getNum_pages_allocated() {
    return this.num_pages_allocated;
  }

  public TNodeMemoryInfo setNum_pages_allocated(long num_pages_allocated) {
    this.num_pages_allocated = num_pages_allocated;
    setNum_pages_allocatedIsSet(true);
    return this;
  }

  public void unsetNum_pages_allocated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_PAGES_ALLOCATED_ISSET_ID);
  }

  /** Returns true if field num_pages_allocated is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_pages_allocated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_PAGES_ALLOCATED_ISSET_ID);
  }

  public void setNum_pages_allocatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_PAGES_ALLOCATED_ISSET_ID, value);
  }

  public boolean isIs_allocation_capped() {
    return this.is_allocation_capped;
  }

  public TNodeMemoryInfo setIs_allocation_capped(boolean is_allocation_capped) {
    this.is_allocation_capped = is_allocation_capped;
    setIs_allocation_cappedIsSet(true);
    return this;
  }

  public void unsetIs_allocation_capped() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ALLOCATION_CAPPED_ISSET_ID);
  }

  /** Returns true if field is_allocation_capped is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_allocation_capped() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ALLOCATION_CAPPED_ISSET_ID);
  }

  public void setIs_allocation_cappedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ALLOCATION_CAPPED_ISSET_ID, value);
  }

  public int getNode_memory_dataSize() {
    return (this.node_memory_data == null) ? 0 : this.node_memory_data.size();
  }

  public java.util.Iterator<TMemoryData> getNode_memory_dataIterator() {
    return (this.node_memory_data == null) ? null : this.node_memory_data.iterator();
  }

  public void addToNode_memory_data(TMemoryData elem) {
    if (this.node_memory_data == null) {
      this.node_memory_data = new java.util.ArrayList<TMemoryData>();
    }
    this.node_memory_data.add(elem);
  }

  public java.util.List<TMemoryData> getNode_memory_data() {
    return this.node_memory_data;
  }

  public TNodeMemoryInfo setNode_memory_data(java.util.List<TMemoryData> node_memory_data) {
    this.node_memory_data = node_memory_data;
    return this;
  }

  public void unsetNode_memory_data() {
    this.node_memory_data = null;
  }

  /** Returns true if field node_memory_data is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_memory_data() {
    return this.node_memory_data != null;
  }

  public void setNode_memory_dataIsSet(boolean value) {
    if (!value) {
      this.node_memory_data = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HOST_NAME:
      if (value == null) {
        unsetHost_name();
      } else {
        setHost_name((java.lang.String)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPage_size();
      } else {
        setPage_size((java.lang.Long)value);
      }
      break;

    case MAX_NUM_PAGES:
      if (value == null) {
        unsetMax_num_pages();
      } else {
        setMax_num_pages((java.lang.Long)value);
      }
      break;

    case NUM_PAGES_ALLOCATED:
      if (value == null) {
        unsetNum_pages_allocated();
      } else {
        setNum_pages_allocated((java.lang.Long)value);
      }
      break;

    case IS_ALLOCATION_CAPPED:
      if (value == null) {
        unsetIs_allocation_capped();
      } else {
        setIs_allocation_capped((java.lang.Boolean)value);
      }
      break;

    case NODE_MEMORY_DATA:
      if (value == null) {
        unsetNode_memory_data();
      } else {
        setNode_memory_data((java.util.List<TMemoryData>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAME:
      return getHost_name();

    case PAGE_SIZE:
      return getPage_size();

    case MAX_NUM_PAGES:
      return getMax_num_pages();

    case NUM_PAGES_ALLOCATED:
      return getNum_pages_allocated();

    case IS_ALLOCATION_CAPPED:
      return isIs_allocation_capped();

    case NODE_MEMORY_DATA:
      return getNode_memory_data();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAME:
      return isSetHost_name();
    case PAGE_SIZE:
      return isSetPage_size();
    case MAX_NUM_PAGES:
      return isSetMax_num_pages();
    case NUM_PAGES_ALLOCATED:
      return isSetNum_pages_allocated();
    case IS_ALLOCATION_CAPPED:
      return isSetIs_allocation_capped();
    case NODE_MEMORY_DATA:
      return isSetNode_memory_data();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TNodeMemoryInfo)
      return this.equals((TNodeMemoryInfo)that);
    return false;
  }

  public boolean equals(TNodeMemoryInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_host_name = true && this.isSetHost_name();
    boolean that_present_host_name = true && that.isSetHost_name();
    if (this_present_host_name || that_present_host_name) {
      if (!(this_present_host_name && that_present_host_name))
        return false;
      if (!this.host_name.equals(that.host_name))
        return false;
    }

    boolean this_present_page_size = true;
    boolean that_present_page_size = true;
    if (this_present_page_size || that_present_page_size) {
      if (!(this_present_page_size && that_present_page_size))
        return false;
      if (this.page_size != that.page_size)
        return false;
    }

    boolean this_present_max_num_pages = true;
    boolean that_present_max_num_pages = true;
    if (this_present_max_num_pages || that_present_max_num_pages) {
      if (!(this_present_max_num_pages && that_present_max_num_pages))
        return false;
      if (this.max_num_pages != that.max_num_pages)
        return false;
    }

    boolean this_present_num_pages_allocated = true;
    boolean that_present_num_pages_allocated = true;
    if (this_present_num_pages_allocated || that_present_num_pages_allocated) {
      if (!(this_present_num_pages_allocated && that_present_num_pages_allocated))
        return false;
      if (this.num_pages_allocated != that.num_pages_allocated)
        return false;
    }

    boolean this_present_is_allocation_capped = true;
    boolean that_present_is_allocation_capped = true;
    if (this_present_is_allocation_capped || that_present_is_allocation_capped) {
      if (!(this_present_is_allocation_capped && that_present_is_allocation_capped))
        return false;
      if (this.is_allocation_capped != that.is_allocation_capped)
        return false;
    }

    boolean this_present_node_memory_data = true && this.isSetNode_memory_data();
    boolean that_present_node_memory_data = true && that.isSetNode_memory_data();
    if (this_present_node_memory_data || that_present_node_memory_data) {
      if (!(this_present_node_memory_data && that_present_node_memory_data))
        return false;
      if (!this.node_memory_data.equals(that.node_memory_data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHost_name()) ? 131071 : 524287);
    if (isSetHost_name())
      hashCode = hashCode * 8191 + host_name.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(page_size);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_num_pages);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_pages_allocated);

    hashCode = hashCode * 8191 + ((is_allocation_capped) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNode_memory_data()) ? 131071 : 524287);
    if (isSetNode_memory_data())
      hashCode = hashCode * 8191 + node_memory_data.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNodeMemoryInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHost_name()).compareTo(other.isSetHost_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_name, other.host_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_num_pages()).compareTo(other.isSetMax_num_pages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_num_pages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_num_pages, other.max_num_pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_pages_allocated()).compareTo(other.isSetNum_pages_allocated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_pages_allocated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_pages_allocated, other.num_pages_allocated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_allocation_capped()).compareTo(other.isSetIs_allocation_capped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_allocation_capped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_allocation_capped, other.is_allocation_capped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNode_memory_data()).compareTo(other.isSetNode_memory_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_memory_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_memory_data, other.node_memory_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNodeMemoryInfo(");
    boolean first = true;

    sb.append("host_name:");
    if (this.host_name == null) {
      sb.append("null");
    } else {
      sb.append(this.host_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page_size:");
    sb.append(this.page_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_num_pages:");
    sb.append(this.max_num_pages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_pages_allocated:");
    sb.append(this.num_pages_allocated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_allocation_capped:");
    sb.append(this.is_allocation_capped);
    first = false;
    if (!first) sb.append(", ");
    sb.append("node_memory_data:");
    if (this.node_memory_data == null) {
      sb.append("null");
    } else {
      sb.append(this.node_memory_data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNodeMemoryInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TNodeMemoryInfoStandardScheme getScheme() {
      return new TNodeMemoryInfoStandardScheme();
    }
  }

  private static class TNodeMemoryInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNodeMemoryInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNodeMemoryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host_name = iprot.readString();
              struct.setHost_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.page_size = iprot.readI64();
              struct.setPage_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_NUM_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_num_pages = iprot.readI64();
              struct.setMax_num_pagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_PAGES_ALLOCATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_pages_allocated = iprot.readI64();
              struct.setNum_pages_allocatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ALLOCATION_CAPPED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_allocation_capped = iprot.readBool();
              struct.setIs_allocation_cappedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_MEMORY_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.node_memory_data = new java.util.ArrayList<TMemoryData>(_list136.size);
                TMemoryData _elem137;
                for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                {
                  _elem137 = new TMemoryData();
                  _elem137.read(iprot);
                  struct.node_memory_data.add(_elem137);
                }
                iprot.readListEnd();
              }
              struct.setNode_memory_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNodeMemoryInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.host_name != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.host_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.page_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NUM_PAGES_FIELD_DESC);
      oprot.writeI64(struct.max_num_pages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_PAGES_ALLOCATED_FIELD_DESC);
      oprot.writeI64(struct.num_pages_allocated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ALLOCATION_CAPPED_FIELD_DESC);
      oprot.writeBool(struct.is_allocation_capped);
      oprot.writeFieldEnd();
      if (struct.node_memory_data != null) {
        oprot.writeFieldBegin(NODE_MEMORY_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.node_memory_data.size()));
          for (TMemoryData _iter139 : struct.node_memory_data)
          {
            _iter139.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNodeMemoryInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TNodeMemoryInfoTupleScheme getScheme() {
      return new TNodeMemoryInfoTupleScheme();
    }
  }

  private static class TNodeMemoryInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNodeMemoryInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNodeMemoryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHost_name()) {
        optionals.set(0);
      }
      if (struct.isSetPage_size()) {
        optionals.set(1);
      }
      if (struct.isSetMax_num_pages()) {
        optionals.set(2);
      }
      if (struct.isSetNum_pages_allocated()) {
        optionals.set(3);
      }
      if (struct.isSetIs_allocation_capped()) {
        optionals.set(4);
      }
      if (struct.isSetNode_memory_data()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHost_name()) {
        oprot.writeString(struct.host_name);
      }
      if (struct.isSetPage_size()) {
        oprot.writeI64(struct.page_size);
      }
      if (struct.isSetMax_num_pages()) {
        oprot.writeI64(struct.max_num_pages);
      }
      if (struct.isSetNum_pages_allocated()) {
        oprot.writeI64(struct.num_pages_allocated);
      }
      if (struct.isSetIs_allocation_capped()) {
        oprot.writeBool(struct.is_allocation_capped);
      }
      if (struct.isSetNode_memory_data()) {
        {
          oprot.writeI32(struct.node_memory_data.size());
          for (TMemoryData _iter140 : struct.node_memory_data)
          {
            _iter140.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNodeMemoryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.host_name = iprot.readString();
        struct.setHost_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.page_size = iprot.readI64();
        struct.setPage_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.max_num_pages = iprot.readI64();
        struct.setMax_num_pagesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_pages_allocated = iprot.readI64();
        struct.setNum_pages_allocatedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_allocation_capped = iprot.readBool();
        struct.setIs_allocation_cappedIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.node_memory_data = new java.util.ArrayList<TMemoryData>(_list141.size);
          TMemoryData _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = new TMemoryData();
            _elem142.read(iprot);
            struct.node_memory_data.add(_elem142);
          }
        }
        struct.setNode_memory_dataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

