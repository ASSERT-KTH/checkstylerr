/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class THardwareInfo implements org.apache.thrift.TBase<THardwareInfo, THardwareInfo._Fields>, java.io.Serializable, Cloneable, Comparable<THardwareInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THardwareInfo");

  private static final org.apache.thrift.protocol.TField NUM_GPU_HW_FIELD_DESC = new org.apache.thrift.protocol.TField("num_gpu_hw", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_CPU_HW_FIELD_DESC = new org.apache.thrift.protocol.TField("num_cpu_hw", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_GPU_ALLOCATED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_gpu_allocated", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField START_GPU_FIELD_DESC = new org.apache.thrift.protocol.TField("start_gpu", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("host_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GPU_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("gpu_info", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THardwareInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THardwareInfoTupleSchemeFactory();

  public short num_gpu_hw; // required
  public short num_cpu_hw; // required
  public short num_gpu_allocated; // required
  public short start_gpu; // required
  public java.lang.String host_name; // required
  public java.util.List<TGpuSpecification> gpu_info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_GPU_HW((short)1, "num_gpu_hw"),
    NUM_CPU_HW((short)2, "num_cpu_hw"),
    NUM_GPU_ALLOCATED((short)3, "num_gpu_allocated"),
    START_GPU((short)4, "start_gpu"),
    HOST_NAME((short)5, "host_name"),
    GPU_INFO((short)6, "gpu_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_GPU_HW
          return NUM_GPU_HW;
        case 2: // NUM_CPU_HW
          return NUM_CPU_HW;
        case 3: // NUM_GPU_ALLOCATED
          return NUM_GPU_ALLOCATED;
        case 4: // START_GPU
          return START_GPU;
        case 5: // HOST_NAME
          return HOST_NAME;
        case 6: // GPU_INFO
          return GPU_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_GPU_HW_ISSET_ID = 0;
  private static final int __NUM_CPU_HW_ISSET_ID = 1;
  private static final int __NUM_GPU_ALLOCATED_ISSET_ID = 2;
  private static final int __START_GPU_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_GPU_HW, new org.apache.thrift.meta_data.FieldMetaData("num_gpu_hw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NUM_CPU_HW, new org.apache.thrift.meta_data.FieldMetaData("num_cpu_hw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NUM_GPU_ALLOCATED, new org.apache.thrift.meta_data.FieldMetaData("num_gpu_allocated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.START_GPU, new org.apache.thrift.meta_data.FieldMetaData("start_gpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("host_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GPU_INFO, new org.apache.thrift.meta_data.FieldMetaData("gpu_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGpuSpecification.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THardwareInfo.class, metaDataMap);
  }

  public THardwareInfo() {
  }

  public THardwareInfo(
    short num_gpu_hw,
    short num_cpu_hw,
    short num_gpu_allocated,
    short start_gpu,
    java.lang.String host_name,
    java.util.List<TGpuSpecification> gpu_info)
  {
    this();
    this.num_gpu_hw = num_gpu_hw;
    setNum_gpu_hwIsSet(true);
    this.num_cpu_hw = num_cpu_hw;
    setNum_cpu_hwIsSet(true);
    this.num_gpu_allocated = num_gpu_allocated;
    setNum_gpu_allocatedIsSet(true);
    this.start_gpu = start_gpu;
    setStart_gpuIsSet(true);
    this.host_name = host_name;
    this.gpu_info = gpu_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THardwareInfo(THardwareInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_gpu_hw = other.num_gpu_hw;
    this.num_cpu_hw = other.num_cpu_hw;
    this.num_gpu_allocated = other.num_gpu_allocated;
    this.start_gpu = other.start_gpu;
    if (other.isSetHost_name()) {
      this.host_name = other.host_name;
    }
    if (other.isSetGpu_info()) {
      java.util.List<TGpuSpecification> __this__gpu_info = new java.util.ArrayList<TGpuSpecification>(other.gpu_info.size());
      for (TGpuSpecification other_element : other.gpu_info) {
        __this__gpu_info.add(new TGpuSpecification(other_element));
      }
      this.gpu_info = __this__gpu_info;
    }
  }

  public THardwareInfo deepCopy() {
    return new THardwareInfo(this);
  }

  @Override
  public void clear() {
    setNum_gpu_hwIsSet(false);
    this.num_gpu_hw = 0;
    setNum_cpu_hwIsSet(false);
    this.num_cpu_hw = 0;
    setNum_gpu_allocatedIsSet(false);
    this.num_gpu_allocated = 0;
    setStart_gpuIsSet(false);
    this.start_gpu = 0;
    this.host_name = null;
    this.gpu_info = null;
  }

  public short getNum_gpu_hw() {
    return this.num_gpu_hw;
  }

  public THardwareInfo setNum_gpu_hw(short num_gpu_hw) {
    this.num_gpu_hw = num_gpu_hw;
    setNum_gpu_hwIsSet(true);
    return this;
  }

  public void unsetNum_gpu_hw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_GPU_HW_ISSET_ID);
  }

  /** Returns true if field num_gpu_hw is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_gpu_hw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_GPU_HW_ISSET_ID);
  }

  public void setNum_gpu_hwIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_GPU_HW_ISSET_ID, value);
  }

  public short getNum_cpu_hw() {
    return this.num_cpu_hw;
  }

  public THardwareInfo setNum_cpu_hw(short num_cpu_hw) {
    this.num_cpu_hw = num_cpu_hw;
    setNum_cpu_hwIsSet(true);
    return this;
  }

  public void unsetNum_cpu_hw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CPU_HW_ISSET_ID);
  }

  /** Returns true if field num_cpu_hw is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_cpu_hw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CPU_HW_ISSET_ID);
  }

  public void setNum_cpu_hwIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CPU_HW_ISSET_ID, value);
  }

  public short getNum_gpu_allocated() {
    return this.num_gpu_allocated;
  }

  public THardwareInfo setNum_gpu_allocated(short num_gpu_allocated) {
    this.num_gpu_allocated = num_gpu_allocated;
    setNum_gpu_allocatedIsSet(true);
    return this;
  }

  public void unsetNum_gpu_allocated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_GPU_ALLOCATED_ISSET_ID);
  }

  /** Returns true if field num_gpu_allocated is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_gpu_allocated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_GPU_ALLOCATED_ISSET_ID);
  }

  public void setNum_gpu_allocatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_GPU_ALLOCATED_ISSET_ID, value);
  }

  public short getStart_gpu() {
    return this.start_gpu;
  }

  public THardwareInfo setStart_gpu(short start_gpu) {
    this.start_gpu = start_gpu;
    setStart_gpuIsSet(true);
    return this;
  }

  public void unsetStart_gpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_GPU_ISSET_ID);
  }

  /** Returns true if field start_gpu is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_gpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_GPU_ISSET_ID);
  }

  public void setStart_gpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_GPU_ISSET_ID, value);
  }

  public java.lang.String getHost_name() {
    return this.host_name;
  }

  public THardwareInfo setHost_name(java.lang.String host_name) {
    this.host_name = host_name;
    return this;
  }

  public void unsetHost_name() {
    this.host_name = null;
  }

  /** Returns true if field host_name is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_name() {
    return this.host_name != null;
  }

  public void setHost_nameIsSet(boolean value) {
    if (!value) {
      this.host_name = null;
    }
  }

  public int getGpu_infoSize() {
    return (this.gpu_info == null) ? 0 : this.gpu_info.size();
  }

  public java.util.Iterator<TGpuSpecification> getGpu_infoIterator() {
    return (this.gpu_info == null) ? null : this.gpu_info.iterator();
  }

  public void addToGpu_info(TGpuSpecification elem) {
    if (this.gpu_info == null) {
      this.gpu_info = new java.util.ArrayList<TGpuSpecification>();
    }
    this.gpu_info.add(elem);
  }

  public java.util.List<TGpuSpecification> getGpu_info() {
    return this.gpu_info;
  }

  public THardwareInfo setGpu_info(java.util.List<TGpuSpecification> gpu_info) {
    this.gpu_info = gpu_info;
    return this;
  }

  public void unsetGpu_info() {
    this.gpu_info = null;
  }

  /** Returns true if field gpu_info is set (has been assigned a value) and false otherwise */
  public boolean isSetGpu_info() {
    return this.gpu_info != null;
  }

  public void setGpu_infoIsSet(boolean value) {
    if (!value) {
      this.gpu_info = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NUM_GPU_HW:
      if (value == null) {
        unsetNum_gpu_hw();
      } else {
        setNum_gpu_hw((java.lang.Short)value);
      }
      break;

    case NUM_CPU_HW:
      if (value == null) {
        unsetNum_cpu_hw();
      } else {
        setNum_cpu_hw((java.lang.Short)value);
      }
      break;

    case NUM_GPU_ALLOCATED:
      if (value == null) {
        unsetNum_gpu_allocated();
      } else {
        setNum_gpu_allocated((java.lang.Short)value);
      }
      break;

    case START_GPU:
      if (value == null) {
        unsetStart_gpu();
      } else {
        setStart_gpu((java.lang.Short)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHost_name();
      } else {
        setHost_name((java.lang.String)value);
      }
      break;

    case GPU_INFO:
      if (value == null) {
        unsetGpu_info();
      } else {
        setGpu_info((java.util.List<TGpuSpecification>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_GPU_HW:
      return getNum_gpu_hw();

    case NUM_CPU_HW:
      return getNum_cpu_hw();

    case NUM_GPU_ALLOCATED:
      return getNum_gpu_allocated();

    case START_GPU:
      return getStart_gpu();

    case HOST_NAME:
      return getHost_name();

    case GPU_INFO:
      return getGpu_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_GPU_HW:
      return isSetNum_gpu_hw();
    case NUM_CPU_HW:
      return isSetNum_cpu_hw();
    case NUM_GPU_ALLOCATED:
      return isSetNum_gpu_allocated();
    case START_GPU:
      return isSetStart_gpu();
    case HOST_NAME:
      return isSetHost_name();
    case GPU_INFO:
      return isSetGpu_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof THardwareInfo)
      return this.equals((THardwareInfo)that);
    return false;
  }

  public boolean equals(THardwareInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_num_gpu_hw = true;
    boolean that_present_num_gpu_hw = true;
    if (this_present_num_gpu_hw || that_present_num_gpu_hw) {
      if (!(this_present_num_gpu_hw && that_present_num_gpu_hw))
        return false;
      if (this.num_gpu_hw != that.num_gpu_hw)
        return false;
    }

    boolean this_present_num_cpu_hw = true;
    boolean that_present_num_cpu_hw = true;
    if (this_present_num_cpu_hw || that_present_num_cpu_hw) {
      if (!(this_present_num_cpu_hw && that_present_num_cpu_hw))
        return false;
      if (this.num_cpu_hw != that.num_cpu_hw)
        return false;
    }

    boolean this_present_num_gpu_allocated = true;
    boolean that_present_num_gpu_allocated = true;
    if (this_present_num_gpu_allocated || that_present_num_gpu_allocated) {
      if (!(this_present_num_gpu_allocated && that_present_num_gpu_allocated))
        return false;
      if (this.num_gpu_allocated != that.num_gpu_allocated)
        return false;
    }

    boolean this_present_start_gpu = true;
    boolean that_present_start_gpu = true;
    if (this_present_start_gpu || that_present_start_gpu) {
      if (!(this_present_start_gpu && that_present_start_gpu))
        return false;
      if (this.start_gpu != that.start_gpu)
        return false;
    }

    boolean this_present_host_name = true && this.isSetHost_name();
    boolean that_present_host_name = true && that.isSetHost_name();
    if (this_present_host_name || that_present_host_name) {
      if (!(this_present_host_name && that_present_host_name))
        return false;
      if (!this.host_name.equals(that.host_name))
        return false;
    }

    boolean this_present_gpu_info = true && this.isSetGpu_info();
    boolean that_present_gpu_info = true && that.isSetGpu_info();
    if (this_present_gpu_info || that_present_gpu_info) {
      if (!(this_present_gpu_info && that_present_gpu_info))
        return false;
      if (!this.gpu_info.equals(that.gpu_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + num_gpu_hw;

    hashCode = hashCode * 8191 + num_cpu_hw;

    hashCode = hashCode * 8191 + num_gpu_allocated;

    hashCode = hashCode * 8191 + start_gpu;

    hashCode = hashCode * 8191 + ((isSetHost_name()) ? 131071 : 524287);
    if (isSetHost_name())
      hashCode = hashCode * 8191 + host_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetGpu_info()) ? 131071 : 524287);
    if (isSetGpu_info())
      hashCode = hashCode * 8191 + gpu_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(THardwareInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNum_gpu_hw()).compareTo(other.isSetNum_gpu_hw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_gpu_hw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_gpu_hw, other.num_gpu_hw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_cpu_hw()).compareTo(other.isSetNum_cpu_hw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_cpu_hw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_cpu_hw, other.num_cpu_hw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_gpu_allocated()).compareTo(other.isSetNum_gpu_allocated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_gpu_allocated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_gpu_allocated, other.num_gpu_allocated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_gpu()).compareTo(other.isSetStart_gpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_gpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_gpu, other.start_gpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHost_name()).compareTo(other.isSetHost_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_name, other.host_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGpu_info()).compareTo(other.isSetGpu_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpu_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpu_info, other.gpu_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THardwareInfo(");
    boolean first = true;

    sb.append("num_gpu_hw:");
    sb.append(this.num_gpu_hw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_cpu_hw:");
    sb.append(this.num_cpu_hw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_gpu_allocated:");
    sb.append(this.num_gpu_allocated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_gpu:");
    sb.append(this.start_gpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("host_name:");
    if (this.host_name == null) {
      sb.append("null");
    } else {
      sb.append(this.host_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpu_info:");
    if (this.gpu_info == null) {
      sb.append("null");
    } else {
      sb.append(this.gpu_info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THardwareInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public THardwareInfoStandardScheme getScheme() {
      return new THardwareInfoStandardScheme();
    }
  }

  private static class THardwareInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<THardwareInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THardwareInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_GPU_HW
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.num_gpu_hw = iprot.readI16();
              struct.setNum_gpu_hwIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_CPU_HW
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.num_cpu_hw = iprot.readI16();
              struct.setNum_cpu_hwIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_GPU_ALLOCATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.num_gpu_allocated = iprot.readI16();
              struct.setNum_gpu_allocatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_GPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.start_gpu = iprot.readI16();
              struct.setStart_gpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host_name = iprot.readString();
              struct.setHost_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GPU_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.gpu_info = new java.util.ArrayList<TGpuSpecification>(_list112.size);
                TGpuSpecification _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = new TGpuSpecification();
                  _elem113.read(iprot);
                  struct.gpu_info.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setGpu_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THardwareInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_GPU_HW_FIELD_DESC);
      oprot.writeI16(struct.num_gpu_hw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_CPU_HW_FIELD_DESC);
      oprot.writeI16(struct.num_cpu_hw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_GPU_ALLOCATED_FIELD_DESC);
      oprot.writeI16(struct.num_gpu_allocated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_GPU_FIELD_DESC);
      oprot.writeI16(struct.start_gpu);
      oprot.writeFieldEnd();
      if (struct.host_name != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.host_name);
        oprot.writeFieldEnd();
      }
      if (struct.gpu_info != null) {
        oprot.writeFieldBegin(GPU_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.gpu_info.size()));
          for (TGpuSpecification _iter115 : struct.gpu_info)
          {
            _iter115.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THardwareInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public THardwareInfoTupleScheme getScheme() {
      return new THardwareInfoTupleScheme();
    }
  }

  private static class THardwareInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<THardwareInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THardwareInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNum_gpu_hw()) {
        optionals.set(0);
      }
      if (struct.isSetNum_cpu_hw()) {
        optionals.set(1);
      }
      if (struct.isSetNum_gpu_allocated()) {
        optionals.set(2);
      }
      if (struct.isSetStart_gpu()) {
        optionals.set(3);
      }
      if (struct.isSetHost_name()) {
        optionals.set(4);
      }
      if (struct.isSetGpu_info()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNum_gpu_hw()) {
        oprot.writeI16(struct.num_gpu_hw);
      }
      if (struct.isSetNum_cpu_hw()) {
        oprot.writeI16(struct.num_cpu_hw);
      }
      if (struct.isSetNum_gpu_allocated()) {
        oprot.writeI16(struct.num_gpu_allocated);
      }
      if (struct.isSetStart_gpu()) {
        oprot.writeI16(struct.start_gpu);
      }
      if (struct.isSetHost_name()) {
        oprot.writeString(struct.host_name);
      }
      if (struct.isSetGpu_info()) {
        {
          oprot.writeI32(struct.gpu_info.size());
          for (TGpuSpecification _iter116 : struct.gpu_info)
          {
            _iter116.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THardwareInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.num_gpu_hw = iprot.readI16();
        struct.setNum_gpu_hwIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num_cpu_hw = iprot.readI16();
        struct.setNum_cpu_hwIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_gpu_allocated = iprot.readI16();
        struct.setNum_gpu_allocatedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.start_gpu = iprot.readI16();
        struct.setStart_gpuIsSet(true);
      }
      if (incoming.get(4)) {
        struct.host_name = iprot.readString();
        struct.setHost_nameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.gpu_info = new java.util.ArrayList<TGpuSpecification>(_list117.size);
          TGpuSpecification _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new TGpuSpecification();
            _elem118.read(iprot);
            struct.gpu_info.add(_elem118);
          }
        }
        struct.setGpu_infoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

