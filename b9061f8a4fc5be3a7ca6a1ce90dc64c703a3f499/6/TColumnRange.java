/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TColumnRange implements org.apache.thrift.TBase<TColumnRange, TColumnRange._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnRange");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("col_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HAS_NULLS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_nulls", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField INT_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("int_min", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField INT_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("int_max", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FP_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("fp_min", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fp_max", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TColumnRangeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TColumnRangeTupleSchemeFactory();

  /**
   * 
   * @see TExpressionRangeType
   */
  public TExpressionRangeType type; // required
  public int col_id; // required
  public int table_id; // required
  public boolean has_nulls; // required
  public long int_min; // required
  public long int_max; // required
  public long bucket; // required
  public double fp_min; // required
  public double fp_max; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TExpressionRangeType
     */
    TYPE((short)1, "type"),
    COL_ID((short)2, "col_id"),
    TABLE_ID((short)3, "table_id"),
    HAS_NULLS((short)4, "has_nulls"),
    INT_MIN((short)5, "int_min"),
    INT_MAX((short)6, "int_max"),
    BUCKET((short)7, "bucket"),
    FP_MIN((short)8, "fp_min"),
    FP_MAX((short)9, "fp_max");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // COL_ID
          return COL_ID;
        case 3: // TABLE_ID
          return TABLE_ID;
        case 4: // HAS_NULLS
          return HAS_NULLS;
        case 5: // INT_MIN
          return INT_MIN;
        case 6: // INT_MAX
          return INT_MAX;
        case 7: // BUCKET
          return BUCKET;
        case 8: // FP_MIN
          return FP_MIN;
        case 9: // FP_MAX
          return FP_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COL_ID_ISSET_ID = 0;
  private static final int __TABLE_ID_ISSET_ID = 1;
  private static final int __HAS_NULLS_ISSET_ID = 2;
  private static final int __INT_MIN_ISSET_ID = 3;
  private static final int __INT_MAX_ISSET_ID = 4;
  private static final int __BUCKET_ISSET_ID = 5;
  private static final int __FP_MIN_ISSET_ID = 6;
  private static final int __FP_MAX_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExpressionRangeType.class)));
    tmpMap.put(_Fields.COL_ID, new org.apache.thrift.meta_data.FieldMetaData("col_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_NULLS, new org.apache.thrift.meta_data.FieldMetaData("has_nulls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INT_MIN, new org.apache.thrift.meta_data.FieldMetaData("int_min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT_MAX, new org.apache.thrift.meta_data.FieldMetaData("int_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUCKET, new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FP_MIN, new org.apache.thrift.meta_data.FieldMetaData("fp_min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FP_MAX, new org.apache.thrift.meta_data.FieldMetaData("fp_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnRange.class, metaDataMap);
  }

  public TColumnRange() {
  }

  public TColumnRange(
    TExpressionRangeType type,
    int col_id,
    int table_id,
    boolean has_nulls,
    long int_min,
    long int_max,
    long bucket,
    double fp_min,
    double fp_max)
  {
    this();
    this.type = type;
    this.col_id = col_id;
    setCol_idIsSet(true);
    this.table_id = table_id;
    setTable_idIsSet(true);
    this.has_nulls = has_nulls;
    setHas_nullsIsSet(true);
    this.int_min = int_min;
    setInt_minIsSet(true);
    this.int_max = int_max;
    setInt_maxIsSet(true);
    this.bucket = bucket;
    setBucketIsSet(true);
    this.fp_min = fp_min;
    setFp_minIsSet(true);
    this.fp_max = fp_max;
    setFp_maxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnRange(TColumnRange other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.col_id = other.col_id;
    this.table_id = other.table_id;
    this.has_nulls = other.has_nulls;
    this.int_min = other.int_min;
    this.int_max = other.int_max;
    this.bucket = other.bucket;
    this.fp_min = other.fp_min;
    this.fp_max = other.fp_max;
  }

  public TColumnRange deepCopy() {
    return new TColumnRange(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setCol_idIsSet(false);
    this.col_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setHas_nullsIsSet(false);
    this.has_nulls = false;
    setInt_minIsSet(false);
    this.int_min = 0;
    setInt_maxIsSet(false);
    this.int_max = 0;
    setBucketIsSet(false);
    this.bucket = 0;
    setFp_minIsSet(false);
    this.fp_min = 0.0;
    setFp_maxIsSet(false);
    this.fp_max = 0.0;
  }

  /**
   * 
   * @see TExpressionRangeType
   */
  public TExpressionRangeType getType() {
    return this.type;
  }

  /**
   * 
   * @see TExpressionRangeType
   */
  public TColumnRange setType(TExpressionRangeType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getCol_id() {
    return this.col_id;
  }

  public TColumnRange setCol_id(int col_id) {
    this.col_id = col_id;
    setCol_idIsSet(true);
    return this;
  }

  public void unsetCol_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COL_ID_ISSET_ID);
  }

  /** Returns true if field col_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COL_ID_ISSET_ID);
  }

  public void setCol_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COL_ID_ISSET_ID, value);
  }

  public int getTable_id() {
    return this.table_id;
  }

  public TColumnRange setTable_id(int table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public boolean isHas_nulls() {
    return this.has_nulls;
  }

  public TColumnRange setHas_nulls(boolean has_nulls) {
    this.has_nulls = has_nulls;
    setHas_nullsIsSet(true);
    return this;
  }

  public void unsetHas_nulls() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_NULLS_ISSET_ID);
  }

  /** Returns true if field has_nulls is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_nulls() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_NULLS_ISSET_ID);
  }

  public void setHas_nullsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_NULLS_ISSET_ID, value);
  }

  public long getInt_min() {
    return this.int_min;
  }

  public TColumnRange setInt_min(long int_min) {
    this.int_min = int_min;
    setInt_minIsSet(true);
    return this;
  }

  public void unsetInt_min() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INT_MIN_ISSET_ID);
  }

  /** Returns true if field int_min is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_min() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INT_MIN_ISSET_ID);
  }

  public void setInt_minIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INT_MIN_ISSET_ID, value);
  }

  public long getInt_max() {
    return this.int_max;
  }

  public TColumnRange setInt_max(long int_max) {
    this.int_max = int_max;
    setInt_maxIsSet(true);
    return this;
  }

  public void unsetInt_max() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INT_MAX_ISSET_ID);
  }

  /** Returns true if field int_max is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_max() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INT_MAX_ISSET_ID);
  }

  public void setInt_maxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INT_MAX_ISSET_ID, value);
  }

  public long getBucket() {
    return this.bucket;
  }

  public TColumnRange setBucket(long bucket) {
    this.bucket = bucket;
    setBucketIsSet(true);
    return this;
  }

  public void unsetBucket() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUCKET_ISSET_ID);
  }

  /** Returns true if field bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUCKET_ISSET_ID);
  }

  public void setBucketIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUCKET_ISSET_ID, value);
  }

  public double getFp_min() {
    return this.fp_min;
  }

  public TColumnRange setFp_min(double fp_min) {
    this.fp_min = fp_min;
    setFp_minIsSet(true);
    return this;
  }

  public void unsetFp_min() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FP_MIN_ISSET_ID);
  }

  /** Returns true if field fp_min is set (has been assigned a value) and false otherwise */
  public boolean isSetFp_min() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FP_MIN_ISSET_ID);
  }

  public void setFp_minIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FP_MIN_ISSET_ID, value);
  }

  public double getFp_max() {
    return this.fp_max;
  }

  public TColumnRange setFp_max(double fp_max) {
    this.fp_max = fp_max;
    setFp_maxIsSet(true);
    return this;
  }

  public void unsetFp_max() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FP_MAX_ISSET_ID);
  }

  /** Returns true if field fp_max is set (has been assigned a value) and false otherwise */
  public boolean isSetFp_max() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FP_MAX_ISSET_ID);
  }

  public void setFp_maxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FP_MAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TExpressionRangeType)value);
      }
      break;

    case COL_ID:
      if (value == null) {
        unsetCol_id();
      } else {
        setCol_id((java.lang.Integer)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Integer)value);
      }
      break;

    case HAS_NULLS:
      if (value == null) {
        unsetHas_nulls();
      } else {
        setHas_nulls((java.lang.Boolean)value);
      }
      break;

    case INT_MIN:
      if (value == null) {
        unsetInt_min();
      } else {
        setInt_min((java.lang.Long)value);
      }
      break;

    case INT_MAX:
      if (value == null) {
        unsetInt_max();
      } else {
        setInt_max((java.lang.Long)value);
      }
      break;

    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((java.lang.Long)value);
      }
      break;

    case FP_MIN:
      if (value == null) {
        unsetFp_min();
      } else {
        setFp_min((java.lang.Double)value);
      }
      break;

    case FP_MAX:
      if (value == null) {
        unsetFp_max();
      } else {
        setFp_max((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case COL_ID:
      return getCol_id();

    case TABLE_ID:
      return getTable_id();

    case HAS_NULLS:
      return isHas_nulls();

    case INT_MIN:
      return getInt_min();

    case INT_MAX:
      return getInt_max();

    case BUCKET:
      return getBucket();

    case FP_MIN:
      return getFp_min();

    case FP_MAX:
      return getFp_max();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case COL_ID:
      return isSetCol_id();
    case TABLE_ID:
      return isSetTable_id();
    case HAS_NULLS:
      return isSetHas_nulls();
    case INT_MIN:
      return isSetInt_min();
    case INT_MAX:
      return isSetInt_max();
    case BUCKET:
      return isSetBucket();
    case FP_MIN:
      return isSetFp_min();
    case FP_MAX:
      return isSetFp_max();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnRange)
      return this.equals((TColumnRange)that);
    return false;
  }

  public boolean equals(TColumnRange that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_col_id = true;
    boolean that_present_col_id = true;
    if (this_present_col_id || that_present_col_id) {
      if (!(this_present_col_id && that_present_col_id))
        return false;
      if (this.col_id != that.col_id)
        return false;
    }

    boolean this_present_table_id = true;
    boolean that_present_table_id = true;
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_has_nulls = true;
    boolean that_present_has_nulls = true;
    if (this_present_has_nulls || that_present_has_nulls) {
      if (!(this_present_has_nulls && that_present_has_nulls))
        return false;
      if (this.has_nulls != that.has_nulls)
        return false;
    }

    boolean this_present_int_min = true;
    boolean that_present_int_min = true;
    if (this_present_int_min || that_present_int_min) {
      if (!(this_present_int_min && that_present_int_min))
        return false;
      if (this.int_min != that.int_min)
        return false;
    }

    boolean this_present_int_max = true;
    boolean that_present_int_max = true;
    if (this_present_int_max || that_present_int_max) {
      if (!(this_present_int_max && that_present_int_max))
        return false;
      if (this.int_max != that.int_max)
        return false;
    }

    boolean this_present_bucket = true;
    boolean that_present_bucket = true;
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (this.bucket != that.bucket)
        return false;
    }

    boolean this_present_fp_min = true;
    boolean that_present_fp_min = true;
    if (this_present_fp_min || that_present_fp_min) {
      if (!(this_present_fp_min && that_present_fp_min))
        return false;
      if (this.fp_min != that.fp_min)
        return false;
    }

    boolean this_present_fp_max = true;
    boolean that_present_fp_max = true;
    if (this_present_fp_max || that_present_fp_max) {
      if (!(this_present_fp_max && that_present_fp_max))
        return false;
      if (this.fp_max != that.fp_max)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + col_id;

    hashCode = hashCode * 8191 + table_id;

    hashCode = hashCode * 8191 + ((has_nulls) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(int_min);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(int_max);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bucket);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fp_min);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fp_max);

    return hashCode;
  }

  @Override
  public int compareTo(TColumnRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCol_id()).compareTo(other.isSetCol_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_id, other.col_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTable_id()).compareTo(other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHas_nulls()).compareTo(other.isSetHas_nulls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_nulls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_nulls, other.has_nulls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInt_min()).compareTo(other.isSetInt_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_min, other.int_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInt_max()).compareTo(other.isSetInt_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_max, other.int_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBucket()).compareTo(other.isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFp_min()).compareTo(other.isSetFp_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFp_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fp_min, other.fp_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFp_max()).compareTo(other.isSetFp_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFp_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fp_max, other.fp_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TColumnRange(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col_id:");
    sb.append(this.col_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_id:");
    sb.append(this.table_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_nulls:");
    sb.append(this.has_nulls);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int_min:");
    sb.append(this.int_min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int_max:");
    sb.append(this.int_max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucket:");
    sb.append(this.bucket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fp_min:");
    sb.append(this.fp_min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fp_max:");
    sb.append(this.fp_max);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnRangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TColumnRangeStandardScheme getScheme() {
      return new TColumnRangeStandardScheme();
    }
  }

  private static class TColumnRangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TColumnRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.mapd.thrift.server.TExpressionRangeType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.col_id = iprot.readI32();
              struct.setCol_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.table_id = iprot.readI32();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HAS_NULLS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_nulls = iprot.readBool();
              struct.setHas_nullsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int_min = iprot.readI64();
              struct.setInt_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INT_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int_max = iprot.readI64();
              struct.setInt_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bucket = iprot.readI64();
              struct.setBucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FP_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fp_min = iprot.readDouble();
              struct.setFp_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fp_max = iprot.readDouble();
              struct.setFp_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COL_ID_FIELD_DESC);
      oprot.writeI32(struct.col_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI32(struct.table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_NULLS_FIELD_DESC);
      oprot.writeBool(struct.has_nulls);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_MIN_FIELD_DESC);
      oprot.writeI64(struct.int_min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_MAX_FIELD_DESC);
      oprot.writeI64(struct.int_max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUCKET_FIELD_DESC);
      oprot.writeI64(struct.bucket);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FP_MIN_FIELD_DESC);
      oprot.writeDouble(struct.fp_min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FP_MAX_FIELD_DESC);
      oprot.writeDouble(struct.fp_max);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnRangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TColumnRangeTupleScheme getScheme() {
      return new TColumnRangeTupleScheme();
    }
  }

  private static class TColumnRangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TColumnRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetCol_id()) {
        optionals.set(1);
      }
      if (struct.isSetTable_id()) {
        optionals.set(2);
      }
      if (struct.isSetHas_nulls()) {
        optionals.set(3);
      }
      if (struct.isSetInt_min()) {
        optionals.set(4);
      }
      if (struct.isSetInt_max()) {
        optionals.set(5);
      }
      if (struct.isSetBucket()) {
        optionals.set(6);
      }
      if (struct.isSetFp_min()) {
        optionals.set(7);
      }
      if (struct.isSetFp_max()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetCol_id()) {
        oprot.writeI32(struct.col_id);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI32(struct.table_id);
      }
      if (struct.isSetHas_nulls()) {
        oprot.writeBool(struct.has_nulls);
      }
      if (struct.isSetInt_min()) {
        oprot.writeI64(struct.int_min);
      }
      if (struct.isSetInt_max()) {
        oprot.writeI64(struct.int_max);
      }
      if (struct.isSetBucket()) {
        oprot.writeI64(struct.bucket);
      }
      if (struct.isSetFp_min()) {
        oprot.writeDouble(struct.fp_min);
      }
      if (struct.isSetFp_max()) {
        oprot.writeDouble(struct.fp_max);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.type = com.mapd.thrift.server.TExpressionRangeType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col_id = iprot.readI32();
        struct.setCol_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_id = iprot.readI32();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.has_nulls = iprot.readBool();
        struct.setHas_nullsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.int_min = iprot.readI64();
        struct.setInt_minIsSet(true);
      }
      if (incoming.get(5)) {
        struct.int_max = iprot.readI64();
        struct.setInt_maxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bucket = iprot.readI64();
        struct.setBucketIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fp_min = iprot.readDouble();
        struct.setFp_minIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fp_max = iprot.readDouble();
        struct.setFp_maxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

