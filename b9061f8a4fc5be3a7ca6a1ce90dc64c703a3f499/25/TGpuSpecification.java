/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TGpuSpecification implements org.apache.thrift.TBase<TGpuSpecification, TGpuSpecification._Fields>, java.io.Serializable, Cloneable, Comparable<TGpuSpecification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGpuSpecification");

  private static final org.apache.thrift.protocol.TField NUM_SM_FIELD_DESC = new org.apache.thrift.protocol.TField("num_sm", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CLOCK_FREQUENCY_K_HZ_FIELD_DESC = new org.apache.thrift.protocol.TField("clock_frequency_kHz", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMPUTE_CAPABILITY_MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("compute_capability_major", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField COMPUTE_CAPABILITY_MINOR_FIELD_DESC = new org.apache.thrift.protocol.TField("compute_capability_minor", org.apache.thrift.protocol.TType.I16, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGpuSpecificationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGpuSpecificationTupleSchemeFactory();

  public int num_sm; // required
  public long clock_frequency_kHz; // required
  public long memory; // required
  public short compute_capability_major; // required
  public short compute_capability_minor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_SM((short)1, "num_sm"),
    CLOCK_FREQUENCY_K_HZ((short)2, "clock_frequency_kHz"),
    MEMORY((short)3, "memory"),
    COMPUTE_CAPABILITY_MAJOR((short)4, "compute_capability_major"),
    COMPUTE_CAPABILITY_MINOR((short)5, "compute_capability_minor");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_SM
          return NUM_SM;
        case 2: // CLOCK_FREQUENCY_K_HZ
          return CLOCK_FREQUENCY_K_HZ;
        case 3: // MEMORY
          return MEMORY;
        case 4: // COMPUTE_CAPABILITY_MAJOR
          return COMPUTE_CAPABILITY_MAJOR;
        case 5: // COMPUTE_CAPABILITY_MINOR
          return COMPUTE_CAPABILITY_MINOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_SM_ISSET_ID = 0;
  private static final int __CLOCK_FREQUENCY_KHZ_ISSET_ID = 1;
  private static final int __MEMORY_ISSET_ID = 2;
  private static final int __COMPUTE_CAPABILITY_MAJOR_ISSET_ID = 3;
  private static final int __COMPUTE_CAPABILITY_MINOR_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_SM, new org.apache.thrift.meta_data.FieldMetaData("num_sm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOCK_FREQUENCY_K_HZ, new org.apache.thrift.meta_data.FieldMetaData("clock_frequency_kHz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPUTE_CAPABILITY_MAJOR, new org.apache.thrift.meta_data.FieldMetaData("compute_capability_major", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.COMPUTE_CAPABILITY_MINOR, new org.apache.thrift.meta_data.FieldMetaData("compute_capability_minor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGpuSpecification.class, metaDataMap);
  }

  public TGpuSpecification() {
  }

  public TGpuSpecification(
    int num_sm,
    long clock_frequency_kHz,
    long memory,
    short compute_capability_major,
    short compute_capability_minor)
  {
    this();
    this.num_sm = num_sm;
    setNum_smIsSet(true);
    this.clock_frequency_kHz = clock_frequency_kHz;
    setClock_frequency_kHzIsSet(true);
    this.memory = memory;
    setMemoryIsSet(true);
    this.compute_capability_major = compute_capability_major;
    setCompute_capability_majorIsSet(true);
    this.compute_capability_minor = compute_capability_minor;
    setCompute_capability_minorIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGpuSpecification(TGpuSpecification other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_sm = other.num_sm;
    this.clock_frequency_kHz = other.clock_frequency_kHz;
    this.memory = other.memory;
    this.compute_capability_major = other.compute_capability_major;
    this.compute_capability_minor = other.compute_capability_minor;
  }

  public TGpuSpecification deepCopy() {
    return new TGpuSpecification(this);
  }

  @Override
  public void clear() {
    setNum_smIsSet(false);
    this.num_sm = 0;
    setClock_frequency_kHzIsSet(false);
    this.clock_frequency_kHz = 0;
    setMemoryIsSet(false);
    this.memory = 0;
    setCompute_capability_majorIsSet(false);
    this.compute_capability_major = 0;
    setCompute_capability_minorIsSet(false);
    this.compute_capability_minor = 0;
  }

  public int getNum_sm() {
    return this.num_sm;
  }

  public TGpuSpecification setNum_sm(int num_sm) {
    this.num_sm = num_sm;
    setNum_smIsSet(true);
    return this;
  }

  public void unsetNum_sm() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_SM_ISSET_ID);
  }

  /** Returns true if field num_sm is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_sm() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_SM_ISSET_ID);
  }

  public void setNum_smIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_SM_ISSET_ID, value);
  }

  public long getClock_frequency_kHz() {
    return this.clock_frequency_kHz;
  }

  public TGpuSpecification setClock_frequency_kHz(long clock_frequency_kHz) {
    this.clock_frequency_kHz = clock_frequency_kHz;
    setClock_frequency_kHzIsSet(true);
    return this;
  }

  public void unsetClock_frequency_kHz() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLOCK_FREQUENCY_KHZ_ISSET_ID);
  }

  /** Returns true if field clock_frequency_kHz is set (has been assigned a value) and false otherwise */
  public boolean isSetClock_frequency_kHz() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLOCK_FREQUENCY_KHZ_ISSET_ID);
  }

  public void setClock_frequency_kHzIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLOCK_FREQUENCY_KHZ_ISSET_ID, value);
  }

  public long getMemory() {
    return this.memory;
  }

  public TGpuSpecification setMemory(long memory) {
    this.memory = memory;
    setMemoryIsSet(true);
    return this;
  }

  public void unsetMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORY_ISSET_ID);
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORY_ISSET_ID);
  }

  public void setMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORY_ISSET_ID, value);
  }

  public short getCompute_capability_major() {
    return this.compute_capability_major;
  }

  public TGpuSpecification setCompute_capability_major(short compute_capability_major) {
    this.compute_capability_major = compute_capability_major;
    setCompute_capability_majorIsSet(true);
    return this;
  }

  public void unsetCompute_capability_major() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPUTE_CAPABILITY_MAJOR_ISSET_ID);
  }

  /** Returns true if field compute_capability_major is set (has been assigned a value) and false otherwise */
  public boolean isSetCompute_capability_major() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPUTE_CAPABILITY_MAJOR_ISSET_ID);
  }

  public void setCompute_capability_majorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPUTE_CAPABILITY_MAJOR_ISSET_ID, value);
  }

  public short getCompute_capability_minor() {
    return this.compute_capability_minor;
  }

  public TGpuSpecification setCompute_capability_minor(short compute_capability_minor) {
    this.compute_capability_minor = compute_capability_minor;
    setCompute_capability_minorIsSet(true);
    return this;
  }

  public void unsetCompute_capability_minor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPUTE_CAPABILITY_MINOR_ISSET_ID);
  }

  /** Returns true if field compute_capability_minor is set (has been assigned a value) and false otherwise */
  public boolean isSetCompute_capability_minor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPUTE_CAPABILITY_MINOR_ISSET_ID);
  }

  public void setCompute_capability_minorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPUTE_CAPABILITY_MINOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NUM_SM:
      if (value == null) {
        unsetNum_sm();
      } else {
        setNum_sm((java.lang.Integer)value);
      }
      break;

    case CLOCK_FREQUENCY_K_HZ:
      if (value == null) {
        unsetClock_frequency_kHz();
      } else {
        setClock_frequency_kHz((java.lang.Long)value);
      }
      break;

    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((java.lang.Long)value);
      }
      break;

    case COMPUTE_CAPABILITY_MAJOR:
      if (value == null) {
        unsetCompute_capability_major();
      } else {
        setCompute_capability_major((java.lang.Short)value);
      }
      break;

    case COMPUTE_CAPABILITY_MINOR:
      if (value == null) {
        unsetCompute_capability_minor();
      } else {
        setCompute_capability_minor((java.lang.Short)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_SM:
      return getNum_sm();

    case CLOCK_FREQUENCY_K_HZ:
      return getClock_frequency_kHz();

    case MEMORY:
      return getMemory();

    case COMPUTE_CAPABILITY_MAJOR:
      return getCompute_capability_major();

    case COMPUTE_CAPABILITY_MINOR:
      return getCompute_capability_minor();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_SM:
      return isSetNum_sm();
    case CLOCK_FREQUENCY_K_HZ:
      return isSetClock_frequency_kHz();
    case MEMORY:
      return isSetMemory();
    case COMPUTE_CAPABILITY_MAJOR:
      return isSetCompute_capability_major();
    case COMPUTE_CAPABILITY_MINOR:
      return isSetCompute_capability_minor();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TGpuSpecification)
      return this.equals((TGpuSpecification)that);
    return false;
  }

  public boolean equals(TGpuSpecification that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_num_sm = true;
    boolean that_present_num_sm = true;
    if (this_present_num_sm || that_present_num_sm) {
      if (!(this_present_num_sm && that_present_num_sm))
        return false;
      if (this.num_sm != that.num_sm)
        return false;
    }

    boolean this_present_clock_frequency_kHz = true;
    boolean that_present_clock_frequency_kHz = true;
    if (this_present_clock_frequency_kHz || that_present_clock_frequency_kHz) {
      if (!(this_present_clock_frequency_kHz && that_present_clock_frequency_kHz))
        return false;
      if (this.clock_frequency_kHz != that.clock_frequency_kHz)
        return false;
    }

    boolean this_present_memory = true;
    boolean that_present_memory = true;
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (this.memory != that.memory)
        return false;
    }

    boolean this_present_compute_capability_major = true;
    boolean that_present_compute_capability_major = true;
    if (this_present_compute_capability_major || that_present_compute_capability_major) {
      if (!(this_present_compute_capability_major && that_present_compute_capability_major))
        return false;
      if (this.compute_capability_major != that.compute_capability_major)
        return false;
    }

    boolean this_present_compute_capability_minor = true;
    boolean that_present_compute_capability_minor = true;
    if (this_present_compute_capability_minor || that_present_compute_capability_minor) {
      if (!(this_present_compute_capability_minor && that_present_compute_capability_minor))
        return false;
      if (this.compute_capability_minor != that.compute_capability_minor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + num_sm;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clock_frequency_kHz);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memory);

    hashCode = hashCode * 8191 + compute_capability_major;

    hashCode = hashCode * 8191 + compute_capability_minor;

    return hashCode;
  }

  @Override
  public int compareTo(TGpuSpecification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNum_sm()).compareTo(other.isSetNum_sm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_sm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_sm, other.num_sm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClock_frequency_kHz()).compareTo(other.isSetClock_frequency_kHz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClock_frequency_kHz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clock_frequency_kHz, other.clock_frequency_kHz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompute_capability_major()).compareTo(other.isSetCompute_capability_major());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompute_capability_major()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compute_capability_major, other.compute_capability_major);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompute_capability_minor()).compareTo(other.isSetCompute_capability_minor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompute_capability_minor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compute_capability_minor, other.compute_capability_minor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGpuSpecification(");
    boolean first = true;

    sb.append("num_sm:");
    sb.append(this.num_sm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clock_frequency_kHz:");
    sb.append(this.clock_frequency_kHz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory:");
    sb.append(this.memory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compute_capability_major:");
    sb.append(this.compute_capability_major);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compute_capability_minor:");
    sb.append(this.compute_capability_minor);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGpuSpecificationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGpuSpecificationStandardScheme getScheme() {
      return new TGpuSpecificationStandardScheme();
    }
  }

  private static class TGpuSpecificationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGpuSpecification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGpuSpecification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_SM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_sm = iprot.readI32();
              struct.setNum_smIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOCK_FREQUENCY_K_HZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clock_frequency_kHz = iprot.readI64();
              struct.setClock_frequency_kHzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memory = iprot.readI64();
              struct.setMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPUTE_CAPABILITY_MAJOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.compute_capability_major = iprot.readI16();
              struct.setCompute_capability_majorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPUTE_CAPABILITY_MINOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.compute_capability_minor = iprot.readI16();
              struct.setCompute_capability_minorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGpuSpecification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_SM_FIELD_DESC);
      oprot.writeI32(struct.num_sm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOCK_FREQUENCY_K_HZ_FIELD_DESC);
      oprot.writeI64(struct.clock_frequency_kHz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_FIELD_DESC);
      oprot.writeI64(struct.memory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPUTE_CAPABILITY_MAJOR_FIELD_DESC);
      oprot.writeI16(struct.compute_capability_major);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPUTE_CAPABILITY_MINOR_FIELD_DESC);
      oprot.writeI16(struct.compute_capability_minor);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGpuSpecificationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGpuSpecificationTupleScheme getScheme() {
      return new TGpuSpecificationTupleScheme();
    }
  }

  private static class TGpuSpecificationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGpuSpecification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGpuSpecification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNum_sm()) {
        optionals.set(0);
      }
      if (struct.isSetClock_frequency_kHz()) {
        optionals.set(1);
      }
      if (struct.isSetMemory()) {
        optionals.set(2);
      }
      if (struct.isSetCompute_capability_major()) {
        optionals.set(3);
      }
      if (struct.isSetCompute_capability_minor()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNum_sm()) {
        oprot.writeI32(struct.num_sm);
      }
      if (struct.isSetClock_frequency_kHz()) {
        oprot.writeI64(struct.clock_frequency_kHz);
      }
      if (struct.isSetMemory()) {
        oprot.writeI64(struct.memory);
      }
      if (struct.isSetCompute_capability_major()) {
        oprot.writeI16(struct.compute_capability_major);
      }
      if (struct.isSetCompute_capability_minor()) {
        oprot.writeI16(struct.compute_capability_minor);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGpuSpecification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.num_sm = iprot.readI32();
        struct.setNum_smIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clock_frequency_kHz = iprot.readI64();
        struct.setClock_frequency_kHzIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memory = iprot.readI64();
        struct.setMemoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.compute_capability_major = iprot.readI16();
        struct.setCompute_capability_majorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compute_capability_minor = iprot.readI16();
        struct.setCompute_capability_minorIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

