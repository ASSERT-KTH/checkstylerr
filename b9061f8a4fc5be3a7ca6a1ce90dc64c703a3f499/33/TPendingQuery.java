/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mapd.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TPendingQuery implements org.apache.thrift.TBase<TPendingQuery, TPendingQuery._Fields>, java.io.Serializable, Cloneable, Comparable<TPendingQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPendingQuery");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_ranges", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DICTIONARY_GENERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_generations", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_GENERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_generations", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPendingQueryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPendingQueryTupleSchemeFactory();

  public long id; // required
  public java.util.List<TColumnRange> column_ranges; // required
  public java.util.List<TDictionaryGeneration> dictionary_generations; // required
  public java.util.List<TTableGeneration> table_generations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COLUMN_RANGES((short)2, "column_ranges"),
    DICTIONARY_GENERATIONS((short)3, "dictionary_generations"),
    TABLE_GENERATIONS((short)4, "table_generations");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COLUMN_RANGES
          return COLUMN_RANGES;
        case 3: // DICTIONARY_GENERATIONS
          return DICTIONARY_GENERATIONS;
        case 4: // TABLE_GENERATIONS
          return TABLE_GENERATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TQueryId")));
    tmpMap.put(_Fields.COLUMN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("column_ranges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnRange.class))));
    tmpMap.put(_Fields.DICTIONARY_GENERATIONS, new org.apache.thrift.meta_data.FieldMetaData("dictionary_generations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDictionaryGeneration.class))));
    tmpMap.put(_Fields.TABLE_GENERATIONS, new org.apache.thrift.meta_data.FieldMetaData("table_generations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableGeneration.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPendingQuery.class, metaDataMap);
  }

  public TPendingQuery() {
  }

  public TPendingQuery(
    long id,
    java.util.List<TColumnRange> column_ranges,
    java.util.List<TDictionaryGeneration> dictionary_generations,
    java.util.List<TTableGeneration> table_generations)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.column_ranges = column_ranges;
    this.dictionary_generations = dictionary_generations;
    this.table_generations = table_generations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPendingQuery(TPendingQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetColumn_ranges()) {
      java.util.List<TColumnRange> __this__column_ranges = new java.util.ArrayList<TColumnRange>(other.column_ranges.size());
      for (TColumnRange other_element : other.column_ranges) {
        __this__column_ranges.add(new TColumnRange(other_element));
      }
      this.column_ranges = __this__column_ranges;
    }
    if (other.isSetDictionary_generations()) {
      java.util.List<TDictionaryGeneration> __this__dictionary_generations = new java.util.ArrayList<TDictionaryGeneration>(other.dictionary_generations.size());
      for (TDictionaryGeneration other_element : other.dictionary_generations) {
        __this__dictionary_generations.add(new TDictionaryGeneration(other_element));
      }
      this.dictionary_generations = __this__dictionary_generations;
    }
    if (other.isSetTable_generations()) {
      java.util.List<TTableGeneration> __this__table_generations = new java.util.ArrayList<TTableGeneration>(other.table_generations.size());
      for (TTableGeneration other_element : other.table_generations) {
        __this__table_generations.add(new TTableGeneration(other_element));
      }
      this.table_generations = __this__table_generations;
    }
  }

  public TPendingQuery deepCopy() {
    return new TPendingQuery(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.column_ranges = null;
    this.dictionary_generations = null;
    this.table_generations = null;
  }

  public long getId() {
    return this.id;
  }

  public TPendingQuery setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getColumn_rangesSize() {
    return (this.column_ranges == null) ? 0 : this.column_ranges.size();
  }

  public java.util.Iterator<TColumnRange> getColumn_rangesIterator() {
    return (this.column_ranges == null) ? null : this.column_ranges.iterator();
  }

  public void addToColumn_ranges(TColumnRange elem) {
    if (this.column_ranges == null) {
      this.column_ranges = new java.util.ArrayList<TColumnRange>();
    }
    this.column_ranges.add(elem);
  }

  public java.util.List<TColumnRange> getColumn_ranges() {
    return this.column_ranges;
  }

  public TPendingQuery setColumn_ranges(java.util.List<TColumnRange> column_ranges) {
    this.column_ranges = column_ranges;
    return this;
  }

  public void unsetColumn_ranges() {
    this.column_ranges = null;
  }

  /** Returns true if field column_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_ranges() {
    return this.column_ranges != null;
  }

  public void setColumn_rangesIsSet(boolean value) {
    if (!value) {
      this.column_ranges = null;
    }
  }

  public int getDictionary_generationsSize() {
    return (this.dictionary_generations == null) ? 0 : this.dictionary_generations.size();
  }

  public java.util.Iterator<TDictionaryGeneration> getDictionary_generationsIterator() {
    return (this.dictionary_generations == null) ? null : this.dictionary_generations.iterator();
  }

  public void addToDictionary_generations(TDictionaryGeneration elem) {
    if (this.dictionary_generations == null) {
      this.dictionary_generations = new java.util.ArrayList<TDictionaryGeneration>();
    }
    this.dictionary_generations.add(elem);
  }

  public java.util.List<TDictionaryGeneration> getDictionary_generations() {
    return this.dictionary_generations;
  }

  public TPendingQuery setDictionary_generations(java.util.List<TDictionaryGeneration> dictionary_generations) {
    this.dictionary_generations = dictionary_generations;
    return this;
  }

  public void unsetDictionary_generations() {
    this.dictionary_generations = null;
  }

  /** Returns true if field dictionary_generations is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_generations() {
    return this.dictionary_generations != null;
  }

  public void setDictionary_generationsIsSet(boolean value) {
    if (!value) {
      this.dictionary_generations = null;
    }
  }

  public int getTable_generationsSize() {
    return (this.table_generations == null) ? 0 : this.table_generations.size();
  }

  public java.util.Iterator<TTableGeneration> getTable_generationsIterator() {
    return (this.table_generations == null) ? null : this.table_generations.iterator();
  }

  public void addToTable_generations(TTableGeneration elem) {
    if (this.table_generations == null) {
      this.table_generations = new java.util.ArrayList<TTableGeneration>();
    }
    this.table_generations.add(elem);
  }

  public java.util.List<TTableGeneration> getTable_generations() {
    return this.table_generations;
  }

  public TPendingQuery setTable_generations(java.util.List<TTableGeneration> table_generations) {
    this.table_generations = table_generations;
    return this;
  }

  public void unsetTable_generations() {
    this.table_generations = null;
  }

  /** Returns true if field table_generations is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_generations() {
    return this.table_generations != null;
  }

  public void setTable_generationsIsSet(boolean value) {
    if (!value) {
      this.table_generations = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case COLUMN_RANGES:
      if (value == null) {
        unsetColumn_ranges();
      } else {
        setColumn_ranges((java.util.List<TColumnRange>)value);
      }
      break;

    case DICTIONARY_GENERATIONS:
      if (value == null) {
        unsetDictionary_generations();
      } else {
        setDictionary_generations((java.util.List<TDictionaryGeneration>)value);
      }
      break;

    case TABLE_GENERATIONS:
      if (value == null) {
        unsetTable_generations();
      } else {
        setTable_generations((java.util.List<TTableGeneration>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COLUMN_RANGES:
      return getColumn_ranges();

    case DICTIONARY_GENERATIONS:
      return getDictionary_generations();

    case TABLE_GENERATIONS:
      return getTable_generations();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COLUMN_RANGES:
      return isSetColumn_ranges();
    case DICTIONARY_GENERATIONS:
      return isSetDictionary_generations();
    case TABLE_GENERATIONS:
      return isSetTable_generations();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPendingQuery)
      return this.equals((TPendingQuery)that);
    return false;
  }

  public boolean equals(TPendingQuery that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_column_ranges = true && this.isSetColumn_ranges();
    boolean that_present_column_ranges = true && that.isSetColumn_ranges();
    if (this_present_column_ranges || that_present_column_ranges) {
      if (!(this_present_column_ranges && that_present_column_ranges))
        return false;
      if (!this.column_ranges.equals(that.column_ranges))
        return false;
    }

    boolean this_present_dictionary_generations = true && this.isSetDictionary_generations();
    boolean that_present_dictionary_generations = true && that.isSetDictionary_generations();
    if (this_present_dictionary_generations || that_present_dictionary_generations) {
      if (!(this_present_dictionary_generations && that_present_dictionary_generations))
        return false;
      if (!this.dictionary_generations.equals(that.dictionary_generations))
        return false;
    }

    boolean this_present_table_generations = true && this.isSetTable_generations();
    boolean that_present_table_generations = true && that.isSetTable_generations();
    if (this_present_table_generations || that_present_table_generations) {
      if (!(this_present_table_generations && that_present_table_generations))
        return false;
      if (!this.table_generations.equals(that.table_generations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetColumn_ranges()) ? 131071 : 524287);
    if (isSetColumn_ranges())
      hashCode = hashCode * 8191 + column_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictionary_generations()) ? 131071 : 524287);
    if (isSetDictionary_generations())
      hashCode = hashCode * 8191 + dictionary_generations.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_generations()) ? 131071 : 524287);
    if (isSetTable_generations())
      hashCode = hashCode * 8191 + table_generations.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPendingQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColumn_ranges()).compareTo(other.isSetColumn_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_ranges, other.column_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDictionary_generations()).compareTo(other.isSetDictionary_generations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_generations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_generations, other.dictionary_generations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTable_generations()).compareTo(other.isSetTable_generations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_generations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_generations, other.table_generations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPendingQuery(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_ranges:");
    if (this.column_ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.column_ranges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dictionary_generations:");
    if (this.dictionary_generations == null) {
      sb.append("null");
    } else {
      sb.append(this.dictionary_generations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_generations:");
    if (this.table_generations == null) {
      sb.append("null");
    } else {
      sb.append(this.table_generations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPendingQueryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPendingQueryStandardScheme getScheme() {
      return new TPendingQueryStandardScheme();
    }
  }

  private static class TPendingQueryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPendingQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPendingQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.column_ranges = new java.util.ArrayList<TColumnRange>(_list160.size);
                TColumnRange _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = new TColumnRange();
                  _elem161.read(iprot);
                  struct.column_ranges.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setColumn_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DICTIONARY_GENERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list163 = iprot.readListBegin();
                struct.dictionary_generations = new java.util.ArrayList<TDictionaryGeneration>(_list163.size);
                TDictionaryGeneration _elem164;
                for (int _i165 = 0; _i165 < _list163.size; ++_i165)
                {
                  _elem164 = new TDictionaryGeneration();
                  _elem164.read(iprot);
                  struct.dictionary_generations.add(_elem164);
                }
                iprot.readListEnd();
              }
              struct.setDictionary_generationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_GENERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                struct.table_generations = new java.util.ArrayList<TTableGeneration>(_list166.size);
                TTableGeneration _elem167;
                for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                {
                  _elem167 = new TTableGeneration();
                  _elem167.read(iprot);
                  struct.table_generations.add(_elem167);
                }
                iprot.readListEnd();
              }
              struct.setTable_generationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPendingQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.column_ranges != null) {
        oprot.writeFieldBegin(COLUMN_RANGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_ranges.size()));
          for (TColumnRange _iter169 : struct.column_ranges)
          {
            _iter169.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dictionary_generations != null) {
        oprot.writeFieldBegin(DICTIONARY_GENERATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dictionary_generations.size()));
          for (TDictionaryGeneration _iter170 : struct.dictionary_generations)
          {
            _iter170.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.table_generations != null) {
        oprot.writeFieldBegin(TABLE_GENERATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.table_generations.size()));
          for (TTableGeneration _iter171 : struct.table_generations)
          {
            _iter171.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPendingQueryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPendingQueryTupleScheme getScheme() {
      return new TPendingQueryTupleScheme();
    }
  }

  private static class TPendingQueryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPendingQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPendingQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetColumn_ranges()) {
        optionals.set(1);
      }
      if (struct.isSetDictionary_generations()) {
        optionals.set(2);
      }
      if (struct.isSetTable_generations()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetColumn_ranges()) {
        {
          oprot.writeI32(struct.column_ranges.size());
          for (TColumnRange _iter172 : struct.column_ranges)
          {
            _iter172.write(oprot);
          }
        }
      }
      if (struct.isSetDictionary_generations()) {
        {
          oprot.writeI32(struct.dictionary_generations.size());
          for (TDictionaryGeneration _iter173 : struct.dictionary_generations)
          {
            _iter173.write(oprot);
          }
        }
      }
      if (struct.isSetTable_generations()) {
        {
          oprot.writeI32(struct.table_generations.size());
          for (TTableGeneration _iter174 : struct.table_generations)
          {
            _iter174.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPendingQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_ranges = new java.util.ArrayList<TColumnRange>(_list175.size);
          TColumnRange _elem176;
          for (int _i177 = 0; _i177 < _list175.size; ++_i177)
          {
            _elem176 = new TColumnRange();
            _elem176.read(iprot);
            struct.column_ranges.add(_elem176);
          }
        }
        struct.setColumn_rangesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dictionary_generations = new java.util.ArrayList<TDictionaryGeneration>(_list178.size);
          TDictionaryGeneration _elem179;
          for (int _i180 = 0; _i180 < _list178.size; ++_i180)
          {
            _elem179 = new TDictionaryGeneration();
            _elem179.read(iprot);
            struct.dictionary_generations.add(_elem179);
          }
        }
        struct.setDictionary_generationsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.table_generations = new java.util.ArrayList<TTableGeneration>(_list181.size);
          TTableGeneration _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = new TTableGeneration();
            _elem182.read(iprot);
            struct.table_generations.add(_elem182);
          }
        }
        struct.setTable_generationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

