/**
 * Copyright (c) 2017, Mihai Emil Andronache
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * Neither the name of the copyright holder nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.amihaiemil.versioneye;

import java.util.ArrayList;
import java.util.List;

import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.json.JsonString;
import javax.json.JsonValue;

/**
 * Implementation of {@link Vulnerability}.
 * @author Mihai Andronache
 * @version $Id: 51134fe14892c8f1148f448cd01e6ceba9239fc5 $
 * @since 1.0.0
 *
 */
final class JsonVulnerability implements Vulnerability {

    /**
     * This vulnerability as a JsonObject.
     */
    private JsonObject vulnerability;
    
    /**
     * Ctor.
     * @param vulnerability Json comment as it is returned by the API.
     */
    JsonVulnerability(final JsonObject vulnerability) {
        this.vulnerability = vulnerability;
    }

    @Override
    public String language() {
        return this.vulnerability.getString("language", "");
    }

    @Override
    public String prodKey() {
        return this.vulnerability.getString("prod_key", "");
    }

    @Override
    public String nameId() {
        return this.vulnerability.getString("name_id", "");
    }

    @Override
    public String author() {
        return this.vulnerability.getString("author", "");
    }

    @Override
    public String summary() {
        return this.vulnerability.getString("summary", "");
    }

    @Override
    public String description() {
        return this.vulnerability.getString("description", "");
    }

    @Override
    public String platform() {
        return this.vulnerability.getString("platform", "");
    }

    @Override
    public String publishDate() {
        return this.vulnerability.getString("publish_date", "");
    }

    @Override
    public String framework() {
        return this.vulnerability.getString("framework", "");
    }

    @Override
    public List<String> affectedVersions() {
        final List<String> affected;
        final JsonArray versions = this.vulnerability
            .getJsonArray("affected_versions");
        if(versions == null) {
            affected = new ArrayList<>();
        } else {
            affected = new ArrayList<>();
            for(final JsonValue version : versions) {
                affected.add(((JsonString) version).getString());
            }
        }
        return affected;
    }

    @Override
    public JsonObject json() {
        return this.vulnerability;
    }

}
