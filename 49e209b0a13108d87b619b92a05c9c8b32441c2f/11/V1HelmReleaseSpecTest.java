/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.reply.orchestrator.dto.kubernetes.fluxcd;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The test settings for this Helm release.
 */
@ApiModel(description = "The test settings for this Helm release.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-10-16T10:28:05.581Z[Etc/UTC]")
public class V1HelmReleaseSpecTest {
  public static final String SERIALIZED_NAME_CLEANUP = "cleanup";
  @SerializedName(SERIALIZED_NAME_CLEANUP)
  private Boolean cleanup;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  public static final String SERIALIZED_NAME_IGNORE_FAILURES = "ignoreFailures";
  @SerializedName(SERIALIZED_NAME_IGNORE_FAILURES)
  private Boolean ignoreFailures;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Long timeout;


  public V1HelmReleaseSpecTest cleanup(Boolean cleanup) {
    
    this.cleanup = cleanup;
    return this;
  }

   /**
   * Cleanup, when targeting Helm 2, determines whether to delete test pods between each test run initiated by the Helm Operator.
   * @return cleanup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cleanup, when targeting Helm 2, determines whether to delete test pods between each test run initiated by the Helm Operator.")

  public Boolean getCleanup() {
    return cleanup;
  }


  public void setCleanup(Boolean cleanup) {
    this.cleanup = cleanup;
  }


  public V1HelmReleaseSpecTest enable(Boolean enable) {
    
    this.enable = enable;
    return this;
  }

   /**
   * Enable will mark this Helm release for tests.
   * @return enable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable will mark this Helm release for tests.")

  public Boolean getEnable() {
    return enable;
  }


  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  public V1HelmReleaseSpecTest ignoreFailures(Boolean ignoreFailures) {
    
    this.ignoreFailures = ignoreFailures;
    return this;
  }

   /**
   * IgnoreFailures will cause a Helm release to be rolled back if it fails otherwise it will be left in a released state
   * @return ignoreFailures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IgnoreFailures will cause a Helm release to be rolled back if it fails otherwise it will be left in a released state")

  public Boolean getIgnoreFailures() {
    return ignoreFailures;
  }


  public void setIgnoreFailures(Boolean ignoreFailures) {
    this.ignoreFailures = ignoreFailures;
  }


  public V1HelmReleaseSpecTest timeout(Long timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during test.
   * @return timeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during test.")

  public Long getTimeout() {
    return timeout;
  }


  public void setTimeout(Long timeout) {
    this.timeout = timeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1HelmReleaseSpecTest v1HelmReleaseSpecTest = (V1HelmReleaseSpecTest) o;
    return Objects.equals(this.cleanup, v1HelmReleaseSpecTest.cleanup) &&
        Objects.equals(this.enable, v1HelmReleaseSpecTest.enable) &&
        Objects.equals(this.ignoreFailures, v1HelmReleaseSpecTest.ignoreFailures) &&
        Objects.equals(this.timeout, v1HelmReleaseSpecTest.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanup, enable, ignoreFailures, timeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1HelmReleaseSpecTest {\n");
    sb.append("    cleanup: ").append(toIndentedString(cleanup)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    ignoreFailures: ").append(toIndentedString(ignoreFailures)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

