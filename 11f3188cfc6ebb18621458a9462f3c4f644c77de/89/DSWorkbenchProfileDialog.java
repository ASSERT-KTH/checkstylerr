/* 
 * Copyright 2015 Torridity.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tor.tribes.ui.views;

import de.tor.tribes.io.DataHolder;
import de.tor.tribes.io.ServerManager;
import de.tor.tribes.types.UserProfile;
import de.tor.tribes.types.ext.Tribe;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.JOptionPaneHelper;
import de.tor.tribes.util.ProfileManager;
import java.util.Arrays;
import java.util.Collection;
import javax.swing.DefaultComboBoxModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


/**
 *
 * @author Torridity
 */
public class DSWorkbenchProfileDialog extends javax.swing.JDialog {
    private static Logger logger = LogManager.getLogger("ProfileDialog");
    
    private static DSWorkbenchProfileDialog SINGLETON = null;
    private UserProfile currentProfile = null;

    public static synchronized DSWorkbenchProfileDialog getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new DSWorkbenchProfileDialog();
        }
        return SINGLETON;
    }

    /** Creates new form DSWorkbenchProfileDialog */
    DSWorkbenchProfileDialog() {
        initComponents();
    }

    public void showModifyDialog(UserProfile pProfile) {
        jButtonLoadPlayerList.setEnabled(false);
        String server = pProfile.getServerId();
        DefaultComboBoxModel serverModel = new DefaultComboBoxModel(new Object[]{server});
        jAccountServerBox.setModel(serverModel);
        jAccountServerBox.setEnabled(false);
        Collection<Tribe> tribes = DataHolder.getSingleton().getTribesForServer(server).values();
        Tribe[] aTribes = tribes.toArray(new Tribe[]{});
        Arrays.sort(aTribes, Tribe.CASE_INSENSITIVE_ORDER);
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        Tribe selection = null;
        for (Tribe tribe : aTribes) {
            if (tribe.getName().equals(pProfile.getTribeName())) {
                selection = tribe;
            }
            model.addElement(tribe);

        }
        jAccountTribeBox.setModel(model);
        jAccountTribeBox.setSelectedItem(selection);
        if (pProfile.isUVAccount()) {
            jIsUvAccount.setSelected(pProfile.isUVAccount());
        } else {
            jIsUvAccount.setSelected(pProfile.isUVAccount());
        }
        jDoCreateModifyAccountButton.setText("Aktualisieren");
        currentProfile = pProfile;
        pack();
        setVisible(true);
    }

    public void showAddProfileDialog() {
        jButtonLoadPlayerList.setEnabled(true);
        String server = GlobalOptions.getSelectedServer();
        String[] allServers = ServerManager.getServerIDs();
        DefaultComboBoxModel serverModel = new DefaultComboBoxModel(allServers);
        jAccountServerBox.setModel(serverModel);
        jAccountServerBox.setSelectedItem(server);
        jAccountServerBox.setEnabled(true);
        fireServerChangedEvent(null);
        jDoCreateModifyAccountButton.setText("Erstellen");
        currentProfile = null;
        pack();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        jAccountServerBox = new javax.swing.JComboBox();
        jAccountTribeBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jIsUvAccount = new javax.swing.JCheckBox();
        jDoCreateModifyAccountButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButtonLoadPlayerList = new javax.swing.JButton();

        setTitle("Profile");
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Server");
        jLabel2.setMaximumSize(new java.awt.Dimension(60, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(60, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(60, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel2, gridBagConstraints);

        jAccountServerBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireServerChangedEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jAccountServerBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jAccountTribeBox, gridBagConstraints);

        jLabel3.setText("Spieler");
        jLabel3.setMaximumSize(new java.awt.Dimension(60, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(60, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(60, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel3, gridBagConstraints);

        jIsUvAccount.setText("UV-Account");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jIsUvAccount, gridBagConstraints);

        jDoCreateModifyAccountButton.setText("Erstellen");
        jDoCreateModifyAccountButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireDoCreateProfileEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jDoCreateModifyAccountButton, gridBagConstraints);

        jButton5.setText("Abbrechen");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireDoCreateProfileEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(jButton5, gridBagConstraints);

        jButtonLoadPlayerList.setText("Laden");
        jButtonLoadPlayerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FireLoadPlayerList(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jButtonLoadPlayerList, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireDoCreateProfileEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireDoCreateProfileEvent
        if (evt.getSource() == jDoCreateModifyAccountButton) {
            if (currentProfile == null) {
                //create new profile
                String server = (String) jAccountServerBox.getSelectedItem();
                Tribe tribe = (Tribe) jAccountTribeBox.getSelectedItem();
                Integer uvId = -1;
                if (jIsUvAccount.isSelected()) {
                    uvId = tribe.getId();
                }
                
                if(ProfileManager.getSingleton().getProfile(server, tribe) != null) {
                    JOptionPaneHelper.showErrorBox(this, "Es existiert schon ein Profil.", "Fehler");
                    return;
                }
                
                UserProfile newProfile = UserProfile.create(server, tribe.getName(), uvId, true);
                if (newProfile == null) {
                    JOptionPaneHelper.showErrorBox(this, "Fehler bei der Profilerstellung.", "Fehler");
                    return;
                }
            } else {
                //modify existing profile
                Tribe tribe = (Tribe) jAccountTribeBox.getSelectedItem();
                if (tribe != null) {
                    currentProfile.setTribeName(tribe.getName());
                }
                if (jIsUvAccount.isSelected()) {
                    currentProfile.setUVId(tribe.getId());
                } else {
                    currentProfile.setUVId(-1);
                }
                if (!currentProfile.storeProfileData()) {
                    JOptionPaneHelper.showErrorBox(this, "Fehler bei der Aktualisierung der Profildaten.", "Fehler");
                    return;
                } else {
                    GlobalOptions.setSelectedProfile(currentProfile);
                }
            }
        }
        setVisible(false);
    }//GEN-LAST:event_fireDoCreateProfileEvent

    private void fireServerChangedEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireServerChangedEvent
        String server = (String) jAccountServerBox.getSelectedItem();
        if(!Arrays.asList(ServerManager.getLocalServers()).contains(server)) {
            jAccountTribeBox.setModel(new DefaultComboBoxModel(new String[] {"Bitte Laden dr\u00fccken"}));
            return;
        }
        Collection<Tribe> tribes = DataHolder.getSingleton().getTribesForServer(server).values();
        Tribe[] aTribes = tribes.toArray(new Tribe[]{});
        Arrays.sort(aTribes, Tribe.CASE_INSENSITIVE_ORDER);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (Tribe tribe : aTribes) {
            model.addElement(tribe);
        }
        jAccountTribeBox.setModel(model);
    }//GEN-LAST:event_fireServerChangedEvent
    
    private String serverBackup;
    private void FireLoadPlayerList(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FireLoadPlayerList
        serverBackup = GlobalOptions.getProperty("default.server");
        GlobalOptions.saveUserData();
        String selectedServer = (String) jAccountServerBox.getSelectedItem();
        GlobalOptions.addProperty("default.server", selectedServer);
        GlobalOptions.saveProperties();

        GlobalOptions.setSelectedServer(selectedServer);
        
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                setName("PlayerLoadThread");
                try {
                    logger.debug("Start loading from server");
                    jAccountTribeBox.setModel(new DefaultComboBoxModel(new String[] {"Lade...."}));
                    boolean ret = DataHolder.getSingleton().loadData(true);
                    logger.debug("Data loaded " + ((ret) ? "successfully" : "with errors"));
                    FireLoadPlayerFinished();
                } catch (Exception e) {
                    logger.error("Failed loading data", e);
                }
            }
        });
        logger.debug("Starting update thread");
        t.setDaemon(true);
        t.start();
    }//GEN-LAST:event_FireLoadPlayerList
    
    private void FireLoadPlayerFinished() {
        GlobalOptions.addProperty("default.server", serverBackup);
        logger.debug("Start loading from harddisk");
        jAccountTribeBox.setModel(new DefaultComboBoxModel(new String[] {"Lade...."}));
        boolean ret = DataHolder.getSingleton().loadData(false);
        logger.debug("Data loaded " + ((ret) ? "successfully" : "with errors"));
        
        fireServerChangedEvent(null);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                DSWorkbenchProfileDialog.getSingleton().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jAccountServerBox;
    private javax.swing.JComboBox jAccountTribeBox;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonLoadPlayerList;
    private javax.swing.JButton jDoCreateModifyAccountButton;
    private javax.swing.JCheckBox jIsUvAccount;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
