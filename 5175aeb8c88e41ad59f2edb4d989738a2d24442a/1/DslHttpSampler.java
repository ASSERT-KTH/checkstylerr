package us.abstracta.jmeter.javadsl.http;

import org.apache.jmeter.config.Arguments;
import org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.util.HTTPArgument;
import org.apache.jmeter.testelement.TestElement;
import org.apache.jorphan.collections.HashTree;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.http.MimeTypes;
import us.abstracta.jmeter.javadsl.core.DslSampler;
import us.abstracta.jmeter.javadsl.core.preprocessors.DslJsr223PreProcessor;

import java.util.ArrayList;
import java.util.function.Function;

import static us.abstracta.jmeter.javadsl.JmeterDsl.jsr223PreProcessor;

/**
 * Allows to configure a JMeter HTTP sampler to make HTTP requests in a test plan.
 */
public class DslHttpSampler extends DslSampler {

  private final String url;
  private HttpMethod method = HttpMethod.GET;
  private final HttpHeaders headers = new HttpHeaders();
  private String body;
  private final ArrayList<SamplerChild> children = new ArrayList<>();

  public DslHttpSampler(String name, String url) {
    super(name != null ? name : "HTTP Request", HttpTestSampleGui.class, null);
    this.url = url;
  }

  public DslHttpSampler(String name, Function<DslJsr223PreProcessor.Jsr223PreProcessorScriptVars, String> urlSupplier) {
    super(name != null ? name : "HTTP Request", HttpTestSampleGui.class, null);
    this.url = "${URL}";
    children(jsr223PreProcessor(
            s -> s.vars.put("URL", urlSupplier.apply(s))
    ));
  }

  /**
   * Specifies that the sampler should send an HTTP POST to defined URL.
   *
   * @param body to include in HTTP POST request body.
   * @param contentType to be sent as Content-Type header in HTTP POST request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler post(String body, MimeTypes.Type contentType) {
    return method(HttpMethod.POST)
        .contentType(contentType)
        .body(body);
  }

  /**
   * Specifies that the sampler should send an HTTP POST to defined URL.
   *
   * @param bodyGenerator function to provide the body on each request.
   * @param contentType to be sent as Content-Type header in HTTP POST request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler post(Function<DslJsr223PreProcessor.Jsr223PreProcessorScriptVars, String> bodyGenerator, MimeTypes.Type contentType) {
    return method(HttpMethod.POST)
            .contentType(contentType)
            .body(bodyGenerator);
  }

  /**
   * Specifies the HTTP method to be used in the HTTP request generated by the sampler.
   *
   * @param method is the HTTP method to be used by the sampler.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler method(HttpMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Specifies an HTTP header to be sent by the sampler.
   *
   * To specify multiple headers just invoke this method several times with the different header
   * names and values.
   *
   * @param name of the HTTP header.
   * @param value of the HTTP header.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler header(String name, String value) {
    headers.header(name, value);
    return this;
  }

  /**
   * Specifies an HTTP header to be sent by the sampler.
   *
   * To specify multiple headers just invoke this method several times with the different header
   * names and values.
   *
   * @param name of the HTTP header.
   * @param valueSupplier builds the header value.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler header(String name, Function<DslJsr223PreProcessor.Jsr223PreProcessorScriptVars, String> valueSupplier) {
    headers.header(name, "${HEADER~" + name + "}");
    children(jsr223PreProcessor(
            s -> s.vars.put("HEADER~" + name, valueSupplier.apply(s))
    ));
    return this;
  }

  /**
   * Allows to easily specify the Content-Type HTTP header to be used by the sampler.
   *
   * @param contentType value to send as Content-Type header.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler contentType(MimeTypes.Type contentType) {
    headers.contentType(contentType);
    return this;
  }

  /**
   * Specifies the body to be sent in the HTTP request generated by the sampler.
   *
   * @param body to be used as in the body of the HTTP request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Specifies the body to be sent in the HTTP request generated by the sampler.
   *
   * @param bodyGenerator function to provide the body on each request.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler body(Function<DslJsr223PreProcessor.Jsr223PreProcessorScriptVars, String> bodyGenerator) {
    body("${REQUEST_BODY}");
    children(jsr223PreProcessor(
            s -> s.vars.put("REQUEST_BODY", bodyGenerator.apply(s))
    ));
    return this;
  }

  /**
   * Allows specifying children test elements for the sampler, which allow for example extracting
   * information from HTTP response, alter HTTP request, assert HTTP response contents, etc.
   *
   * @param children list of test elements to add as children of this sampler.
   * @return the altered sampler to allow for fluent API usage.
   */
  public DslHttpSampler children(SamplerChild... children) {
    for (SamplerChild child: children) {
      this.children.add(child);
    }
    return this;
  }

  @Override
  public TestElement buildTestElement() {
    HTTPSamplerProxy ret = new HTTPSamplerProxy();
    ret.setFollowRedirects(true);
    ret.setUseKeepAlive(true);
    ret.setPath(url);
    ret.setMethod(method.name());
    ret.setArguments(buildArguments());
    return ret;
  }

  private Arguments buildArguments() {
    setChildren(children);
    Arguments args = new Arguments();

    if (body != null) {
      HTTPArgument arg = new HTTPArgument("", body, false);
      arg.setAlwaysEncoded(false);
      args.addArgument(arg);
    }
    return args;
  }

  @Override
  public HashTree buildTreeUnder(HashTree parent) {
    HashTree ret = super.buildTreeUnder(parent);
    if (!headers.isEmpty()) {
      headers.buildTreeUnder(ret);
    }
    return ret;
  }

}
