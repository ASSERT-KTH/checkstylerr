import com.arm.mbed.cloud.sdk.AccountManagement;
import com.arm.mbed.cloud.sdk.Connect;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.TimePeriod;
import com.arm.mbed.cloud.sdk.subscribe.model.DeviceState;
import com.arm.mbed.cloud.sdk.subscribe.model.DeviceStateFilterOptions;

import io.reactivex.BackpressureStrategy;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        /**
         * This is a small application to make newly registered devices blink. Devices must have the mbed client example
         * installed on them: https://github.com/ARMmbed/mbed-cloud-client-example/
         */
        // Loading the API key for Mbed Cloud from an environment variable
        final ConnectionOptions config = ConnectionOptions.newConfiguration(System.getenv("MBED_CLOUD_API_KEY"));
        // Instantiating the different SDK modules
        final Connect connectApi = new Connect(config);
        final AccountManagement accountApi = new AccountManagement(config);

        try {
            // Checking that we can connect to Mbed Cloud by checking my account
            System.out.println("Hello " + accountApi.getAccount().getContact());
            System.out.println("You are about to blink all newly registered devices...");

            final TimePeriod timeout = new TimePeriod(5);
            // According to the Mbed Client documentation
            // https://cloud.mbed.com/docs/current/connecting/client-lite.html#testing
            // the blinking resource is, as follows:
            final String blinkResourcePath = "/3201/0/5850";

            // Subscribing to any newly registered devices. When a new device gets registered, its ID is printed to the
            // console and a request to blink is sent.
            connectApi.subscribe()
                    .deviceStateChanges(DeviceStateFilterOptions.newFilter().equalDeviceState(DeviceState.REGISTRATION),
                            BackpressureStrategy.BUFFER)
                    .flow().doOnError(System.err::println).subscribe(message -> {
                        // Printing the ID of the newly registered device
                        System.out.println("Received a notification from device [" + message.getDeviceId() + "]");
                        // Sending a request to blink to the corresponding device
                        connectApi.executeResource(message.getDeviceId(), blinkResourcePath, null, false, timeout);
                    });
            /*
             * TODO Do some actual work
             */
            Thread.sleep(120000);// waiting for 2 minutes
            /*
             * TODO Do some actual work
             */
            // Stopping the SDK when finishing
            connectApi.stopNotifications();
        } catch (MbedCloudException | InterruptedException e) {
            e.printStackTrace();
        } finally {
            // Quitting the SDK, ensuring that all daemon threads are stopped.
            connectApi.shutdownConnectService();
        }
        // End of the application
    }
}
