/*
 * Mbed Cloud API
 * The full Mbed Cloud API
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * Contains service package information for currently active service package, currently pending service package and all
 * previous service packages this account has had.
 */
@ApiModel(description = "Contains service package information for currently active service package, currently pending service package and all previous service packages this account has had.")

public class ServicePackagesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("active")
    private ActiveServicePackage active = null;

    /**
     * Always set to &#39;service-packages&#39;.
     */
    @JsonAdapter(ObjectEnum.Adapter.class)
    public enum ObjectEnum {
        PACKAGES("service-packages");

        private String value;

        ObjectEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ObjectEnum fromValue(String text) {
            for (ObjectEnum b : ObjectEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ObjectEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ObjectEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ObjectEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("object")
    private ObjectEnum object = null;

    @SerializedName("pending")
    private PendingServicePackage pending = null;

    @SerializedName("previous")
    private List<PreviousServicePackage> previous = new ArrayList<PreviousServicePackage>();

    public ServicePackagesResponse active(ActiveServicePackage active) {
        this.active = active;
        return this;
    }

    /**
     * Currently active service package. Can be null.
     * 
     * @return active
     **/
    @ApiModelProperty(value = "Currently active service package. Can be null.")
    public ActiveServicePackage getActive() {
        return active;
    }

    public void setActive(ActiveServicePackage active) {
        this.active = active;
    }

    public ServicePackagesResponse object(ObjectEnum object) {
        this.object = object;
        return this;
    }

    /**
     * Always set to &#39;service-packages&#39;.
     * 
     * @return object
     **/
    @ApiModelProperty(required = true, value = "Always set to 'service-packages'.")
    public ObjectEnum getObject() {
        return object;
    }

    public void setObject(ObjectEnum object) {
        this.object = object;
    }

    public ServicePackagesResponse pending(PendingServicePackage pending) {
        this.pending = pending;
        return this;
    }

    /**
     * Current pending service package. Can be null.
     * 
     * @return pending
     **/
    @ApiModelProperty(value = "Current pending service package. Can be null.")
    public PendingServicePackage getPending() {
        return pending;
    }

    public void setPending(PendingServicePackage pending) {
        this.pending = pending;
    }

    public ServicePackagesResponse previous(List<PreviousServicePackage> previous) {
        this.previous = previous;
        return this;
    }

    public ServicePackagesResponse addPreviousItem(PreviousServicePackage previousItem) {
        this.previous.add(previousItem);
        return this;
    }

    /**
     * List of previous service packages.
     * 
     * @return previous
     **/
    @ApiModelProperty(required = true, value = "List of previous service packages.")
    public List<PreviousServicePackage> getPrevious() {
        return previous;
    }

    public void setPrevious(List<PreviousServicePackage> previous) {
        this.previous = previous;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServicePackagesResponse servicePackagesResponse = (ServicePackagesResponse) o;
        return Objects.equals(this.active, servicePackagesResponse.active)
               && Objects.equals(this.object, servicePackagesResponse.object)
               && Objects.equals(this.pending, servicePackagesResponse.pending)
               && Objects.equals(this.previous, servicePackagesResponse.previous);
    }

    @Override
    public int hashCode() {
        return Objects.hash(active, object, pending, previous);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ServicePackagesResponse {\n");

        sb.append("    active: ").append(toIndentedString(active)).append("\n");
        sb.append("    object: ").append(toIndentedString(object)).append("\n");
        sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
        sb.append("    previous: ").append(toIndentedString(previous)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
